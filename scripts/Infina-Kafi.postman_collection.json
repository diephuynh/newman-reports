{
	"info": {
		"_postman_id": "479a51f8-71ce-4eb6-a4d6-d2ed8a31983c",
		"name": "Infina-Kafi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3169862",
		"_collection_link": "https://dark-equinox-267507.postman.co/workspace/258e2ddd-0762-413b-b252-4b5ee6799f06/collection/3169862-479a51f8-71ce-4eb6-a4d6-d2ed8a31983c?action=share&source=collection_link&creator=3169862"
	},
	"item": [
		{
			"name": "Kafi",
			"item": [
				{
					"name": "SignIn",
					"item": [
						{
							"name": "SignIn & Relogin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('phoneNumber', \"0931895560\"); //Users ekyc approved and signed Contract",
											"pm.collectionVariables.set('password', \"12345678\");",
											"pm.collectionVariables.set('pinCode', 111111);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Handle login response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData.errors && jsonData.errors.length > 0) {",
											"        var error = jsonData.errors[0];",
											"        ",
											"        if (error.key === \"multiple_active_sessions\" && error.details && error.details.reLoginToken) {",
											"            pm.environment.set(\"reLoginToken\", error.details.reLoginToken);",
											"            ",
											"            // Call API re_login after login multi session",
											"            pm.sendRequest({",
											"                url: pm.collectionVariables.get(\"baseUrl\"),",
											"                method: \"POST\",",
											"                header: {",
											"                    \"Content-Type\": \"application/json\",",
											"                    \"x-infina-app-version\": pm.collectionVariables.get(\"x-infina-app-version\"),",
											"                    \"x-infina-api-key\": pm.collectionVariables.get(\"x-infina-api-key\")",
											"                },",
											"                body: {",
											"                    mode: \"raw\",",
											"                    raw: JSON.stringify({",
											"                        variables: {",
											"                            input: {",
											"                                re_login_token: error.details.reLoginToken",
											"                            }",
											"                        },",
											"                        query: \"mutation ($input: ReLoginInput) {\\n  re_login(input: $input) {\\n    api_client {\\n      access_token\\n      ip_address\\n      refresh_token\\n      user {\\n        id\\n        ip_address\\n        uid\\n        email\\n        phone\\n        first_name\\n        last_name\\n        status\\n        has_pin_code\\n        pin_type\\n        pin_blocking_duration\\n        pin_allowed_attempts\\n        freshchat_restore_id\\n        avatar\\n        confirm_contract\\n        contract_signed_at\\n        kyc {\\n          status\\n          address\\n          passport_issue_date\\n          passport_issue_place\\n          document_type\\n          document_number\\n          idcard_issue_date\\n          idcard_issue_place\\n          idcard_type\\n          cmnd\\n          first_name\\n          manual_review\\n          last_name\\n          full_name\\n          idcard_back_page\\n          idcard_front_page\\n          __typename\\n        }\\n        user_credits {\\n          id\\n          reward_balance\\n          expired_at\\n          __typename\\n        }\\n        documents {\\n          url\\n          created_at\\n          __typename\\n        }\\n        verified_phone\\n        verified_email\\n        referral_code\\n        referral_url\\n        custom_referral_code\\n        bank_info {\\n          bank_name\\n          bank_city\\n          bank_branch\\n          account_number\\n          account_owner\\n          bank_support\\n          verified\\n          __typename\\n        }\\n        referred_code\\n        created_at\\n        discourse {\\n          is_sign_up\\n          sign_up_at\\n          __typename\\n        }\\n        completed_challenge\\n        synced_ii_at\\n        pin_unblock_at\\n        pin_enable_manual_unblock\\n        __typename\\n      }\\n      __typename\\n    }\\n    flow\\n    __typename\\n  }\\n}\"",
											"                    })",
											"                }",
											"            }, function (err, res) {",
											"                if (!err && res.json().data && res.json().data.re_login.api_client) {",
											"                    let reLoginData = res.json().data.re_login.api_client;",
											"                    pm.collectionVariables.set(\"access_token\", reLoginData.access_token);",
											"                    pm.collectionVariables.set(\"refresh_token\", reLoginData.refresh_token);",
											"                    pm.collectionVariables.set(\"userid\", reLoginData.user.id);",
											"                    pm.collectionVariables.set(\"uid\", reLoginData.user.uid);",
											"                    pm.collectionVariables.set(\"MapId\", reLoginData.user.uid + '_SAV');",
											"                }",
											"                ",
											"            });",
											"        }",
											"    } else if (jsonData.data && jsonData.data.signin_v2) {",
											"        let loginData = jsonData.data.signin_v2;",
											"        pm.collectionVariables.set(\"access_token\", loginData.access_token);",
											"        pm.collectionVariables.set(\"refresh_token\", loginData.refresh_token);",
											"        pm.collectionVariables.set(\"userid\", loginData.user.id);",
											"        pm.collectionVariables.set(\"uid\", loginData.user.uid);",
											"        pm.collectionVariables.set(\"MapId\", loginData.user.uid + '_SAV');",
											"    }",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches signin_v2\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"signin_v2\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"signin_v2\",\n    \"variables\": {\n        \"email\": \"{{phoneNumber}}\",\n        \"password\": \"{{password}}\",\n        \"fcm_token\": \"{{$guid}}:APA91bFVsdSihx4iIvzKHqkmnSg15GpP2QyQwvMx6-Zrj-A3b9OGozt1Sg2NNdr0mfqBGENGhDyt8Dh0P_XEi6gjrDP0D-yyOjErOUtY8KNZ__gu0LP3rHs\",\n        \"app_instance_id\": \"{{$guid}}\",\n        \"platform\":\"PostmanTest\"\n    },\n    \"query\":\"mutation signin_v2($email: String, $password: String, $app_instance_id: String, $fcm_token: String, $platform: String) {\\n  signin_v2(\\n    input: {email: $email, password: $password, app_instance_id: $app_instance_id, fcm_token: $fcm_token, platform: $platform}\\n  ) {\\n    access_token\\n    ip_address\\n    refresh_token\\n    user {\\n      id\\n      ip_address\\n      uid\\n      email\\n      phone\\n      first_name\\n      last_name\\n      status\\n      has_pin_code\\n      pin_type\\n      pin_blocking_duration\\n      pin_allowed_attempts\\n      freshchat_restore_id\\n      avatar\\n      confirm_contract\\n      contract_signed_at\\n      kyc {\\n        status\\n        address\\n        passport_issue_date\\n        passport_issue_place\\n        document_type\\n        document_number\\n        idcard_issue_date\\n        idcard_issue_place\\n        idcard_type\\n        cmnd\\n        first_name\\n        manual_review\\n        last_name\\n        full_name\\n        idcard_back_page\\n        idcard_front_page\\n        __typename\\n      }\\n      user_credits {\\n        id\\n        reward_balance\\n        expired_at\\n        __typename\\n      }\\n      documents {\\n        url\\n        created_at\\n        __typename\\n      }\\n      verified_phone\\n      verified_email\\n      referral_code\\n      referral_url\\n      custom_referral_code\\n      bank_info {\\n        bank_name\\n        bank_city\\n        bank_branch\\n        account_number\\n        account_owner\\n        bank_support\\n        verified\\n        __typename\\n      }\\n      referred_code\\n      created_at\\n      discourse {\\n        is_sign_up\\n        sign_up_at\\n        __typename\\n      }\\n      completed_challenge\\n      synced_ii_at\\n      pin_unblock_at\\n      pin_enable_manual_unblock\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api/graphiql",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api",
										"graphiql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Home",
					"item": [
						{
							"name": "savings_account (Kafi total_amount)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate savings account object exists",
											"pm.test(\"Savings account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('savings_account');",
											"    const savingsAccount = jsonData.data.savings_account;",
											"    pm.expect(savingsAccount).to.be.an('object');",
											"});",
											"",
											"const savingsAccount = jsonData.data.savings_account;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'rejected_reason',",
											"        'status',",
											"        'virtual_account_number',",
											"        'virtual_account_bank_code',",
											"        'portfolio'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(savingsAccount).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 7. Validate ID format",
											"pm.test(\"ID has correct format\", function() {",
											"    pm.expect(savingsAccount.id).to.be.a('string');",
											"    pm.expect(savingsAccount.id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 8. Validate timestamps",
											"pm.test(\"Timestamps are valid\", function() {",
											"    pm.expect(savingsAccount.created_at).to.be.a('string');",
											"    pm.expect(new Date(savingsAccount.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(savingsAccount.updated_at).to.be.a('string');",
											"    pm.expect(new Date(savingsAccount.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate updated_at is after created_at",
											"    const createdAt = new Date(savingsAccount.created_at);",
											"    const updatedAt = new Date(savingsAccount.updated_at);",
											"    pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"});",
											"",
											"// 9. Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(savingsAccount.status).to.be.a('string');",
											"    pm.expect(savingsAccount.status).to.be.oneOf([",
											"        'APPROVED',",
											"        'PENDING',",
											"        'REJECTED',",
											"        'SUSPENDED'",
											"    ]);",
											"});",
											"",
											"// 10. Validate rejected_reason for rejected accounts",
											"if (savingsAccount.status === \"REJECTED\") {",
											"    pm.test(\"Rejected account has rejection reason\", function() {",
											"        pm.expect(savingsAccount.rejected_reason).to.not.be.null;",
											"        pm.expect(savingsAccount.rejected_reason).to.be.a('string');",
											"    });",
											"} else {",
											"    pm.test(\"Approved account has null rejected_reason\", function() {",
											"        pm.expect(savingsAccount.rejected_reason).to.be.null;",
											"    });",
											"}",
											"",
											"// 11. Validate virtual account details",
											"pm.test(\"Virtual account details are valid\", function() {",
											"    pm.expect(savingsAccount.virtual_account_number).to.be.a('string');",
											"    pm.expect(savingsAccount.virtual_account_number).to.match(/^[A-Z0-9]{8,10}$/);",
											"    ",
											"    pm.expect(savingsAccount.virtual_account_bank_code).to.be.a('string');",
											"    pm.expect(savingsAccount.virtual_account_bank_code).to.match(/^[A-Z]{2,4}$/);",
											"});",
											"",
											"// 12. Validate portfolio structure",
											"pm.test(\"Portfolio has correct structure\", function() {",
											"    const portfolio = savingsAccount.portfolio;",
											"    pm.expect(portfolio).to.be.an('object');",
											"    ",
											"    pm.expect(portfolio).to.have.property('total_amount');",
											"    pm.expect(portfolio.total_amount).to.be.a('number');",
											"    pm.expect(portfolio.total_amount).to.be.at.least(0);",
											"    ",
											"    pm.expect(portfolio).to.have.property('total_profit');",
											"    pm.expect(portfolio.total_profit).to.be.a('number');",
											"    pm.expect(portfolio.total_profit).to.be.at.least(0);",
											"});",
											"",
											"",
											"// 14. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'rejected_reason',",
											"        'status',",
											"        'virtual_account_number',",
											"        'virtual_account_bank_code',",
											"        'portfolio'",
											"    ];",
											"    const actualFields = Object.keys(savingsAccount);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 15. Store account details for future tests",
											"pm.collectionVariables.set(\"savings_account_status\", savingsAccount.status);",
											"pm.collectionVariables.set(\"virtual_account_number\", savingsAccount.virtual_account_number);",
											"pm.collectionVariables.set(\"portfolio_total_amount\", savingsAccount.portfolio.total_amount);",
											"pm.collectionVariables.set(\"portfolio_total_profit\", savingsAccount.portfolio.total_profit);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_account($partner_id:ID!){savings_account(partner_id:$partner_id){...on SavingsAccount{id created_at updated_at rejected_reason status virtual_account_number virtual_account_bank_code portfolio{total_amount total_profit}}...on SavingsAccountNotFoundError{error_message}}}\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_partner (main)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Response is not valid JSON\");",
											"    });",
											"}",
											"",
											"pm.test(\"Contains 'data.savings_partner'\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_partner\");",
											"});",
											"",
											"const partner = jsonData.data.savings_partner;",
											"",
											"pm.test(\"'id' is a non-empty string\", () => {",
											"    pm.expect(partner.id).to.be.a(\"string\").and.not.empty;",
											"});",
											"",
											"pm.test(\"'code' equals 'KF'\", () => {",
											"    pm.expect(partner.code).to.eql(\"KF\");",
											"});",
											"",
											"pm.test(\"'name' equals 'Kafi'\", () => {",
											"    pm.expect(partner.name).to.eql(\"Kafi\");",
											"});",
											"",
											"pm.test(\"'status' equals 'ACTIVE'\", () => {",
											"    pm.expect(partner.status).to.eql(\"ACTIVE\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_partner($code:SavingsPartnerCode!){savings_partner(code:$code){...on SavingsPartner{id code name status}}}\",\n    \"variables\": {\n        \"code\": \"KAFI\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_active_partner_maintenance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"✅ Validate savings_active_partner_maintenance response\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Ensure the expected path exists",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_active_partner_maintenance\");",
											"",
											"    const maintenanceList = jsonData.data.savings_active_partner_maintenance;",
											"",
											"    // Check that it is an array",
											"    pm.expect(maintenanceList).to.be.an(\"array\");",
											"",
											"    // If array is not empty, validate structure of each item",
											"    if (maintenanceList.length > 0) {",
											"        maintenanceList.forEach(item => {",
											"            pm.expect(item).to.have.property(\"partner_code\").that.is.a(\"string\");",
											"            pm.expect(item).to.have.property(\"from\").that.is.a(\"string\");",
											"            pm.expect(item).to.have.property(\"to\").that.is.a(\"string\");",
											"",
											"            const fromDate = new Date(item.from);",
											"            const toDate = new Date(item.to);",
											"",
											"            pm.expect(fromDate.toString()).not.to.equal(\"Invalid Date\");",
											"            pm.expect(toDate.toString()).not.to.equal(\"Invalid Date\");",
											"            pm.expect(fromDate.getTime()).to.be.below(toDate.getTime());",
											"        });",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_active_partner_maintenance($partnerId:ID!){savings_active_partner_maintenance(partnerId:$partnerId){code from to}}\",\n    \"variables\": {\n        \"partnerId\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_products",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_products');",
											"});",
											"",
											"// 5. Validate savings products array",
											"pm.test(\"Savings products array exists and has items\", function() {",
											"    const products = jsonData.data.savings_products;",
											"    pm.expect(products).to.be.an('array');",
											"    pm.expect(products.length).to.be.at.least(1);",
											"});",
											"",
											"// 6. Validate each savings product",
											"jsonData.data.savings_products.forEach((product, index) => {",
											"    const productPrefix = `Product ${index + 1}`;",
											"",
											"    // 6.1 Validate required fields",
											"    pm.test(`${productPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id',",
											"            'created_at',",
											"            'updated_at',",
											"            'partner_id',",
											"            'name',",
											"            'code',",
											"            'status',",
											"            'min_deposit',",
											"            'max_deposit',",
											"            'logo_url',",
											"            'description',",
											"            'rates'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(product).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // 6.2 Validate ID format",
											"    pm.test(`${productPrefix} ID has correct format`, function() {",
											"        pm.expect(product.id).to.be.a('string');",
											"        pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    });",
											"",
											"    // 6.3 Validate timestamps",
											"    pm.test(`${productPrefix} timestamps are valid`, function() {",
											"        pm.expect(product.created_at).to.be.a('string');",
											"        pm.expect(new Date(product.created_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(product.updated_at).to.be.a('string');",
											"        pm.expect(new Date(product.updated_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        // Validate updated_at is after created_at",
											"        const createdAt = new Date(product.created_at);",
											"        const updatedAt = new Date(product.updated_at);",
											"        pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"    });",
											"",
											"    // 6.4 Validate partner ID",
											"    pm.test(`${productPrefix} partner ID is valid`, function() {",
											"        pm.expect(product.partner_id).to.be.a('string');",
											"        pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"    });",
											"",
											"    // 6.5 Validate product details",
											"    pm.test(`${productPrefix} details are valid`, function() {",
											"        pm.expect(product.name).to.be.a('string');",
											"        pm.expect(product.name.length).to.be.at.least(2);",
											"        ",
											"        pm.expect(product.code).to.be.a('string');",
											"        pm.expect(product.code).to.match(/^[A-Z0-9_]{2,20}$/);",
											"        ",
											"        pm.expect(product.status).to.be.a('string');",
											"        pm.expect(product.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'PENDING']);",
											"        ",
											"        pm.expect(product.min_deposit).to.be.a('number');",
											"        pm.expect(product.min_deposit).to.be.at.least(0);",
											"        ",
											"        pm.expect(product.max_deposit).to.be.a('number');",
											"        pm.expect(product.max_deposit).to.be.at.least(product.min_deposit);",
											"        ",
											"        pm.expect(product.logo_url).to.be.a('string');",
											"        pm.expect(product.logo_url).to.match(/^\\/static\\/.+/);",
											"        ",
											"        pm.expect(product.description).to.be.a('string');",
											"        pm.expect(product.description.length).to.be.at.least(10);",
											"    });",
											"",
											"    // 6.6 Validate rates array",
											"    pm.test(`${productPrefix} rates array is valid`, function() {",
											"        pm.expect(product.rates).to.be.an('array');",
											"        pm.expect(product.rates.length).to.be.at.least(1);",
											"    });",
											"",
											"    // 6.7 Validate each rate",
											"    product.rates.forEach((rate, rateIndex) => {",
											"        const ratePrefix = `${productPrefix} Rate ${rateIndex + 1}`;",
											"",
											"        pm.test(`${ratePrefix} has required fields`, function() {",
											"            pm.expect(rate).to.have.property('type');",
											"            pm.expect(rate).to.have.property('rate');",
											"            pm.expect(rate).to.have.property('duration');",
											"            pm.expect(rate).to.have.property('duration_unit');",
											"        });",
											"",
											"        pm.test(`${ratePrefix} type is valid`, function() {",
											"            pm.expect(rate.type).to.be.a('string');",
											"            pm.expect(rate.type).to.be.oneOf(['INTEREST', 'PENALTY']);",
											"        });",
											"",
											"        // Validate rate value (can be null for PENALTY type)",
											"        if (rate.type === 'INTEREST') {",
											"            pm.test(`${ratePrefix} interest rate is valid`, function() {",
											"                pm.expect(rate.rate).to.be.a('number');",
											"                pm.expect(rate.rate).to.be.at.least(0);",
											"                pm.expect(rate.rate).to.be.at.most(1); // Assuming rates are between 0-100% as decimals",
											"            });",
											"            ",
											"            pm.test(`${ratePrefix} duration is valid for interest rate`, function() {",
											"                pm.expect(rate.duration).to.be.a('number');",
											"                pm.expect(rate.duration).to.be.at.least(1);",
											"                pm.expect(rate.duration_unit).to.be.a('string');",
											"                pm.expect(rate.duration_unit).to.be.oneOf(['DAY', 'WEEK', 'MONTH', 'YEAR']);",
											"            });",
											"        } else {",
											"            // PENALTY rate can have null values",
											"            pm.test(`${ratePrefix} penalty rate can be null`, function() {",
											"                pm.expect(rate.rate).to.satisfy((val) => val === null || (typeof val === 'number' && val >= 0));",
											"            });",
											"        }",
											"    });",
											"",
											"    // 6.8 Validate no unexpected fields",
											"    pm.test(`${productPrefix} has no extra fields`, function() {",
											"        const expectedFields = [",
											"            'id',",
											"            'created_at',",
											"            'updated_at',",
											"            'partner_id',",
											"            'name',",
											"            'code',",
											"            'status',",
											"            'min_deposit',",
											"            'max_deposit',",
											"            'logo_url',",
											"            'description',",
											"            'rates'",
											"        ];",
											"        const actualFields = Object.keys(product);",
											"        pm.expect(actualFields).to.eql(expectedFields);",
											"    });",
											"});",
											"",
											"// 7. Store product count for future tests",
											"pm.collectionVariables.set(\"k90_savings_products\", jsonData.data.savings_products[0].id);",
											"pm.collectionVariables.set(\"k7_savings_products\", jsonData.data.savings_products[1].id);",
											"pm.collectionVariables.set(\"savings_products_count\", jsonData.data.savings_products.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_products($partnerId:ID!){savings_products(partnerId:$partnerId){id created_at updated_at partner_id name code status min_deposit max_deposit logo_url description rates{duration duration_unit rate type}}}\",\n    \"variables\": {\n        \"partnerId\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_account (main)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate savings account object exists",
											"pm.test(\"Savings account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('savings_account');",
											"    const savingsAccount = jsonData.data.savings_account;",
											"    pm.expect(savingsAccount).to.be.an('object');",
											"});",
											"",
											"const account = jsonData.data.savings_account;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'rejected_reason',",
											"        'status',",
											"        'virtual_account_number',",
											"        'virtual_account_bank_code'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(account).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 7. Validate ID format",
											"pm.test(\"ID has correct format\", function() {",
											"    pm.expect(account.id).to.be.a('string');",
											"    pm.expect(account.id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 8. Validate timestamps",
											"pm.test(\"Timestamps are valid and chronological\", function() {",
											"    pm.expect(account.created_at).to.be.a('string');",
											"    pm.expect(new Date(account.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(account.updated_at).to.be.a('string');",
											"    pm.expect(new Date(account.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate updated_at is after created_at",
											"    const createdAt = new Date(account.created_at);",
											"    const updatedAt = new Date(account.updated_at);",
											"    pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"});",
											"",
											"// 9. Validate status field",
											"pm.test(\"Status is valid and APPROVED\", function() {",
											"    pm.expect(account.status).to.be.a('string');",
											"    pm.expect(account.status).to.equal('APPROVED');",
											"});",
											"",
											"// 10. Validate rejected_reason is null for approved account",
											"pm.test(\"Rejected reason is null for approved account\", function() {",
											"    pm.expect(account.rejected_reason).to.be.null;",
											"});",
											"",
											"// 11. Validate virtual account details",
											"pm.test(\"Virtual account details are valid\", function() {",
											"    pm.expect(account.virtual_account_number).to.be.a('string');",
											"    pm.expect(account.virtual_account_number).to.match(/^[A-Z0-9]{8,10}$/);",
											"    ",
											"    pm.expect(account.virtual_account_bank_code).to.be.a('string');",
											"    pm.expect(account.virtual_account_bank_code).to.match(/^[A-Z]{2,4}$/);",
											"});",
											"",
											"// 12. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'rejected_reason',",
											"        'status',",
											"        'virtual_account_number',",
											"        'virtual_account_bank_code'",
											"    ];",
											"    const actualFields = Object.keys(account);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"",
											"// 14. Log important account details",
											"console.log(`Validated savings account ${account.id} with status ${account.status}`);",
											"console.log(`Virtual Account: ${account.virtual_account_number} @ ${account.virtual_account_bank_code}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_account($partner_id:ID!){savings_account(partner_id:$partner_id){...on SavingsAccount{id created_at updated_at rejected_reason status virtual_account_number virtual_account_bank_code}...on SavingsAccountNotFoundError{error_message}}}\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_partner_working_time",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"✅ Validate savings_partner_working_time response\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Check the root structure exists",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_partner_working_time.KAFI\");",
											"",
											"    const kafiTime = jsonData.data.savings_partner_working_time.KAFI;",
											"",
											"    // Validate `from` and `to` fields are present and ISO date strings",
											"    pm.expect(kafiTime).to.have.property(\"from\").that.is.a(\"string\");",
											"    pm.expect(kafiTime).to.have.property(\"to\").that.is.a(\"string\");",
											"",
											"    // Optionally, check that `from` and `to` are valid date strings",
											"    const fromDate = new Date(kafiTime.from);",
											"    const toDate = new Date(kafiTime.to);",
											"",
											"    pm.expect(fromDate.toString()).not.to.equal(\"Invalid Date\");",
											"    pm.expect(toDate.toString()).not.to.equal(\"Invalid Date\");",
											"",
											"    // Ensure `from` is before `to`",
											"    pm.expect(fromDate.getTime()).to.be.below(toDate.getTime());",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_partner_working_time\",\n    \"variables\": {},\n    \"query\": \"query savings_partner_working_time {\\n  savings_partner_working_time\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_contracts (status:APPROVED)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_contracts');",
											"});",
											"",
											"// 5. Validate savings contracts object",
											"const contractsData = jsonData.data.savings_contracts;",
											"pm.test(\"Contracts data has required fields\", function() {",
											"    pm.expect(contractsData).to.have.property('nodes');",
											"    pm.expect(contractsData).to.have.property('page_info');",
											"    pm.expect(contractsData).to.have.property('__typename');",
											"    pm.expect(contractsData.__typename).to.equal('SavingsContractConnection');",
											"});",
											"",
											"// 6. Validate nodes array",
											"pm.test(\"Contracts nodes array is valid\", function() {",
											"    pm.expect(contractsData.nodes).to.be.an('array');",
											"    pm.expect(contractsData.nodes.length).to.be.at.least(1);",
											"});",
											"",
											"// 7. Validate each contract in nodes array",
											"contractsData.nodes.forEach((contract, index) => {",
											"    const contractPrefix = `Contract ${index + 1}`;",
											"",
											"    // 7.1 Validate required fields",
											"    pm.test(`${contractPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'created_at', 'updated_at', 'amount', 'available_amount',",
											"            'estimated_profit', 'matured_at', 'maturity_date', 'approved_at',",
											"            'terminated_at', 'status', 'code', 'interest_rate', 'promotion_rate',",
											"            'penalty_rate', 'product', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(contract).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // 7.2 Validate ID format",
											"    pm.test(`${contractPrefix} ID has correct format`, function() {",
											"        pm.expect(contract.id).to.be.a('string');",
											"        pm.expect(contract.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    });",
											"",
											"    ",
											"",
											"    ",
											"",
											"    // 7.5 Validate status and code",
											"    pm.test(`${contractPrefix} status and code are valid`, function() {",
											"        pm.expect(contract.status).to.be.a('string');",
											"        pm.expect(contract.status).to.be.oneOf(['APPROVED', 'PENDING', 'REJECTED', 'MATURED']);",
											"        pm.expect(contract.code).to.be.a('string');",
											"        pm.expect(contract.code).to.match(/^[A-Z0-9]{6}$/);",
											"    });",
											"",
											"    // 7.6 Validate rate fields",
											"    pm.test(`${contractPrefix} rate fields are valid`, function() {",
											"        pm.expect(contract.interest_rate).to.be.a('number');",
											"        pm.expect(contract.interest_rate).to.be.at.least(0);",
											"        pm.expect(contract.promotion_rate).to.be.a('number');",
											"        pm.expect(contract.promotion_rate).to.be.at.least(0);",
											"        pm.expect(contract.penalty_rate).to.be.a('number');",
											"        pm.expect(contract.penalty_rate).to.be.at.least(0);",
											"    });",
											"",
											"    // 7.7 Validate product object",
											"    pm.test(`${contractPrefix} product is valid`, function() {",
											"        const product = contract.product;",
											"        pm.expect(product).to.be.an('object');",
											"        ",
											"        pm.expect(product.id).to.be.a('string');",
											"        pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(product.partner_id).to.be.a('string');",
											"        pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(product.name).to.be.a('string');",
											"        pm.expect(product.name.length).to.be.at.least(2);",
											"        ",
											"        pm.expect(product.code).to.be.a('string');",
											"        pm.expect(product.code).to.match(/^[A-Z0-9_]{2,20}$/);",
											"        ",
											"        pm.expect(product.status).to.be.a('string');",
											"        pm.expect(product.status).to.equal('ACTIVE');",
											"        ",
											"        pm.expect(product.logo_url).to.be.a('string');",
											"        pm.expect(product.logo_url).to.match(/^\\/static\\/.+/);",
											"        ",
											"        pm.expect(product.rates).to.be.an('array');",
											"        pm.expect(product.rates.length).to.be.at.least(1);",
											"    });",
											"",
											"    // 7.8 Validate product rates",
											"    pm.test(`${contractPrefix} product rates are valid`, function() {",
											"        contract.product.rates.forEach(rate => {",
											"            pm.expect(rate).to.have.property('type');",
											"            pm.expect(rate.type).to.be.oneOf(['INTEREST', 'PENALTY']);",
											"            ",
											"            pm.expect(rate).to.have.property('rate');",
											"            if (rate.rate !== null) {",
											"                pm.expect(rate.rate).to.be.a('number');",
											"                pm.expect(rate.rate).to.be.at.least(0);",
											"            }",
											"            ",
											"            if (rate.type === 'INTEREST') {",
											"                pm.expect(rate).to.have.property('duration');",
											"                pm.expect(rate.duration).to.be.a('number');",
											"                pm.expect(rate).to.have.property('duration_unit');",
											"                pm.expect(rate.duration_unit).to.be.oneOf(['DAY', 'WEEK', 'MONTH', 'YEAR']);",
											"            }",
											"        });",
											"    });",
											"});",
											"",
											"// 8. Validate page info",
											"pm.test(\"Page info is valid\", function() {",
											"    const pageInfo = contractsData.page_info;",
											"    pm.expect(pageInfo).to.be.an('object');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('start_cursor');",
											"    pm.expect(pageInfo.start_cursor).to.be.a('string');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('end_cursor');",
											"    pm.expect(pageInfo.end_cursor).to.be.a('string');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('has_next_page');",
											"    pm.expect(pageInfo.has_next_page).to.be.a('boolean');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('has_previous_page');",
											"    pm.expect(pageInfo.has_previous_page).to.be.a('boolean');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('__typename');",
											"    pm.expect(pageInfo.__typename).to.equal('PageInfo');",
											"});",
											"",
											"// 9. Store contract IDs for future tests",
											"pm.collectionVariables.set(\"k90_contract_id\", contractsData.nodes[0].id);",
											"pm.collectionVariables.set(\"k7_contract_id\", contractsData.nodes[1].id);",
											"pm.environment.set(\"has_next_page\", contractsData.page_info.has_next_page);",
											"",
											"// 10. Log summary information",
											"console.log(`Found ${contractsData.nodes.length} savings contracts`);",
											"console.log(`First contract: ${contractsData.nodes[0].code} (${contractsData.nodes[0].product.name})`);",
											"console.log(`Second contract: ${contractsData.nodes[1].code} (${contractsData.nodes[1].product.name})`);",
											"console.log(`3rd contract: ${contractsData.nodes[2].code} (${contractsData.nodes[2].product.name})`);",
											"console.log(`4th contract: ${contractsData.nodes[3].code} (${contractsData.nodes[3].product.name})`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_contracts\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\",\n        \"query\": \"status:APPROVED\"\n    },\n    \"query\": \"query savings_contracts($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsContractSortKeys, $query: String) {\\n  savings_contracts(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      available_amount\\n      estimated_profit\\n      matured_at\\n      maturity_date\\n      approved_at\\n      terminated_at\\n      status\\n      interest_rate\\n      code\\n      promotion_rate\\n      penalty_rate\\n      product {\\n        id\\n        partner_id\\n        name\\n        code\\n        status\\n        logo_url\\n        rates {\\n          duration\\n          duration_unit\\n          rate\\n          type\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (History list)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"const savingsTransactions = response.data.savings_transactions;",
											"",
											"// Validate pagination structure",
											"pm.test(\"Pagination structure is valid for first:100\", function() {",
											"    pm.expect(savingsTransactions.edges).to.be.an('array');",
											"    pm.expect(savingsTransactions.nodes).to.be.an('array');",
											"    ",
											"    ",
											"    // Store all cursors in a collection variable",
											"    const cursors = savingsTransactions.edges.map(edge => edge.cursor);",
											"    pm.collectionVariables.set(\"all_cursors\", JSON.stringify(cursors));",
											"    ",
											"    // Store first and last cursors separately for pagination use",
											"    if (savingsTransactions.edges.length > 0) {",
											"        pm.collectionVariables.set(\"first_cursor\", savingsTransactions.edges[0].cursor);",
											"        pm.collectionVariables.set(\"last_cursor\", savingsTransactions.edges[savingsTransactions.edges.length - 1].cursor);",
											"    }",
											"});",
											"",
											"// Enhanced cursor validation and storage",
											"pm.test(\"Cursor values are valid and stored correctly\", function() {",
											"    const edges = savingsTransactions.edges;",
											"    ",
											"    edges.forEach((edge, index) => {",
											"        // Verify cursor matches node ID",
											"        pm.expect(edge.cursor).to.equal(edge.node.id);",
											"        ",
											"        // Store each cursor with index prefix for potential future use",
											"        pm.collectionVariables.set(`cursor_${index}`, edge.cursor);",
											"    });",
											"    ",
											"    // Verify page_info cursors match our stored first/last cursors",
											"    if (edges.length > 0) {",
											"        pm.expect(savingsTransactions.page_info.start_cursor).to.equal(pm.collectionVariables.get(\"first_cursor\"));",
											"        pm.expect(savingsTransactions.page_info.end_cursor).to.equal(pm.collectionVariables.get(\"last_cursor\"));",
											"    }",
											"});",
											"",
											"// Validate page_info for pagination",
											"pm.test(\"Page info reflects first:100 pagination\", function() {",
											"    const pageInfo = savingsTransactions.page_info;",
											"    ",
											"    // If we got exactly 100 results, there might be a next page",
											"    if (savingsTransactions.edges.length === 100) {",
											"        pm.expect(pageInfo.has_next_page).to.be.true;",
											"    }",
											"    ",
											"    // First page shouldn't have previous page",
											"    pm.expect(pageInfo.has_previous_page).to.be.false;",
											"});",
											"",
											"// Transaction node validation (reusable function)",
											"function validateTransactionNode(node) {",
											"    pm.expect(node).to.have.all.keys(",
											"        'id', 'created_at', 'updated_at', 'amount', 'initial_amount',",
											"        'status', 'type', 'transfer_message', 'deposited_at', 'contract', '__typename'",
											"    );",
											"    // ... (rest of your node validation logic)",
											"}",
											"",
											"// After all tests, log the stored cursors for debugging",
											"console.log(\"First cursor:\", pm.collectionVariables.get(\"first_cursor\"));",
											"console.log(\"Last cursor:\", pm.collectionVariables.get(\"last_cursor\"));",
											"console.log(\"All cursors:\", JSON.parse(pm.collectionVariables.get(\"all_cursors\")));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transactions\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\"\n    },\n    \"query\": \"query savings_transactions($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsTransactionSortKeys, $query: String) {\\n  savings_transactions(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        amount\\n        initial_amount\\n        status\\n        type\\n        transfer_message\\n        deposited_at\\n        contract {\\n          ... on SavingsContract {\\n            id\\n            available_amount\\n            product {\\n              name\\n              __typename\\n            }\\n            maturity_date\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      initial_amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          available_amount\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (History detail)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('savings_transaction');",
											"});",
											"",
											"const transaction = response.data.savings_transaction;",
											"",
											"// Validate transaction fields",
											"pm.test(\"Transaction has all required fields\", function() {",
											"    pm.expect(transaction).to.have.all.keys(",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'initial_amount',",
											"        'amount',",
											"        'status',",
											"        'type',",
											"        'transfer_message',",
											"        'deposited_at',",
											"        'receive_method',",
											"        'tax',",
											"        'profit',",
											"        'contract',",
											"        '__typename'",
											"    );",
											"    ",
											"    pm.expect(transaction.__typename).to.equal('SavingsTransaction');",
											"});",
											"",
											"// // Validate field types and values",
											"// pm.test(\"Transaction field validation\", function() {",
											"//     // ID and timestamps",
											"//     pm.expect(transaction.id).to.equal('cmcsx0vh3039m23t36xu70vyh');",
											"//     pm.expect(new Date(transaction.created_at).toISOString()).to.equal(transaction.created_at);",
											"//     pm.expect(new Date(transaction.updated_at).toISOString()).to.equal(transaction.updated_at);",
											"    ",
											"//     // Amounts",
											"//     pm.expect(transaction.initial_amount).to.equal(70000000);",
											"//     pm.expect(transaction.amount).to.equal(70016397);",
											"//     pm.expect(transaction.tax).to.equal(863);",
											"//     pm.expect(transaction.profit).to.equal(17260);",
											"    ",
											"//     // Status and type",
											"//     pm.expect(transaction.status).to.equal('PENDING');",
											"//     pm.expect(transaction.type).to.equal('WITHDRAWAL');",
											"//     pm.expect(transaction.receive_method).to.equal('BANK_TRANSFER');",
											"    ",
											"//     // Nullable fields",
											"//     pm.expect(transaction.transfer_message).to.be.null;",
											"//     pm.expect(transaction.deposited_at).to.be.null;",
											"// });",
											"",
											"// // Validate contract",
											"// pm.test(\"Contract validation\", function() {",
											"//     const contract = transaction.contract;",
											"    ",
											"//     pm.expect(contract).to.have.all.keys(",
											"//         'id',",
											"//         'code',",
											"//         'product',",
											"//         'maturity_date',",
											"//         '__typename'",
											"//     );",
											"    ",
											"//     pm.expect(contract.__typename).to.equal('SavingsContract');",
											"//     pm.expect(contract.id).to.equal('cmc08icmk000108l80cce8lgj');",
											"//     pm.expect(contract.code).to.equal('ZTQMHQ');",
											"//     pm.expect(new Date(contract.maturity_date).toISOString()).to.equal(contract.maturity_date);",
											"    ",
											"//     // Validate product",
											"//     pm.expect(contract.product).to.have.all.keys('name', '__typename');",
											"//     pm.expect(contract.product.__typename).to.equal('SavingsProduct');",
											"//     pm.expect(contract.product.name).to.equal('K-Seven');",
											"// });",
											"",
											"// Validate calculations (optional)",
											"// pm.test(\"Amount calculations are valid\", function() {",
											"//     const expectedAmount = transaction.initial_amount + transaction.profit - transaction.tax;",
											"//     pm.expect(transaction.amount).to.equal(expectedAmount);",
											"// });",
											"",
											"// Store relevant data for future tests (optional)",
											"pm.test(\"Store transaction data\", function() {",
											"    pm.collectionVariables.set(\"last_transaction_id\", transaction.id);",
											"    pm.collectionVariables.set(\"last_transaction_amount\", transaction.amount);",
											"    pm.collectionVariables.set(\"last_contract_code\", transaction.contract.code);",
											"    ",
											"    console.log(\"Stored transaction ID:\", transaction.id);",
											"    console.log(\"Stored amount:\", transaction.amount);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transaction\",\n    \"variables\": {\n        \"transactionId\": \"{{first_cursor}}\"\n    },\n    \"query\": \"query savings_transaction($transactionId: ID!) {\\n  savings_transaction(transactionId: $transactionId) {\\n    ... on SavingsTransaction {\\n      id\\n      created_at\\n      updated_at\\n      initial_amount\\n      amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      receive_method\\n      tax\\n      profit\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          code\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (type DEPOSIT,OPEN)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// Check presence of top-level fields",
											"pm.test(\"Response contains data.savings_transactions\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_transactions\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transactions\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\",\n        \"query\": \"type:DEPOSIT,OPEN status:NEW,PENDING\"\n    },\n    \"query\": \"query savings_transactions($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsTransactionSortKeys, $query: String) {\\n  savings_transactions(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        amount\\n        initial_amount\\n        status\\n        type\\n        transfer_message\\n        deposited_at\\n        contract {\\n          ... on SavingsContract {\\n            id\\n            available_amount\\n            product {\\n              name\\n              __typename\\n            }\\n            maturity_date\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      initial_amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          available_amount\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (type WITHDRAW,OPEN)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// Check presence of top-level fields",
											"pm.test(\"Response contains data.savings_transactions\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_transactions\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transactions\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\",\n        \"query\": \"type:WITHDRAW,OPEN status:NEW,PENDING\"\n    },\n    \"query\": \"query savings_transactions($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsTransactionSortKeys, $query: String) {\\n  savings_transactions(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        amount\\n        initial_amount\\n        status\\n        type\\n        transfer_message\\n        deposited_at\\n        contract {\\n          ... on SavingsContract {\\n            id\\n            available_amount\\n            product {\\n              name\\n              __typename\\n            }\\n            maturity_date\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      initial_amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          available_amount\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "K-easy",
					"item": [
						{
							"name": "savings_account (K-easy contractId)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_account');",
											"});",
											"",
											"// 5. Validate savings account object",
											"const savingsAccount = jsonData.data.savings_account;",
											"pm.test(\"Savings account has required fields\", function() {",
											"    pm.expect(savingsAccount).to.be.an('object');",
											"    pm.expect(savingsAccount).to.have.property('id');",
											"    pm.expect(savingsAccount).to.have.property('status');",
											"    pm.expect(savingsAccount).to.have.property('virtual_account_number');",
											"    pm.expect(savingsAccount).to.have.property('cash_balance');",
											"});",
											"",
											"// 6. Validate ID format",
											"pm.test(\"Account ID has correct format\", function() {",
											"    pm.expect(savingsAccount.id).to.be.a('string');",
											"    pm.expect(savingsAccount.id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 7. Validate account status",
											"pm.test(\"Account status is APPROVED\", function() {",
											"    pm.expect(savingsAccount.status).to.be.a('string');",
											"    pm.expect(savingsAccount.status).to.equal('APPROVED');",
											"});",
											"",
											"// 8. Validate virtual account number",
											"pm.test(\"Virtual account number is valid\", function() {",
											"    pm.expect(savingsAccount.virtual_account_number).to.be.a('string');",
											"    pm.expect(savingsAccount.virtual_account_number).to.match(/^[A-Z0-9]{8,10}$/);",
											"});",
											"",
											"// 9. Validate cash balance object",
											"pm.test(\"Cash balance object is valid\", function() {",
											"    const cashBalance = savingsAccount.cash_balance;",
											"    pm.expect(cashBalance).to.be.an('object');",
											"    pm.expect(cashBalance).to.have.property('balance');",
											"    pm.expect(cashBalance).to.have.property('contract_id');",
											"    ",
											"    // Validate balance",
											"    pm.expect(cashBalance.balance).to.be.a('number');",
											"    pm.expect(cashBalance.balance).to.be.at.least(0);",
											"    ",
											"    // Validate contract ID",
											"    pm.expect(cashBalance.contract_id).to.be.a('string');",
											"    pm.expect(cashBalance.contract_id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"",
											"// 11. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedAccountFields = ['id', 'status', 'virtual_account_number', 'cash_balance'];",
											"    const actualAccountFields = Object.keys(savingsAccount);",
											"    pm.expect(actualAccountFields).to.eql(expectedAccountFields);",
											"    ",
											"    const expectedBalanceFields = ['balance', 'contract_id'];",
											"    const actualBalanceFields = Object.keys(savingsAccount.cash_balance);",
											"    pm.expect(actualBalanceFields).to.eql(expectedBalanceFields);",
											"});",
											"",
											"// 12. Store account details for future tests",
											"pm.collectionVariables.set(\"account_status\", savingsAccount.status);",
											"pm.collectionVariables.set(\"virtual_account\", savingsAccount.virtual_account_number);",
											"pm.collectionVariables.set(\"keasy_current_balance\", savingsAccount.cash_balance.balance);",
											"pm.collectionVariables.set(\"keasy_contract_id\", savingsAccount.cash_balance.contract_id);",
											"",
											"// 13. Log important details",
											"console.log(`Validated savings account ${savingsAccount.id}`);",
											"console.log(`Status: ${savingsAccount.status}`);",
											"console.log(`Virtual Account: ${savingsAccount.virtual_account_number}`);",
											"console.log(`K-Easy Current Balance: ${savingsAccount.cash_balance.balance}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_account($partner_id:ID!){savings_account(partner_id:$partner_id){...on SavingsAccount{id status virtual_account_number cash_balance {balance contract_id}}...on SavingsAccountNotFoundError{error_message}}}\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_withdraw (K-easy)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Response is not valid JSON\");",
											"    });",
											"}",
											"",
											"pm.test(\"Response has 'data.savings_withdraw_contract'\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_withdraw_contract\");",
											"});",
											"",
											"const contract = jsonData.data.savings_withdraw_contract;",
											"",
											"pm.test(\"Status is 'success'\", () => {",
											"    pm.expect(contract.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Error message is null\", () => {",
											"    pm.expect(contract.error_message).to.be.null;",
											"});",
											"",
											"pm.test(\"__typename is 'SavingsWithdrawContractResult'\", () => {",
											"    pm.expect(contract.__typename).to.eql(\"SavingsWithdrawContractResult\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{keasy_contract_id}}\",\n            \"amount\": {{keasy_current_balance}}\n        }\n    },\n    \"query\": \"mutation savings_withdraw($input: SavingsWithdrawContractInput!) {\\n  savings_withdraw_contract(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_confirm_withdrawal_contract (K-easy)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// === Root and field presence ===",
											"pm.test(\"Contains data.savings_confirm_withdrawal_contract\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_confirm_withdrawal_contract\");",
											"});",
											"",
											"const withdrawal = jsonData.data.savings_confirm_withdrawal_contract;",
											"",
											"pm.test(\"Withdrawal result structure is valid\", () => {",
											"    pm.expect(withdrawal).to.include.keys(\"status\", \"error_message\", \"transaction\");",
											"    pm.expect(withdrawal.status).to.be.oneOf([\"success\", \"failure\"]);",
											"    pm.expect(withdrawal.__typename).to.eql(\"SavingsConfirmWithdrawalContractResult\");",
											"});",
											"",
											"// === Transaction object checks ===",
											"pm.test(\"Transaction object is valid\", () => {",
											"    const tx = withdrawal.transaction;",
											"",
											"    pm.expect(tx).to.include.keys(\"id\", \"amount\", \"contract\");",
											"    pm.expect(tx.id).to.be.a(\"string\");",
											"    pm.expect(tx.amount).to.be.a(\"number\");",
											"    pm.expect(tx.__typename).to.eql(\"SavingsTransaction\");",
											"});",
											"",
											"// Store transactionId, transactionAmount in collection variable for later use",
											"pm.collectionVariables.set(\"keasy_transactionId\", withdrawal.transaction.id); ",
											"pm.collectionVariables.set(\"keasy_transactionAmount\", withdrawal.transaction.amount); ",
											"",
											"",
											"// === Contract + Product check ===",
											"pm.test(\"Contract and Product fields are correct\", () => {",
											"    const contract = withdrawal.transaction.contract;",
											"",
											"    pm.expect(contract).to.have.property(\"product\");",
											"    pm.expect(contract.__typename).to.eql(\"SavingsContract\");",
											"",
											"    const product = contract.product;",
											"    pm.expect(product).to.have.property(\"name\");",
											"    pm.expect(product.name).to.be.a(\"string\");",
											"    pm.expect(product.__typename).to.eql(\"SavingsProduct\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_confirm_withdrawal_contract\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{keasy_contract_id}}\",\n            \"otp\": \"111111\"\n        }\n    },\n    \"query\": \"mutation savings_confirm_withdrawal_contract($input: SavingsConfirmWithdrawContractInput!) {\\n  savings_confirm_withdrawal_contract(input: $input) {\\n    status\\n    error_message\\n    transaction {\\n      id\\n      amount\\n      contract {\\n        ... on SavingsContract {\\n          product {\\n            name\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_update_transaction_refs (K-easy)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"pm.test(\"Has valid structure\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.have.property(\"savings_update_transaction_refs\");",
											"});",
											"",
											"const updateResult = jsonData.data.savings_update_transaction_refs;",
											"",
											"// 3. Required Fields Validation",
											"pm.test(\"Contains all required fields\", () => {",
											"    const requiredFields = [\"status\", \"error_message\", \"__typename\"];",
											"    requiredFields.forEach(field => pm.expect(updateResult).to.have.property(field));",
											"});",
											"",
											"// 4. Field Type Validation",
											"pm.test(\"All fields have correct types\", () => {",
											"    pm.expect(updateResult.status).to.be.a(\"string\");",
											"    pm.expect(updateResult.error_message).to.be.null;",
											"    pm.expect(updateResult.__typename).to.be.a(\"string\");",
											"});",
											"",
											"// 5. Status Validation",
											"pm.test(\"Status is 'success'\", () => {",
											"    pm.expect(updateResult.status).to.equal(\"success\");",
											"});",
											"",
											"",
											"// 7. Type Name Validation",
											"pm.test(\"Correct __typename\", () => {",
											"    pm.expect(updateResult.__typename).to.equal(\"SavingsUpdateTransactionRefsResult\");",
											"});",
											"",
											"// 8. No Extra Fields",
											"pm.test(\"No unexpected fields\", () => {",
											"    const expectedFields = [\"status\", \"error_message\", \"__typename\"];",
											"    pm.expect(Object.keys(updateResult)).to.eql(expectedFields);",
											"});",
											"",
											"// 9. Store Status for Future Tests",
											"pm.environment.set(\"transaction_ref_update_status\", updateResult.status);",
											"",
											"// 10. Log Summary",
											"console.log(\"Transaction References Update Validation Results:\");",
											"console.log(`Status: ${updateResult.status}`);",
											"console.log(`Error Message: ${updateResult.error_message}`);",
											"console.log(`Type: ${updateResult.__typename}`);",
											"",
											"// 11. Additional Validation for Error Cases",
											"if (updateResult.status !== \"success\") {",
											"    pm.test(\"Error message should exist when status is not success\", () => {",
											"        pm.expect(updateResult.error_message).to.not.be.null;",
											"        pm.expect(updateResult.error_message).to.be.a(\"string\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"transaction_id\": \"{{keasy_transactionId}}\",\n            \"ref_transaction_id\": \"Postman_test_ref_transaction_id\",\n            \"ref_product_code\": \"TS\"\n        }\n    },\n    \"query\": \"mutation ($input: SavingsUpdateTransactionRefsInput!) {\\n  savings_update_transaction_refs(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "K90",
					"item": [
						{
							"name": "savings_products (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"pm.test(\"Response time < 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"pm.test(\"Has valid structure\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.have.property(\"savings_product\");",
											"});",
											"",
											"const product = jsonData.data.savings_product;",
											"",
											"// 3. Core Product Validation",
											"pm.test(\"Product has required fields\", () => {",
											"    const requiredFields = [",
											"        \"id\", \"created_at\", \"updated_at\", \"partner_id\", \"name\",",
											"        \"code\", \"status\", \"min_deposit\", \"max_deposit\", \"logo_url\",",
											"        \"description\", \"rates\"",
											"    ];",
											"    requiredFields.forEach(field => pm.expect(product).to.have.property(field));",
											"});",
											"",
											"// 4. ID and Partner Validation",
											"pm.test(\"IDs have correct format\", () => {",
											"    pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"",
											"// 6. Product Details Validation",
											"pm.test(\"Product details match K-90\", () => {",
											"    pm.expect(product.name).to.equal(\"K-90\");",
											"    pm.expect(product.code).to.equal(\"KF_90\");",
											"    pm.expect(product.status).to.equal(\"ACTIVE\");",
											"    pm.expect(product.logo_url).to.equal(\"/static/infina-apps-v2/home-saving-screen/k-90-without-profit.png\");",
											"    pm.expect(product.description).to.include(\"Kỳ hạn 90 ngày\");",
											"});",
											"",
											"// 7. Deposit Amount Validation",
											"pm.test(\"Deposit limits are valid\", () => {",
											"    pm.expect(product.min_deposit).to.equal(50000);",
											"    pm.expect(product.max_deposit).to.equal(30000000000);",
											"    pm.expect(product.max_deposit).to.be.above(product.min_deposit);",
											"});",
											"",
											"// 8. Rates Validation",
											"pm.test(\"Rates array has correct structure\", () => {",
											"    pm.expect(product.rates).to.be.an(\"array\").with.lengthOf(2);",
											"});",
											"",
											"// 9. Penalty Rate Validation",
											"const penaltyRate = product.rates.find(rate => rate.type === \"PENALTY\");",
											"pm.test(\"Penalty rate is valid\", () => {",
											"    pm.expect(penaltyRate).to.be.an(\"object\");",
											"    pm.expect(penaltyRate.type).to.equal(\"PENALTY\");",
											"    pm.expect(penaltyRate.rate).to.equal(0.02);",
											"    pm.expect(penaltyRate.duration).to.be.null;",
											"    pm.expect(penaltyRate.duration_unit).to.be.null;",
											"});",
											"",
											"// 10. Interest Rate Validation",
											"const interestRate = product.rates.find(rate => rate.type === \"INTEREST\");",
											"pm.test(\"Interest rate is valid\", () => {",
											"    pm.expect(interestRate).to.be.an(\"object\");",
											"    pm.expect(interestRate.type).to.equal(\"INTEREST\");",
											"    pm.expect(interestRate.rate).to.equal(0.065);",
											"    pm.expect(interestRate.duration).to.equal(90);",
											"    pm.expect(interestRate.duration_unit).to.equal(\"DAY\");",
											"});",
											"",
											"// 11. Business Logic Validation",
											"pm.test(\"Interest rate > Penalty rate\", () => {",
											"    pm.expect(interestRate.rate).to.be.above(penaltyRate.rate);",
											"});",
											"",
											"// 12. No Extra Fields",
											"pm.test(\"No unexpected fields\", () => {",
											"    const expectedFields = [",
											"        \"id\", \"created_at\", \"updated_at\", \"partner_id\", \"name\",",
											"        \"code\", \"status\", \"min_deposit\", \"max_deposit\", \"logo_url\",",
											"        \"description\", \"rates\"",
											"    ];",
											"    pm.expect(Object.keys(product)).to.eql(expectedFields);",
											"});",
											"",
											"// 13. Store Product Info",
											"pm.collectionVariables.set(\"k90_product_id\", product.id);",
											"pm.collectionVariables.set(\"k90_interest_rate\", interestRate.rate);",
											"pm.collectionVariables.set(\"k90_penalty_rate\", penaltyRate.rate);",
											"",
											"// 14. Log Summary",
											"console.log(`Validated K-90 Product: ${product.name} (${product.code})`);",
											"console.log(`Interest Rate: ${interestRate.rate * 100}% for ${interestRate.duration} ${interestRate.duration_unit}s`);",
											"console.log(`Penalty Rate: ${penaltyRate.rate * 100}%`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_product($productId:String!){savings_product(productId:$productId){...on SavingsProduct{id created_at updated_at partner_id name code status min_deposit max_deposit logo_url description rates{duration duration_unit rate type}}}}\",\n    \"variables\": {\n        \"productId\": \"{{k90_savings_products}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_promotion (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Response is valid JSON\", function () {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// Check if response contains errors",
											"if (jsonData.errors) {",
											"    pm.test(\"Error response structure is valid\", function () {",
											"        pm.expect(jsonData).to.have.property(\"errors\");",
											"        pm.expect(jsonData.errors).to.be.an(\"array\").that.is.not.empty;",
											"",
											"        const error = jsonData.errors[0];",
											"        pm.expect(error).to.have.property(\"message\");",
											"        pm.expect(error).to.have.property(\"path\");",
											"        pm.expect(error).to.have.property(\"extensions\");",
											"        pm.expect(error.extensions).to.have.property(\"code\");",
											"        pm.expect(error.extensions).to.have.property(\"serviceName\");",
											"",
											"        pm.expect(jsonData.data).to.be.null;",
											"    });",
											"} else {",
											"    // No error, check data structure",
											"    pm.test(\"Success response structure is valid\", function () {",
											"        pm.expect(jsonData).to.have.property(\"data\");",
											"        pm.expect(jsonData.data).to.have.property(\"savings_promotion\");",
											"",
											"        const promo = jsonData.data.savings_promotion;",
											"        pm.expect(promo).to.have.property(\"is_valid\").that.is.a(\"boolean\");",
											"        pm.expect(promo).to.have.property(\"rate\").that.is.a(\"number\");",
											"        pm.expect(promo).to.have.property(\"remaining_amount\").that.is.a(\"number\");",
											"        pm.expect(promo).to.have.property(\"__typename\").that.equals(\"SavingsPromotion\");",
											"    });",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_promotion\",\n    \"variables\": {\n        \"product_id\": \"{{k90_savings_products}}\",\n        \"amount\": 1,\n        \"promotion_code\": \"INFINA2024\"\n    },\n    \"query\": \"query savings_promotion($product_id: ID!, $amount: Float!, $promotion_code: String!) {\\n  savings_promotion(\\n    product_id: $product_id\\n    amount: $amount\\n    promotion_code: $promotion_code\\n  ) {\\n    is_valid\\n    rate\\n    remaining_amount\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_product_available_balance (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// === Root and field presence ===",
											"pm.test(\"Contains data.savings_product_available_balance\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_product_available_balance\");",
											"});",
											"",
											"// === Value check ===",
											"pm.test(\"Available balance is a number and non-negative\", () => {",
											"    const balance = jsonData.data.savings_product_available_balance;",
											"    pm.expect(balance).to.be.a(\"number\");",
											"    pm.expect(balance).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_product_available_balance\",\n    \"variables\": {\n        \"product_id\": \"{{k90_savings_products}}\"\n    },\n    \"query\": \"query savings_product_available_balance($product_id: String!) {\\n  savings_product_available_balance(product_id: $product_id)\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_contracts (K90 contract detail)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_contract');",
											"});",
											"",
											"// 5. Validate savings contract object",
											"const contract = jsonData.data.savings_contract;",
											"pm.test(\"Contract has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id', 'created_at', 'updated_at', 'amount', 'available_amount',",
											"        'estimated_profit', 'matured_at', 'maturity_date', 'approved_at',",
											"        'terminated_at', 'status', 'code', 'interest_rate', 'promotion_rate',",
											"        'penalty_rate', 'max_interest_rate', 'product', '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(contract).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 6. Validate ID format",
											"pm.test(\"Contract ID has correct format\", function() {",
											"    pm.expect(contract.id).to.be.a('string');",
											"    pm.expect(contract.id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 7. Validate timestamps",
											"pm.test(\"Timestamps are valid and chronological\", function() {",
											"    const fields = ['created_at', 'updated_at', 'matured_at', 'maturity_date', 'approved_at'];",
											"    const dates = {};",
											"    ",
											"    // Validate all timestamp fields",
											"    fields.forEach(field => {",
											"        pm.expect(contract[field]).to.be.a('string');",
											"        dates[field] = new Date(contract[field]);",
											"        pm.expect(dates[field].toString()).to.not.equal('Invalid Date');",
											"    });",
											"    ",
											"    // Validate chronology",
											"    pm.expect(dates.updated_at.getTime()).to.be.at.least(dates.created_at.getTime());",
											"    pm.expect(dates.approved_at.getTime()).to.be.at.least(dates.created_at.getTime());",
											"    ",
											"    // For matured contracts",
											"    if (contract.status === 'MATURED') {",
											"        pm.expect(dates.matured_at.getTime()).to.be.at.least(dates.created_at.getTime());",
											"    }",
											"});",
											"",
											"// 8. Validate amount fields",
											"pm.test(\"Amount fields are valid\", function() {",
											"    pm.expect(contract.amount).to.be.a('number');",
											"    pm.expect(contract.available_amount).to.be.a('number');",
											"    pm.expect(contract.available_amount).to.be.at.least(0);",
											"    pm.expect(contract.available_amount).to.be.at.most(contract.amount);",
											"    pm.expect(contract.estimated_profit).to.be.a('number');",
											"    pm.expect(contract.estimated_profit).to.be.at.least(0);",
											"});",
											"",
											"// 9. Validate status and related fields",
											"pm.test(\"Status and related fields are valid\", function() {",
											"    pm.expect(contract.status).to.be.a('string');",
											"    pm.expect(contract.status).to.equal('APPROVED');",
											"    pm.expect(contract.terminated_at).to.be.null;",
											"    ",
											"    pm.expect(contract.code).to.be.a('string');",
											"    pm.expect(contract.code).to.match(/^[A-Z0-9]{6}$/);",
											"});",
											"",
											"// 10. Validate rate fields",
											"pm.test(\"Rate fields are valid\", function() {",
											"    pm.expect(contract.interest_rate).to.be.a('number');",
											"    pm.expect(contract.promotion_rate).to.be.a('number');",
											"    pm.expect(contract.penalty_rate).to.be.a('number');",
											"    pm.expect(contract.max_interest_rate).to.be.a('number');",
											"});",
											"",
											"// 11. Validate product object",
											"pm.test(\"Product object is valid\", function() {",
											"    const product = contract.product;",
											"    pm.expect(product).to.be.an('object');",
											"    ",
											"    pm.expect(product.id).to.be.a('string');",
											"    pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(product.partner_id).to.be.a('string');",
											"    pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(product.name).to.be.a('string');",
											"    pm.expect(product.name).to.equal('K-90');",
											"    ",
											"    pm.expect(product.code).to.be.a('string');",
											"    pm.expect(product.code).to.equal('KF_90');",
											"    ",
											"    pm.expect(product.status).to.be.a('string');",
											"    pm.expect(product.status).to.equal('ACTIVE');",
											"    ",
											"    pm.expect(product.logo_url).to.be.a('string');",
											"    pm.expect(product.logo_url).to.match(/^\\/static\\/.+/);",
											"    ",
											"    pm.expect(product.rates).to.be.an('array');",
											"    pm.expect(product.rates.length).to.be.at.least(1);",
											"});",
											"",
											"// 12. Validate product rates",
											"pm.test(\"Product rates are valid\", function() {",
											"    contract.product.rates.forEach(rate => {",
											"        pm.expect(rate).to.have.property('duration');",
											"        pm.expect(rate).to.have.property('duration_unit');",
											"        pm.expect(rate).to.have.property('rate');",
											"        pm.expect(rate).to.have.property('type');",
											"        pm.expect(rate).to.have.property('__typename');",
											"        ",
											"        pm.expect(rate.type).to.be.oneOf(['INTEREST', 'PENALTY']);",
											"        pm.expect(rate.rate).to.be.a('number');",
											"        pm.expect(rate.rate).to.be.at.least(0);",
											"        ",
											"        if (rate.type === 'INTEREST') {",
											"            pm.expect(rate.duration).to.be.a('number');",
											"            pm.expect(rate.duration_unit).to.be.oneOf(['DAY', 'WEEK', 'MONTH', 'YEAR']);",
											"        }",
											"    });",
											"});",
											"",
											"// 13. Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(contract.__typename).to.equal('SavingsContract');",
											"    pm.expect(contract.product.__typename).to.equal('SavingsProduct');",
											"    contract.product.rates.forEach(rate => {",
											"        pm.expect(rate.__typename).to.equal('SavingsProductRate');",
											"    });",
											"});",
											"",
											"// 14. Store contract details for future tests",
											"pm.collectionVariables.set(\"contract_id\", contract.id);",
											"pm.collectionVariables.set(\"contract_code\", contract.code);",
											"pm.collectionVariables.set(\"contract_status\", contract.status);",
											"pm.collectionVariables.set(\"contract_amount\", contract.amount);",
											"pm.collectionVariables.set(\"contract_available_amount\", contract.available_amount);",
											"pm.collectionVariables.set(\"product_id\", contract.product.id);",
											"",
											"",
											"// 15. Log important details",
											"console.log(`Validated contract ${contract.code} with status ${contract.status}`);",
											"console.log(`Amount: ${contract.amount} | Available: ${contract.available_amount}`);",
											"console.log(`Product: ${contract.product.name} (${contract.product.code})`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_contract\",\n    \"variables\": {\n        \"contractId\": \"{{k90_contract_id}}\"\n    },\n    \"query\": \"query savings_contract($contractId: ID!) {\\n  savings_contract(contractId: $contractId) {\\n    ... on SavingsContract {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      available_amount\\n      estimated_profit\\n      matured_at\\n      maturity_date\\n      approved_at\\n      terminated_at\\n      status\\n      code\\n      interest_rate\\n      promotion_rate\\n      penalty_rate\\n      max_interest_rate\\n      product {\\n        id\\n        partner_id\\n        name\\n        code\\n        status\\n        logo_url\\n        rates {\\n          duration\\n          duration_unit\\n          rate\\n          type\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_withdraw (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Response is not valid JSON\");",
											"    });",
											"}",
											"",
											"pm.test(\"Response has 'data.savings_withdraw_contract'\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_withdraw_contract\");",
											"});",
											"",
											"const contract = jsonData.data.savings_withdraw_contract;",
											"",
											"pm.test(\"Status is 'success'\", () => {",
											"    pm.expect(contract.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Error message is null\", () => {",
											"    pm.expect(contract.error_message).to.be.null;",
											"});",
											"",
											"pm.test(\"__typename is 'SavingsWithdrawContractResult'\", () => {",
											"    pm.expect(contract.__typename).to.eql(\"SavingsWithdrawContractResult\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{k90_contract_id}}\",\n            \"amount\": 1000000\n        }\n    },\n    \"query\": \"mutation savings_withdraw($input: SavingsWithdrawContractInput!) {\\n  savings_withdraw_contract(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_confirm_withdrawal_contract (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// === Root and field presence ===",
											"pm.test(\"Contains data.savings_confirm_withdrawal_contract\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_confirm_withdrawal_contract\");",
											"});",
											"",
											"const withdrawal = jsonData.data.savings_confirm_withdrawal_contract;",
											"",
											"pm.test(\"Withdrawal result structure is valid\", () => {",
											"    pm.expect(withdrawal).to.include.keys(\"status\", \"error_message\", \"transaction\");",
											"    pm.expect(withdrawal.status).to.be.oneOf([\"success\", \"failure\"]);",
											"    pm.expect(withdrawal.__typename).to.eql(\"SavingsConfirmWithdrawalContractResult\");",
											"});",
											"",
											"// === Transaction object checks ===",
											"pm.test(\"Transaction object is valid\", () => {",
											"    const tx = withdrawal.transaction;",
											"",
											"    pm.expect(tx).to.include.keys(\"id\", \"amount\", \"contract\");",
											"    pm.expect(tx.id).to.be.a(\"string\");",
											"    pm.expect(tx.amount).to.be.a(\"number\");",
											"    pm.expect(tx.__typename).to.eql(\"SavingsTransaction\");",
											"});",
											"",
											"// === Contract + Product check ===",
											"pm.test(\"Contract and Product fields are correct\", () => {",
											"    const contract = withdrawal.transaction.contract;",
											"",
											"    pm.expect(contract).to.have.property(\"product\");",
											"    pm.expect(contract.__typename).to.eql(\"SavingsContract\");",
											"",
											"    const product = contract.product;",
											"    pm.expect(product).to.have.property(\"name\");",
											"    pm.expect(product.name).to.be.a(\"string\");",
											"    pm.expect(product.__typename).to.eql(\"SavingsProduct\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_confirm_withdrawal_contract\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{k90_contract_id}}\",\n            \"otp\": \"111111\"\n        }\n    },\n    \"query\": \"mutation savings_confirm_withdrawal_contract($input: SavingsConfirmWithdrawContractInput!) {\\n  savings_confirm_withdrawal_contract(input: $input) {\\n    status\\n    error_message\\n    transaction {\\n      id\\n      amount\\n      contract {\\n        ... on SavingsContract {\\n          product {\\n            name\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_termination_info (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"pm.test(\"Has valid structure\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.have.property(\"savings_termination_info\");",
											"});",
											"",
											"const terminationInfo = jsonData.data.savings_termination_info;",
											"",
											"// 3. Required Fields Validation",
											"pm.test(\"Contains all required fields\", () => {",
											"    const requiredFields = [",
											"        \"amount\", \"profit\", \"penalty_rate\", \"net_income\",",
											"        \"tax_amount\", \"tax_rate\", \"interest_rate\", \"__typename\"",
											"    ];",
											"    requiredFields.forEach(field => pm.expect(terminationInfo).to.have.property(field));",
											"});",
											"",
											"// 4. Field Type Validation",
											"pm.test(\"All fields have correct types\", () => {",
											"    pm.expect(terminationInfo.amount).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.profit).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.penalty_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.net_income).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.tax_amount).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.tax_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.interest_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.__typename).to.be.a(\"string\");",
											"});",
											"",
											"",
											"pm.test(\"Penalty rate is zero\", () => {",
											"    pm.expect(terminationInfo.penalty_rate).to.equal(0);",
											"    pm.expect(terminationInfo.penalty_rate).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"// 9. Type Name Validation",
											"pm.test(\"Correct __typename\", () => {",
											"    pm.expect(terminationInfo.__typename).to.equal(\"SavingsTerminationInfo\");",
											"});",
											"",
											"// 10. No Extra Fields",
											"pm.test(\"No unexpected fields\", () => {",
											"    const expectedFields = [",
											"        \"amount\", \"profit\", \"penalty_rate\", \"net_income\",",
											"        \"tax_amount\", \"tax_rate\", \"interest_rate\", \"__typename\"",
											"    ];",
											"    pm.expect(Object.keys(terminationInfo)).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Store Values for Future Tests",
											"pm.collectionVariables.set(\"termination_amount\", terminationInfo.amount);",
											"pm.collectionVariables.set(\"termination_profit\", terminationInfo.profit);",
											"pm.collectionVariables.set(\"termination_net_income\", terminationInfo.net_income);",
											"",
											"// 12. Log Summary",
											"console.log(\"Savings Termination Validation Results:\");",
											"console.log(`Principal Amount: ${terminationInfo.amount}`);",
											"console.log(`Profit: ${terminationInfo.profit}`);",
											"console.log(`Tax (${terminationInfo.tax_rate * 100}%): ${terminationInfo.tax_amount}`);",
											"console.log(`Net Income: ${terminationInfo.net_income}`);",
											"console.log(`Interest Rate: ${terminationInfo.interest_rate * 100}%`);",
											"console.log(`Penalty Rate: ${terminationInfo.penalty_rate * 100}%`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_termination_info\",\n    \"variables\": {\n        \"contract_id\": \"{{k90_contract_id}}\"\n    },\n    \"query\": \"query savings_termination_info($contract_id: ID!) {\\n  savings_termination_info(contract_id: $contract_id) {\\n    amount\\n    profit\\n    penalty_rate\\n    net_income\\n    tax_amount\\n    tax_rate\\n    interest_rate\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (K90 History list)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"const savingsTransactions = response.data.savings_transactions;",
											"",
											"// Validate pagination structure",
											"pm.test(\"Pagination structure is valid for first:100\", function() {",
											"    pm.expect(savingsTransactions.edges).to.be.an('array');",
											"    pm.expect(savingsTransactions.nodes).to.be.an('array');",
											"    ",
											"    ",
											"    // Store all cursors in a collection variable",
											"    const cursors = savingsTransactions.edges.map(edge => edge.cursor);",
											"    pm.collectionVariables.set(\"all_cursors\", JSON.stringify(cursors));",
											"    ",
											"    // Store first and last cursors separately for pagination use",
											"    if (savingsTransactions.edges.length > 0) {",
											"        pm.collectionVariables.set(\"first_cursor\", savingsTransactions.edges[0].cursor);",
											"        pm.collectionVariables.set(\"last_cursor\", savingsTransactions.edges[savingsTransactions.edges.length - 1].cursor);",
											"    }",
											"});",
											"",
											"// Enhanced cursor validation and storage",
											"pm.test(\"Cursor values are valid and stored correctly\", function() {",
											"    const edges = savingsTransactions.edges;",
											"    ",
											"    edges.forEach((edge, index) => {",
											"        // Verify cursor matches node ID",
											"        pm.expect(edge.cursor).to.equal(edge.node.id);",
											"        ",
											"        // Store each cursor with index prefix for potential future use",
											"        pm.collectionVariables.set(`cursor_${index}`, edge.cursor);",
											"    });",
											"    ",
											"    // Verify page_info cursors match our stored first/last cursors",
											"    if (edges.length > 0) {",
											"        pm.expect(savingsTransactions.page_info.start_cursor).to.equal(pm.collectionVariables.get(\"first_cursor\"));",
											"        pm.expect(savingsTransactions.page_info.end_cursor).to.equal(pm.collectionVariables.get(\"last_cursor\"));",
											"    }",
											"});",
											"",
											"// Validate page_info for pagination",
											"pm.test(\"Page info reflects first:100 pagination\", function() {",
											"    const pageInfo = savingsTransactions.page_info;",
											"    ",
											"    // If we got exactly 100 results, there might be a next page",
											"    if (savingsTransactions.edges.length === 100) {",
											"        pm.expect(pageInfo.has_next_page).to.be.true;",
											"    }",
											"    ",
											"    // First page shouldn't have previous page",
											"    pm.expect(pageInfo.has_previous_page).to.be.false;",
											"});",
											"",
											"// Transaction node validation (reusable function)",
											"function validateTransactionNode(node) {",
											"    pm.expect(node).to.have.all.keys(",
											"        'id', 'created_at', 'updated_at', 'amount', 'initial_amount',",
											"        'status', 'type', 'transfer_message', 'deposited_at', 'contract', '__typename'",
											"    );",
											"    // ... (rest of your node validation logic)",
											"}",
											"",
											"// After all tests, log the stored cursors for debugging",
											"console.log(\"First cursor:\", pm.collectionVariables.get(\"first_cursor\"));",
											"console.log(\"Last cursor:\", pm.collectionVariables.get(\"last_cursor\"));",
											"console.log(\"All cursors:\", JSON.parse(pm.collectionVariables.get(\"all_cursors\")));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transactions\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\"\n    },\n    \"query\": \"query savings_transactions($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsTransactionSortKeys, $query: String) {\\n  savings_transactions(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        amount\\n        initial_amount\\n        status\\n        type\\n        transfer_message\\n        deposited_at\\n        contract {\\n          ... on SavingsContract {\\n            id\\n            available_amount\\n            product {\\n              name\\n              __typename\\n            }\\n            maturity_date\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      initial_amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          available_amount\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (K90 History detail)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('savings_transaction');",
											"});",
											"",
											"const transaction = response.data.savings_transaction;",
											"",
											"// Validate transaction fields",
											"pm.test(\"Transaction has all required fields\", function() {",
											"    pm.expect(transaction).to.have.all.keys(",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'initial_amount',",
											"        'amount',",
											"        'status',",
											"        'type',",
											"        'transfer_message',",
											"        'deposited_at',",
											"        'receive_method',",
											"        'tax',",
											"        'profit',",
											"        'contract',",
											"        '__typename'",
											"    );",
											"    ",
											"    pm.expect(transaction.__typename).to.equal('SavingsTransaction');",
											"});",
											"",
											"// // Validate field types and values",
											"// pm.test(\"Transaction field validation\", function() {",
											"//     // ID and timestamps",
											"//     pm.expect(transaction.id).to.equal('cmcsx0vh3039m23t36xu70vyh');",
											"//     pm.expect(new Date(transaction.created_at).toISOString()).to.equal(transaction.created_at);",
											"//     pm.expect(new Date(transaction.updated_at).toISOString()).to.equal(transaction.updated_at);",
											"    ",
											"//     // Amounts",
											"//     pm.expect(transaction.initial_amount).to.equal(70000000);",
											"//     pm.expect(transaction.amount).to.equal(70016397);",
											"//     pm.expect(transaction.tax).to.equal(863);",
											"//     pm.expect(transaction.profit).to.equal(17260);",
											"    ",
											"//     // Status and type",
											"//     pm.expect(transaction.status).to.equal('PENDING');",
											"//     pm.expect(transaction.type).to.equal('WITHDRAWAL');",
											"//     pm.expect(transaction.receive_method).to.equal('BANK_TRANSFER');",
											"    ",
											"//     // Nullable fields",
											"//     pm.expect(transaction.transfer_message).to.be.null;",
											"//     pm.expect(transaction.deposited_at).to.be.null;",
											"// });",
											"",
											"// Validate contract",
											"pm.test(\"K-90 Contract validation\", function() {",
											"    const contract = transaction.contract;",
											"    ",
											"    pm.expect(contract).to.have.all.keys(",
											"        'id',",
											"        'code',",
											"        'product',",
											"        'maturity_date',",
											"        '__typename'",
											"    );",
											"    ",
											"    pm.expect(contract.__typename).to.equal('SavingsContract');",
											"    // pm.expect(contract.id).to.equal('cmc08icmk000108l80cce8lgj');",
											"    // pm.expect(contract.code).to.equal('ZTQMHQ');",
											"    pm.expect(new Date(contract.maturity_date).toISOString()).to.equal(contract.maturity_date);",
											"    ",
											"    // Validate product",
											"    pm.expect(contract.product).to.have.all.keys('name', '__typename');",
											"    pm.expect(contract.product.__typename).to.equal('SavingsProduct');",
											"    pm.expect(contract.product.name).to.equal('K-90');",
											"});",
											"",
											"// // Validate calculations (optional)",
											"// pm.test(\"Amount calculations are valid\", function() {",
											"//     const expectedAmount = transaction.initial_amount + transaction.profit - transaction.tax;",
											"//     pm.expect(transaction.amount).to.equal(expectedAmount);",
											"// });",
											"",
											"// Store relevant data for future tests (optional)",
											"pm.test(\"Store transaction data\", function() {",
											"    pm.collectionVariables.set(\"last_transaction_id\", transaction.id);",
											"    pm.collectionVariables.set(\"last_transaction_amount\", transaction.amount);",
											"    pm.collectionVariables.set(\"last_contract_code\", transaction.contract.code);",
											"    ",
											"    console.log(\"Stored transaction ID:\", transaction.id);",
											"    console.log(\"Stored amount:\", transaction.amount);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transaction\",\n    \"variables\": {\n        \"transactionId\": \"{{first_cursor}}\"\n    },\n    \"query\": \"query savings_transaction($transactionId: ID!) {\\n  savings_transaction(transactionId: $transactionId) {\\n    ... on SavingsTransaction {\\n      id\\n      created_at\\n      updated_at\\n      initial_amount\\n      amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      receive_method\\n      tax\\n      profit\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          code\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "K7",
					"item": [
						{
							"name": "savings_products (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_product');",
											"});",
											"",
											"// 5. Validate savings product object",
											"const product = jsonData.data.savings_product;",
											"pm.test(\"Product has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id', 'created_at', 'updated_at', 'partner_id', 'name',",
											"        'code', 'status', 'min_deposit', 'max_deposit', 'logo_url',",
											"        'description', 'rates'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(product).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 6. Validate ID formats",
											"pm.test(\"ID fields have correct format\", function() {",
											"    pm.expect(product.id).to.be.a('string');",
											"    pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(product.partner_id).to.be.a('string');",
											"    pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 7. Validate timestamps",
											"pm.test(\"Timestamps are valid and chronological\", function() {",
											"    pm.expect(product.created_at).to.be.a('string');",
											"    const createdAt = new Date(product.created_at);",
											"    pm.expect(createdAt.toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(product.updated_at).to.be.a('string');",
											"    const updatedAt = new Date(product.updated_at);",
											"    pm.expect(updatedAt.toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"});",
											"",
											"// 8. Validate product details",
											"pm.test(\"Product details are valid\", function() {",
											"    pm.expect(product.name).to.be.a('string');",
											"    pm.expect(product.name).to.equal('K-Seven');",
											"    ",
											"    pm.expect(product.code).to.be.a('string');",
											"    pm.expect(product.code).to.equal('KF_SEVEN');",
											"    ",
											"    pm.expect(product.status).to.be.a('string');",
											"    pm.expect(product.status).to.equal('ACTIVE');",
											"    ",
											"    pm.expect(product.logo_url).to.be.a('string');",
											"    pm.expect(product.logo_url).to.equal('/static/infina-apps-v2/home-saving-screen/k-7-without-profit.png');",
											"    ",
											"    pm.expect(product.description).to.be.a('string');",
											"    pm.expect(product.description).to.include('Nộp rút bất kỳ lúc nào');",
											"});",
											"",
											"// 9. Validate deposit amounts",
											"pm.test(\"Deposit amounts are valid\", function() {",
											"    pm.expect(product.min_deposit).to.be.a('number');",
											"    pm.expect(product.min_deposit).to.equal(50000);",
											"    ",
											"    pm.expect(product.max_deposit).to.be.a('number');",
											"    pm.expect(product.max_deposit).to.equal(30000000000);",
											"    pm.expect(product.max_deposit).to.be.greaterThan(product.min_deposit);",
											"});",
											"",
											"// 10. Validate rates array",
											"pm.test(\"Rates array is valid\", function() {",
											"    pm.expect(product.rates).to.be.an('array');",
											"    pm.expect(product.rates.length).to.equal(8);",
											"});",
											"",
											"// 11. Validate each rate",
											"product.rates.forEach((rate, index) => {",
											"    const ratePrefix = `Rate ${index + 1}`;",
											"    ",
											"    // 11.1 Validate required fields",
											"    pm.test(`${ratePrefix} has required fields`, function() {",
											"        pm.expect(rate).to.have.property('duration');",
											"        pm.expect(rate).to.have.property('duration_unit');",
											"        pm.expect(rate).to.have.property('rate');",
											"        pm.expect(rate).to.have.property('type');",
											"    });",
											"    ",
											"    // 11.2 Validate rate type",
											"    pm.test(`${ratePrefix} type is valid`, function() {",
											"        pm.expect(rate.type).to.be.oneOf(['INTEREST', 'PENALTY']);",
											"    });",
											"    ",
											"    // 11.3 Validate based on rate type",
											"    if (rate.type === 'PENALTY') {",
											"        pm.test(`${ratePrefix} penalty rate can be null`, function() {",
											"            pm.expect(rate.rate).to.satisfy(val => val === null || typeof val === 'number');",
											"            pm.expect(rate.duration).to.be.null;",
											"            pm.expect(rate.duration_unit).to.be.null;",
											"        });",
											"    } else {",
											"        pm.test(`${ratePrefix} interest rate is valid`, function() {",
											"            pm.expect(rate.rate).to.be.a('number');",
											"            pm.expect(rate.rate).to.be.at.least(0);",
											"            pm.expect(rate.duration).to.be.a('number');",
											"            pm.expect(rate.duration).to.be.at.least(1);",
											"            pm.expect(rate.duration_unit).to.be.oneOf(['WEEK', 'DAY', 'MONTH', 'YEAR']);",
											"        });",
											"    }",
											"});",
											"",
											"// 12. Validate specific interest rates",
											"pm.test(\"Interest rates follow expected progression\", function() {",
											"    // Get all interest rates (skip the first penalty rate)",
											"    const interestRates = product.rates.slice(1);",
											"    ",
											"    // Verify each rate is higher than the previous",
											"    for (let i = 1; i < interestRates.length; i++) {",
											"        pm.expect(interestRates[i].rate).to.be.greaterThan(interestRates[i-1].rate);",
											"    }",
											"    ",
											"    // Verify first and last rates",
											"    pm.expect(interestRates[0].rate).to.equal(0.035);",
											"    pm.expect(interestRates[interestRates.length-1].rate).to.equal(0.065);",
											"});",
											"",
											"// 13. Validate no unexpected fields",
											"pm.test(\"No extra fields in product object\", function() {",
											"    const expectedFields = [",
											"        'id', 'created_at', 'updated_at', 'partner_id', 'name',",
											"        'code', 'status', 'min_deposit', 'max_deposit', 'logo_url',",
											"        'description', 'rates'",
											"    ];",
											"    const actualFields = Object.keys(product);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 14. Store product details for future tests",
											"pm.collectionVariables.set(\"savings_product_id\", product.id);",
											"pm.collectionVariables.set(\"product_code\", product.code);",
											"pm.collectionVariables.set(\"product_min_deposit\", product.min_deposit);",
											"",
											"// 15. Log product summary",
											"console.log(`Validated product: ${product.name} (${product.code})`);",
											"console.log(`Status: ${product.status} | Min Deposit: ${product.min_deposit}`);",
											"console.log(`Found ${product.rates.length} rate tiers`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query savings_product($productId:String!){savings_product(productId:$productId){...on SavingsProduct{id created_at updated_at partner_id name code status min_deposit max_deposit logo_url description rates{duration duration_unit rate type}}}}\",\n    \"variables\": {\n        \"productId\": \"{{k7_savings_products}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_promotion (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Response is valid JSON\", function () {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// Check if response contains errors",
											"if (jsonData.errors) {",
											"    pm.test(\"Error response structure is valid\", function () {",
											"        pm.expect(jsonData).to.have.property(\"errors\");",
											"        pm.expect(jsonData.errors).to.be.an(\"array\").that.is.not.empty;",
											"",
											"        const error = jsonData.errors[0];",
											"        pm.expect(error).to.have.property(\"message\");",
											"        pm.expect(error).to.have.property(\"path\");",
											"        pm.expect(error).to.have.property(\"extensions\");",
											"        pm.expect(error.extensions).to.have.property(\"code\");",
											"        pm.expect(error.extensions).to.have.property(\"serviceName\");",
											"",
											"        pm.expect(jsonData.data).to.be.null;",
											"    });",
											"} else {",
											"    // No error, check data structure",
											"    pm.test(\"Success response structure is valid\", function () {",
											"        pm.expect(jsonData).to.have.property(\"data\");",
											"        pm.expect(jsonData.data).to.have.property(\"savings_promotion\");",
											"",
											"        const promo = jsonData.data.savings_promotion;",
											"        pm.expect(promo).to.have.property(\"is_valid\").that.is.a(\"boolean\");",
											"        pm.expect(promo).to.have.property(\"rate\").that.is.a(\"number\");",
											"        pm.expect(promo).to.have.property(\"remaining_amount\").that.is.a(\"number\");",
											"        pm.expect(promo).to.have.property(\"__typename\").that.equals(\"SavingsPromotion\");",
											"    });",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_promotion\",\n    \"variables\": {\n        \"product_id\": \"{{k7_savings_products}}\",\n        \"amount\": 7000000,\n        \"promotion_code\": \"INFINA2024\"\n    },\n    \"query\": \"query savings_promotion($product_id: ID!, $amount: Float!, $promotion_code: String!) {\\n  savings_promotion(\\n    product_id: $product_id\\n    amount: $amount\\n    promotion_code: $promotion_code\\n  ) {\\n    is_valid\\n    rate\\n    remaining_amount\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_product_available_balance (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// === Root and field presence ===",
											"pm.test(\"Contains data.savings_product_available_balance\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_product_available_balance\");",
											"});",
											"",
											"// === Value check ===",
											"pm.test(\"Available balance is a number and non-negative\", () => {",
											"    const balance = jsonData.data.savings_product_available_balance;",
											"    pm.expect(balance).to.be.a(\"number\");",
											"    pm.expect(balance).to.be.at.least(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_product_available_balance\",\n    \"variables\": {\n        \"product_id\": \"{{k7_savings_products}}\"\n    },\n    \"query\": \"query savings_product_available_balance($product_id: String!) {\\n  savings_product_available_balance(product_id: $product_id)\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_contracts (K7 contract detail)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.data).to.have.property('savings_contract');",
											"});",
											"",
											"// 5. Validate savings contract object",
											"const contract = jsonData.data.savings_contract;",
											"pm.test(\"Contract has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id', 'created_at', 'updated_at', 'amount', 'available_amount',",
											"        'estimated_profit', 'matured_at', 'maturity_date', 'approved_at',",
											"        'terminated_at', 'status', 'code', 'interest_rate', 'promotion_rate',",
											"        'penalty_rate', 'max_interest_rate', 'product', '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(contract).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 6. Validate ID format",
											"pm.test(\"Contract ID has correct format\", function() {",
											"    pm.expect(contract.id).to.be.a('string');",
											"    pm.expect(contract.id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"",
											"// 9. Validate status and related fields",
											"pm.test(\"Status and related fields are valid\", function() {",
											"    pm.expect(contract.status).to.be.a('string');",
											"    pm.expect(contract.status).to.equal('APPROVED');",
											"    pm.expect(contract.terminated_at).to.be.null;",
											"    ",
											"    pm.expect(contract.code).to.be.a('string');",
											"    pm.expect(contract.code).to.match(/^[A-Z0-9]{6}$/);",
											"});",
											"",
											"// 10. Validate rate fields",
											"pm.test(\"Rate fields are valid\", function() {",
											"    pm.expect(contract.interest_rate).to.be.a('number');",
											"    pm.expect(contract.promotion_rate).to.be.a('number');",
											"    pm.expect(contract.penalty_rate).to.be.a('number');",
											"    pm.expect(contract.max_interest_rate).to.be.a('number');",
											"});",
											"",
											"// 11. Validate product object",
											"pm.test(\"Product object is valid\", function() {",
											"    const product = contract.product;",
											"    pm.expect(product).to.be.an('object');",
											"    ",
											"    pm.expect(product.id).to.be.a('string');",
											"    pm.expect(product.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(product.partner_id).to.be.a('string');",
											"    pm.expect(product.partner_id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(product.name).to.be.a('string');",
											"    pm.expect(product.name).to.equal('K-Seven');",
											"    ",
											"    pm.expect(product.code).to.be.a('string');",
											"    pm.expect(product.code).to.equal('KF_SEVEN');",
											"    ",
											"    pm.expect(product.status).to.be.a('string');",
											"    pm.expect(product.status).to.equal('ACTIVE');",
											"    ",
											"    pm.expect(product.logo_url).to.be.a('string');",
											"    pm.expect(product.logo_url).to.match(/^\\/static\\/.+/);",
											"    ",
											"    pm.expect(product.rates).to.be.an('array');",
											"    pm.expect(product.rates.length).to.be.at.least(1);",
											"});",
											"",
											"// 12. Validate product rates",
											"pm.test(\"Product rates are valid\", function() {",
											"    contract.product.rates.forEach(rate => {",
											"        pm.expect(rate).to.have.property('duration');",
											"        pm.expect(rate).to.have.property('duration_unit');",
											"        pm.expect(rate).to.have.property('rate');",
											"        pm.expect(rate).to.have.property('type');",
											"        pm.expect(rate).to.have.property('__typename');",
											"        ",
											"        pm.expect(rate.type).to.be.oneOf(['INTEREST', 'PENALTY']);",
											"        ",
											"        if (rate.type === 'INTEREST') {",
											"            pm.expect(rate.duration).to.be.a('number');",
											"            pm.expect(rate.duration_unit).to.be.oneOf(['DAY', 'WEEK', 'MONTH', 'YEAR']);",
											"        }",
											"    });",
											"});",
											"",
											"// 13. Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(contract.__typename).to.equal('SavingsContract');",
											"    pm.expect(contract.product.__typename).to.equal('SavingsProduct');",
											"    contract.product.rates.forEach(rate => {",
											"        pm.expect(rate.__typename).to.equal('SavingsProductRate');",
											"    });",
											"});",
											"",
											"// 14. Store contract details for future tests",
											"pm.collectionVariables.set(\"contract_id\", contract.id);",
											"pm.collectionVariables.set(\"contract_code\", contract.code);",
											"pm.collectionVariables.set(\"contract_status\", contract.status);",
											"pm.collectionVariables.set(\"contract_amount\", contract.amount);",
											"pm.collectionVariables.set(\"contract_available_amount\", contract.available_amount);",
											"pm.collectionVariables.set(\"product_id\", contract.product.id);",
											"",
											"",
											"// 15. Log important details",
											"console.log(`Validated contract ${contract.code} with status ${contract.status}`);",
											"console.log(`Amount: ${contract.amount} | Available: ${contract.available_amount}`);",
											"console.log(`Product: ${contract.product.name} (${contract.product.code})`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_contract\",\n    \"variables\": {\n        \"contractId\": \"{{k7_contract_id}}\"\n    },\n    \"query\": \"query savings_contract($contractId: ID!) {\\n  savings_contract(contractId: $contractId) {\\n    ... on SavingsContract {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      available_amount\\n      estimated_profit\\n      matured_at\\n      maturity_date\\n      approved_at\\n      terminated_at\\n      status\\n      code\\n      interest_rate\\n      promotion_rate\\n      penalty_rate\\n      max_interest_rate\\n      product {\\n        id\\n        partner_id\\n        name\\n        code\\n        status\\n        logo_url\\n        rates {\\n          duration\\n          duration_unit\\n          rate\\n          type\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_withdraw (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Response is not valid JSON\");",
											"    });",
											"}",
											"",
											"pm.test(\"Response has 'data.savings_withdraw_contract'\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_withdraw_contract\");",
											"});",
											"",
											"const contract = jsonData.data.savings_withdraw_contract;",
											"",
											"pm.test(\"Status is 'success'\", () => {",
											"    pm.expect(contract.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Error message is null\", () => {",
											"    pm.expect(contract.error_message).to.be.null;",
											"});",
											"",
											"pm.test(\"__typename is 'SavingsWithdrawContractResult'\", () => {",
											"    pm.expect(contract.__typename).to.eql(\"SavingsWithdrawContractResult\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{k7_contract_id}}\",\n            \"amount\": 1000000\n        }\n    },\n    \"query\": \"mutation savings_withdraw($input: SavingsWithdrawContractInput!) {\\n  savings_withdraw_contract(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_confirm_withdrawal_contract (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData;",
											"try {",
											"    jsonData = pm.response.json();",
											"} catch (e) {",
											"    pm.test(\"Valid JSON\", () => {",
											"        pm.expect.fail(\"Invalid JSON response\");",
											"    });",
											"}",
											"",
											"// === Root and field presence ===",
											"pm.test(\"Contains data.savings_confirm_withdrawal_contract\", () => {",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_confirm_withdrawal_contract\");",
											"});",
											"",
											"const withdrawal = jsonData.data.savings_confirm_withdrawal_contract;",
											"",
											"pm.test(\"Withdrawal result structure is valid\", () => {",
											"    pm.expect(withdrawal).to.include.keys(\"status\", \"error_message\", \"transaction\");",
											"    pm.expect(withdrawal.status).to.be.oneOf([\"success\", \"failure\"]);",
											"    pm.expect(withdrawal.__typename).to.eql(\"SavingsConfirmWithdrawalContractResult\");",
											"});",
											"",
											"// === Transaction object checks ===",
											"pm.test(\"Transaction object is valid\", () => {",
											"    const tx = withdrawal.transaction;",
											"",
											"    pm.expect(tx).to.include.keys(\"id\", \"amount\", \"contract\");",
											"    pm.expect(tx.id).to.be.a(\"string\");",
											"    pm.expect(tx.amount).to.be.a(\"number\");",
											"    pm.expect(tx.__typename).to.eql(\"SavingsTransaction\");",
											"});",
											"",
											"// === Contract + Product check ===",
											"pm.test(\"Contract and Product fields are correct\", () => {",
											"    const contract = withdrawal.transaction.contract;",
											"",
											"    pm.expect(contract).to.have.property(\"product\");",
											"    pm.expect(contract.__typename).to.eql(\"SavingsContract\");",
											"",
											"    const product = contract.product;",
											"    pm.expect(product).to.have.property(\"name\");",
											"    pm.expect(product.name).to.be.a(\"string\");",
											"    pm.expect(product.__typename).to.eql(\"SavingsProduct\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_confirm_withdrawal_contract\",\n    \"variables\": {\n        \"input\": {\n            \"contract_id\": \"{{k7_contract_id}}\",\n            \"otp\": \"111111\"\n        }\n    },\n    \"query\": \"mutation savings_confirm_withdrawal_contract($input: SavingsConfirmWithdrawContractInput!) {\\n  savings_confirm_withdrawal_contract(input: $input) {\\n    status\\n    error_message\\n    transaction {\\n      id\\n      amount\\n      contract {\\n        ... on SavingsContract {\\n          product {\\n            name\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_termination_info (K7)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"pm.test(\"Has valid structure\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.have.property(\"savings_termination_info\");",
											"});",
											"",
											"const terminationInfo = jsonData.data.savings_termination_info;",
											"",
											"// 3. Required Fields Validation",
											"pm.test(\"Contains all required fields\", () => {",
											"    const requiredFields = [",
											"        \"amount\", \"profit\", \"penalty_rate\", \"net_income\",",
											"        \"tax_amount\", \"tax_rate\", \"interest_rate\", \"__typename\"",
											"    ];",
											"    requiredFields.forEach(field => pm.expect(terminationInfo).to.have.property(field));",
											"});",
											"",
											"// 4. Field Type Validation",
											"pm.test(\"All fields have correct types\", () => {",
											"    pm.expect(terminationInfo.amount).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.profit).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.penalty_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.net_income).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.tax_amount).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.tax_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.interest_rate).to.be.a(\"number\");",
											"    pm.expect(terminationInfo.__typename).to.be.a(\"string\");",
											"});",
											"",
											"",
											"// 8. Interest Rate Validation",
											"pm.test(\"Interest rate is valid\", () => {",
											"    pm.expect(terminationInfo.interest_rate).to.equal(0.035);",
											"    pm.expect(terminationInfo.interest_rate).to.be.at.least(0);",
											"});",
											"",
											"// 9. Type Name Validation",
											"pm.test(\"Correct __typename\", () => {",
											"    pm.expect(terminationInfo.__typename).to.equal(\"SavingsTerminationInfo\");",
											"});",
											"",
											"// 10. No Extra Fields",
											"pm.test(\"No unexpected fields\", () => {",
											"    const expectedFields = [",
											"        \"amount\", \"profit\", \"penalty_rate\", \"net_income\",",
											"        \"tax_amount\", \"tax_rate\", \"interest_rate\", \"__typename\"",
											"    ];",
											"    pm.expect(Object.keys(terminationInfo)).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Store Values for Future Tests",
											"pm.collectionVariables.set(\"termination_amount\", terminationInfo.amount);",
											"pm.collectionVariables.set(\"termination_profit\", terminationInfo.profit);",
											"pm.collectionVariables.set(\"termination_net_income\", terminationInfo.net_income);",
											"",
											"// 12. Log Summary",
											"console.log(\"Savings Termination Validation Results:\");",
											"console.log(`Principal Amount: ${terminationInfo.amount}`);",
											"console.log(`Profit: ${terminationInfo.profit}`);",
											"console.log(`Tax (${terminationInfo.tax_rate * 100}%): ${terminationInfo.tax_amount}`);",
											"console.log(`Net Income: ${terminationInfo.net_income}`);",
											"console.log(`Interest Rate: ${terminationInfo.interest_rate * 100}%`);",
											"console.log(`Penalty Rate: ${terminationInfo.penalty_rate * 100}%`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_termination_info\",\n    \"variables\": {\n        \"contract_id\": \"{{k7_contract_id}}\"\n    },\n    \"query\": \"query savings_termination_info($contract_id: ID!) {\\n  savings_termination_info(contract_id: $contract_id) {\\n    amount\\n    profit\\n    penalty_rate\\n    net_income\\n    tax_amount\\n    tax_rate\\n    interest_rate\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (K7 History list)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"const savingsTransactions = response.data.savings_transactions;",
											"",
											"// Validate pagination structure",
											"pm.test(\"Pagination structure is valid for first:100\", function() {",
											"    pm.expect(savingsTransactions.edges).to.be.an('array');",
											"    pm.expect(savingsTransactions.nodes).to.be.an('array');",
											"    ",
											"    ",
											"    // Store all cursors in a collection variable",
											"    const cursors = savingsTransactions.edges.map(edge => edge.cursor);",
											"    pm.collectionVariables.set(\"all_cursors\", JSON.stringify(cursors));",
											"    ",
											"    // Store first and last cursors separately for pagination use",
											"    if (savingsTransactions.edges.length > 0) {",
											"        pm.collectionVariables.set(\"first_cursor\", savingsTransactions.edges[0].cursor);",
											"        pm.collectionVariables.set(\"last_cursor\", savingsTransactions.edges[savingsTransactions.edges.length - 1].cursor);",
											"    }",
											"});",
											"",
											"// Enhanced cursor validation and storage",
											"pm.test(\"Cursor values are valid and stored correctly\", function() {",
											"    const edges = savingsTransactions.edges;",
											"    ",
											"    edges.forEach((edge, index) => {",
											"        // Verify cursor matches node ID",
											"        pm.expect(edge.cursor).to.equal(edge.node.id);",
											"        ",
											"        // Store each cursor with index prefix for potential future use",
											"        pm.collectionVariables.set(`cursor_${index}`, edge.cursor);",
											"    });",
											"    ",
											"    // Verify page_info cursors match our stored first/last cursors",
											"    if (edges.length > 0) {",
											"        pm.expect(savingsTransactions.page_info.start_cursor).to.equal(pm.collectionVariables.get(\"first_cursor\"));",
											"        pm.expect(savingsTransactions.page_info.end_cursor).to.equal(pm.collectionVariables.get(\"last_cursor\"));",
											"    }",
											"});",
											"",
											"// Validate page_info for pagination",
											"pm.test(\"Page info reflects first:100 pagination\", function() {",
											"    const pageInfo = savingsTransactions.page_info;",
											"    ",
											"    // If we got exactly 100 results, there might be a next page",
											"    if (savingsTransactions.edges.length === 100) {",
											"        pm.expect(pageInfo.has_next_page).to.be.true;",
											"    }",
											"    ",
											"    // First page shouldn't have previous page",
											"    pm.expect(pageInfo.has_previous_page).to.be.false;",
											"});",
											"",
											"// Transaction node validation (reusable function)",
											"function validateTransactionNode(node) {",
											"    pm.expect(node).to.have.all.keys(",
											"        'id', 'created_at', 'updated_at', 'amount', 'initial_amount',",
											"        'status', 'type', 'transfer_message', 'deposited_at', 'contract', '__typename'",
											"    );",
											"    // ... (rest of your node validation logic)",
											"}",
											"",
											"// After all tests, log the stored cursors for debugging",
											"console.log(\"First cursor:\", pm.collectionVariables.get(\"first_cursor\"));",
											"console.log(\"Last cursor:\", pm.collectionVariables.get(\"last_cursor\"));",
											"console.log(\"All cursors:\", JSON.parse(pm.collectionVariables.get(\"all_cursors\")));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transactions\",\n    \"variables\": {\n        \"first\": 100,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\"\n    },\n    \"query\": \"query savings_transactions($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: SavingsTransactionSortKeys, $query: String) {\\n  savings_transactions(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        amount\\n        initial_amount\\n        status\\n        type\\n        transfer_message\\n        deposited_at\\n        contract {\\n          ... on SavingsContract {\\n            id\\n            available_amount\\n            product {\\n              name\\n              __typename\\n            }\\n            maturity_date\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      amount\\n      initial_amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          available_amount\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_transactions (K7 History detail)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('savings_transaction');",
											"});",
											"",
											"const transaction = response.data.savings_transaction;",
											"",
											"// Validate transaction fields",
											"pm.test(\"Transaction has all required fields\", function() {",
											"    pm.expect(transaction).to.have.all.keys(",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'initial_amount',",
											"        'amount',",
											"        'status',",
											"        'type',",
											"        'transfer_message',",
											"        'deposited_at',",
											"        'receive_method',",
											"        'tax',",
											"        'profit',",
											"        'contract',",
											"        '__typename'",
											"    );",
											"    ",
											"    pm.expect(transaction.__typename).to.equal('SavingsTransaction');",
											"});",
											"",
											"// // Validate field types and values",
											"// pm.test(\"Transaction field validation\", function() {",
											"//     // ID and timestamps",
											"//     pm.expect(transaction.id).to.equal('cmcsx0vh3039m23t36xu70vyh');",
											"//     pm.expect(new Date(transaction.created_at).toISOString()).to.equal(transaction.created_at);",
											"//     pm.expect(new Date(transaction.updated_at).toISOString()).to.equal(transaction.updated_at);",
											"    ",
											"//     // Amounts",
											"//     pm.expect(transaction.initial_amount).to.equal(70000000);",
											"//     pm.expect(transaction.amount).to.equal(70016397);",
											"//     pm.expect(transaction.tax).to.equal(863);",
											"//     pm.expect(transaction.profit).to.equal(17260);",
											"    ",
											"//     // Status and type",
											"//     pm.expect(transaction.status).to.equal('PENDING');",
											"//     pm.expect(transaction.type).to.equal('WITHDRAWAL');",
											"//     pm.expect(transaction.receive_method).to.equal('BANK_TRANSFER');",
											"    ",
											"//     // Nullable fields",
											"//     pm.expect(transaction.transfer_message).to.be.null;",
											"//     pm.expect(transaction.deposited_at).to.be.null;",
											"// });",
											"",
											"// Validate contract",
											"pm.test(\"K-Seven Contract validation\", function() {",
											"    const contract = transaction.contract;",
											"    ",
											"    pm.expect(contract).to.have.all.keys(",
											"        'id',",
											"        'code',",
											"        'product',",
											"        'maturity_date',",
											"        '__typename'",
											"    );",
											"    ",
											"    pm.expect(contract.__typename).to.equal('SavingsContract');",
											"    // pm.expect(contract.id).to.equal('cmc08icmk000108l80cce8lgj');",
											"    // pm.expect(contract.code).to.equal('ZTQMHQ');",
											"    pm.expect(new Date(contract.maturity_date).toISOString()).to.equal(contract.maturity_date);",
											"    ",
											"    // Validate product",
											"    pm.expect(contract.product).to.have.all.keys('name', '__typename');",
											"    pm.expect(contract.product.__typename).to.equal('SavingsProduct');",
											"    pm.expect(contract.product.name).to.equal('K-Seven');",
											"});",
											"",
											"// // Validate calculations (optional)",
											"// pm.test(\"Amount calculations are valid\", function() {",
											"//     const expectedAmount = transaction.initial_amount + transaction.profit - transaction.tax;",
											"//     pm.expect(transaction.amount).to.equal(expectedAmount);",
											"// });",
											"",
											"// Store relevant data for future tests (optional)",
											"pm.test(\"Store transaction data\", function() {",
											"    pm.collectionVariables.set(\"last_transaction_id\", transaction.id);",
											"    pm.collectionVariables.set(\"last_transaction_amount\", transaction.amount);",
											"    pm.collectionVariables.set(\"last_contract_code\", transaction.contract.code);",
											"    ",
											"    console.log(\"Stored transaction ID:\", transaction.id);",
											"    console.log(\"Stored amount:\", transaction.amount);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_transaction\",\n    \"variables\": {\n        \"transactionId\": \"{{first_cursor}}\"\n    },\n    \"query\": \"query savings_transaction($transactionId: ID!) {\\n  savings_transaction(transactionId: $transactionId) {\\n    ... on SavingsTransaction {\\n      id\\n      created_at\\n      updated_at\\n      initial_amount\\n      amount\\n      status\\n      type\\n      transfer_message\\n      deposited_at\\n      receive_method\\n      tax\\n      profit\\n      contract {\\n        ... on SavingsContract {\\n          id\\n          code\\n          product {\\n            name\\n            __typename\\n          }\\n          maturity_date\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Closed API",
					"item": [
						{
							"name": "savings_render_partner_document (TnC)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"✅ Validate savings_render_partner_document response\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Ensure root structure",
											"    pm.expect(jsonData).to.have.nested.property(\"data.savings_render_partner_document\");",
											"",
											"    const result = jsonData.data.savings_render_partner_document;",
											"",
											"    // Validate fields",
											"    pm.expect(result).to.have.property(\"status\", \"success\");",
											"    pm.expect(result).to.have.property(\"error_message\").that.is.null;",
											"    pm.expect(result).to.have.property(\"content\").that.is.a(\"string\");",
											"    pm.expect(result).to.have.property(\"__typename\", \"SavingsRenderDocumentResult\");",
											"",
											"    // Optional: Check if content is likely valid HTML",
											"    pm.expect(result.content).to.include(\"<\").and.to.include(\">\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_render_partner_document\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    },\n    \"query\": \"query savings_render_partner_document($partner_id: ID!) {\\n  savings_render_partner_document(partner_id: $partner_id) {\\n    status\\n    error_message\\n    content\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_store_open_account_step_data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response has JSON body",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response JSON",
											"const responseJson = pm.response.json();",
											"",
											"// Validate the overall structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(responseJson).to.have.property('data');",
											"    pm.expect(responseJson.data).to.have.property('savings_store_open_account_step_data');",
											"});",
											"",
											"// Validate savings_store_open_account_step_data",
											"const stepData = responseJson.data.savings_store_open_account_step_data;",
											"pm.test(\"Step data has correct fields\", function() {",
											"    pm.expect(stepData).to.have.property('status', 'success');",
											"    pm.expect(stepData).to.have.property('error_message', null);",
											"    pm.expect(stepData).to.have.property('open_account_step_user').that.is.an('array');",
											"    pm.expect(stepData).to.have.property('__typename', 'SavingsStoreOpenAccountStepDataResult');",
											"});",
											"",
											"// Validate open_account_step_user array",
											"pm.test(\"open_account_step_user array has valid items\", function() {",
											"    const response = pm.response.json();",
											"    const users = response.data.savings_store_open_account_step_data.open_account_step_user;",
											"",
											"    pm.expect(users).to.have.lengthOf.above(0);",
											"    ",
											"    users.forEach(user => {",
											"        pm.expect(user).to.have.property('id').that.is.a('string');",
											"        pm.expect(user).to.have.property('status', 'SUCCESS');",
											"        pm.expect(user).to.have.property('payload', null);",
											"        pm.expect(user).to.have.property('__typename', 'SavingsOpenAccountStepUser');",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "X-Request-Id",
										"value": "30b4a914-4ccd-499b-97ac-0578edad8e51",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "01b23e066d63a164ee90655460fe7109452607022ca0f9b9d151d9600c134f74",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_store_open_account_step_data\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\",\n        \"step_data\": [\n            {\n                \"code\": \"EKYC\",\n                \"status\": \"SUCCESS\"\n            },\n            {\n                \"code\": \"PHONE\",\n                \"status\": \"SUCCESS\"\n            },\n            {\n                \"code\": \"EMAIL\",\n                \"status\": \"SUCCESS\"\n            }\n        ]\n    },\n    \"query\": \"mutation savings_store_open_account_step_data($partner_id: ID!, $step_data: [SavingsOpenAccountStepUserInput!]!) {\\n  savings_store_open_account_step_data(\\n    partner_id: $partner_id\\n    step_data: $step_data\\n  ) {\\n    status\\n    error_message\\n    open_account_step_user {\\n      id\\n      status\\n      payload\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "savings_store_open_account_step_data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "X-Request-Id",
												"value": "30b4a914-4ccd-499b-97ac-0578edad8e51",
												"type": "text"
											},
											{
												"key": "X-Request-Signature",
												"value": "01b23e066d63a164ee90655460fe7109452607022ca0f9b9d151d9600c134f74",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"savings_store_open_account_step_data\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\",\n        \"step_data\": [\n            {\n                \"code\": \"EKYC\",\n                \"status\": \"SUCCESS\"\n            },\n            {\n                \"code\": \"PHONE\",\n                \"status\": \"SUCCESS\"\n            },\n            {\n                \"code\": \"EMAIL\",\n                \"status\": \"SUCCESS\"\n            }\n        ]\n    },\n    \"query\": \"mutation savings_store_open_account_step_data($partner_id: ID!, $step_data: [SavingsOpenAccountStepUserInput!]!) {\\n  savings_store_open_account_step_data(\\n    partner_id: $partner_id\\n    step_data: $step_data\\n  ) {\\n    status\\n    error_message\\n    open_account_step_user {\\n      id\\n      status\\n      payload\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://stock-api-v2.infina.dev/graphql",
											"protocol": "https",
											"host": [
												"stock-api-v2",
												"infina",
												"dev"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "727"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "cache-control",
											"value": "no-store"
										},
										{
											"key": "ETag",
											"value": "W/\"2d7-TGyfu0uznoq/mPfis8HoP9R0wuI\""
										},
										{
											"key": "Date",
											"value": "Thu, 12 Jun 2025 10:25:23 GMT"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "154"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "1"
										},
										{
											"key": "Via",
											"value": "kong/2.8.5"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"savings_store_open_account_step_data\": {\n            \"status\": \"success\",\n            \"error_message\": null,\n            \"open_account_step_user\": [\n                {\n                    \"id\": \"cm5qiemr002h423qkcsp95tb5\",\n                    \"status\": \"SUCCESS\",\n                    \"payload\": null,\n                    \"__typename\": \"SavingsOpenAccountStepUser\"\n                },\n                {\n                    \"id\": \"cm5qiemr002h523qk9g1obbgb\",\n                    \"status\": \"SUCCESS\",\n                    \"payload\": null,\n                    \"__typename\": \"SavingsOpenAccountStepUser\"\n                },\n                {\n                    \"id\": \"cm5qiemr002h623qk5n9sbc6x\",\n                    \"status\": \"SUCCESS\",\n                    \"payload\": null,\n                    \"__typename\": \"SavingsOpenAccountStepUser\"\n                },\n                {\n                    \"id\": \"cm5qjtlct02n823qk6r5m23ye\",\n                    \"status\": \"SUCCESS\",\n                    \"payload\": null,\n                    \"__typename\": \"SavingsOpenAccountStepUser\"\n                },\n                {\n                    \"id\": \"cm5qju93802nl23qk82d88kbo\",\n                    \"status\": \"SUCCESS\",\n                    \"payload\": null,\n                    \"__typename\": \"SavingsOpenAccountStepUser\"\n                }\n            ],\n            \"__typename\": \"SavingsStoreOpenAccountStepDataResult\"\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "savings_partner (open_account_steps)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"✅ Validate open_account_steps with optional user_data\", function () {",
											"    const jsonData = pm.response.json();",
											"    const steps = jsonData.data?.savings_partner?.open_account_steps;",
											"    const requiredStepCodes = [\"EKYC\", \"EMAIL\", \"PHONE\", \"SIGN_CONTRACT\", \"OTP\"];",
											"",
											"    pm.expect(steps).to.be.an(\"array\").that.is.not.empty;",
											"",
											"    const codesFound = [];",
											"",
											"    steps.forEach(step => {",
											"        pm.expect(step).to.have.property(\"id\").that.is.a(\"string\");",
											"        pm.expect(step).to.have.property(\"code\").that.is.a(\"string\");",
											"        pm.expect(step).to.have.property(\"__typename\", \"SavingsOpenAccountStep\");",
											"        codesFound.push(step.code);",
											"",
											"        const user = step.user_data;",
											"",
											"        if (user !== null) {",
											"            pm.expect(user).to.be.an(\"object\");",
											"            pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");",
											"            pm.expect(user).to.have.property(\"created_at\").that.is.a(\"string\");",
											"            pm.expect(user).to.have.property(\"updated_at\").that.is.a(\"string\");",
											"            pm.expect(user).to.have.property(\"status\").that.is.oneOf([\"SUCCESS\", \"FAILED\", \"PENDING\"]);",
											"            pm.expect(user).to.have.property(\"payload\"); // Can be null",
											"            pm.expect(user).to.have.property(\"__typename\", \"SavingsOpenAccountStepUser\");",
											"",
											"            const createdAtValid = !isNaN(Date.parse(user.created_at));",
											"            const updatedAtValid = !isNaN(Date.parse(user.updated_at));",
											"            pm.expect(createdAtValid, `${step.code} created_at is not a valid date`).to.be.true;",
											"            pm.expect(updatedAtValid, `${step.code} updated_at is not a valid date`).to.be.true;",
											"        } else {",
											"            console.warn(`⚠️ user_data is null for step: ${step.code}`);",
											"        }",
											"    });",
											"",
											"    // Confirm all required step codes are present",
											"    requiredStepCodes.forEach(code => {",
											"        pm.expect(codesFound).to.include(code, `Missing required step code: ${code}`);",
											"    });",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_partner\",\n    \"variables\": {\n        \"code\": \"KAFI\"\n    },\n    \"query\": \"query savings_partner($code: SavingsPartnerCode!) {\\n  savings_partner(code: $code) {\\n    ... on SavingsPartner {\\n      open_account_steps {\\n        id\\n        code\\n        user_data {\\n          id\\n          created_at\\n          updated_at\\n          status\\n          payload\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "savings_open_account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"pm.test(\"Has valid error structure\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"    pm.expect(jsonData.data).to.have.property(\"savings_open_account\");",
											"});",
											"",
											"const result = jsonData.data.savings_open_account;",
											"",
											"// 3. Required Fields Validation",
											"pm.test(\"Contains all required fields\", () => {",
											"    pm.expect(result).to.have.property(\"status\");",
											"    pm.expect(result).to.have.property(\"error_message\");",
											"    pm.expect(result).to.have.property(\"account\");",
											"});",
											"",
											"// 4. Field Type Validation",
											"pm.test(\"All fields have correct types\", () => {",
											"    pm.expect(result.status).to.be.a(\"string\");",
											"    pm.expect(result.error_message).to.be.a(\"string\");",
											"    pm.expect(result.account).to.be.null;",
											"});",
											"",
											"// 5. Status Validation",
											"pm.test(\"Status is 'failed'\", () => {",
											"    pm.expect(result.status).to.equal(\"failed\");",
											"});",
											"",
											"// 6. Error Message Validation",
											"pm.test(\"Error message indicates account opening not supported\", () => {",
											"    pm.expect(result.error_message).to.equal(\"account_opening_not_supported\");",
											"    // Additional check for error message format if needed",
											"    pm.expect(result.error_message).to.match(/^[a-z_]+$/); // snake_case pattern",
											"});",
											"",
											"// 7. Account Validation",
											"pm.test(\"Account is null for failed opening\", () => {",
											"    pm.expect(result.account).to.be.null;",
											"});",
											"",
											"// 8. No Extra Fields",
											"pm.test(\"No unexpected fields\", () => {",
											"    const expectedFields = [\"status\", \"error_message\", \"account\"];",
											"    pm.expect(Object.keys(result)).to.eql(expectedFields);",
											"});",
											"",
											"// 9. Store Error Info for Future Tests",
											"pm.environment.set(\"account_opening_error\", result.error_message);",
											"",
											"// 10. Log Detailed Error Info",
											"console.log(\"Account Opening Failure Details:\");",
											"console.log(`Status: ${result.status}`);",
											"console.log(`Error Code: ${result.error_message}`);",
											"console.log(\"No account was created\");",
											"",
											"// 11. Additional Business Logic Validation",
											"pm.test(\"Error message indicates a permanent restriction\", () => {",
											"    const permanentErrors = [",
											"        \"account_opening_not_supported\",",
											"        \"region_not_supported\",",
											"        \"product_not_available\"",
											"    ];",
											"    pm.expect(permanentErrors).to.include(result.error_message);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"mutation savings_open_account($partner_id:ID!){savings_open_account(input:{partner_id:$partner_id}){status error_message account{id created_at updated_at rejected_reason status}}}\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "savings_open_account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "X-Request-Id",
												"value": "{{x-request-id}}",
												"type": "text"
											},
											{
												"key": "X-Request-Signature",
												"value": "{{x-request-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": \"mutation savings_open_account($partner_id:ID!){savings_open_account(input:{partner_id:$partner_id}){status error_message account{id created_at updated_at rejected_reason status}}}\",\n    \"variables\": {\n        \"partner_id\": \"clhin6ff300013b6i58le4r6u\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://stock-api-v2.infina.dev/graphql",
											"protocol": "https",
											"host": [
												"stock-api-v2",
												"infina",
												"dev"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "116"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "cache-control",
											"value": "no-store"
										},
										{
											"key": "ETag",
											"value": "W/\"74-TVPLQzu7LVjgMoEcVvtgnJYRfvk\""
										},
										{
											"key": "Date",
											"value": "Thu, 12 Jun 2025 10:25:48 GMT"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "44"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "0"
										},
										{
											"key": "Via",
											"value": "kong/2.8.5"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"savings_open_account\": {\n            \"status\": \"failed\",\n            \"error_message\": \"reopen_rejected_account_only\",\n            \"account\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "savings_open_contract (K90)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Content-Type is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Content Type Validation",
											"pm.test(\"Response is JSON\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 3. Response Structure Validation",
											"const response = pm.response.json();",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an(\"object\");",
											"    pm.expect(response).to.have.property(\"data\");",
											"    pm.expect(response.data).to.have.property(\"savings_open_contract\");",
											"});",
											"",
											"const result = response.data.savings_open_contract;",
											"",
											"// 4. Required Fields Validation",
											"pm.test(\"Contains all required fields\", () => {",
											"    const requiredFields = [\"status\", \"error_message\", \"contract\", \"__typename\"];",
											"    requiredFields.forEach(field => {",
											"        pm.expect(result).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 5. Field Type Validation",
											"pm.test(\"Fields have correct types\", () => {",
											"    pm.expect(result.status).to.be.a(\"string\");",
											"    pm.expect(result.error_message).to.be.a(\"string\");",
											"    pm.expect(result.contract).to.be.null;",
											"    pm.expect(result.__typename).to.be.a(\"string\");",
											"});",
											"",
											"// 6. Status Value Validation",
											"pm.test(\"Status is 'failed'\", () => {",
											"    pm.expect(result.status).to.equal(\"failed\");",
											"});",
											"",
											"// 7. Error Message Validation",
											"pm.test(\"Error message indicates contract opening not supported\", () => {",
											"    pm.expect(result.error_message).to.equal(\"contract_opening_not_supported\");",
											"    // Validate error message format (snake_case)",
											"    pm.expect(result.error_message).to.match(/^[a-z_]+$/);",
											"});",
											"",
											"// 8. Contract Validation",
											"pm.test(\"Contract is null for failed opening\", () => {",
											"    pm.expect(result.contract).to.be.null;",
											"});",
											"",
											"// 9. Typename Validation",
											"pm.test(\"Correct __typename value\", () => {",
											"    pm.expect(result.__typename).to.equal(\"SavingsOpenContractResult\");",
											"});",
											"",
											"// 10. No Extra Fields",
											"pm.test(\"No unexpected fields in response\", () => {",
											"    const expectedFields = [\"status\", \"error_message\", \"contract\", \"__typename\"];",
											"    pm.expect(Object.keys(result)).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Error Classification",
											"pm.test(\"Error indicates permanent restriction\", () => {",
											"    const permanentErrors = [",
											"        \"contract_opening_not_supported\",",
											"        \"product_not_available\",",
											"        \"region_restricted\"",
											"    ];",
											"    pm.expect(permanentErrors).to.include(result.error_message);",
											"});",
											"",
											"// 12. Store Error Information",
											"pm.environment.set(\"last_contract_error\", result.error_message);",
											"pm.environment.set(\"last_contract_status\", result.status);",
											"",
											"// 13. Response Time Check (optional)",
											"pm.test(\"Response time is reasonable\", () => {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"// 14. Log Detailed Information",
											"console.log(\"Contract Opening Failure Details:\");",
											"console.log(`Status: ${result.status}`);",
											"console.log(`Error: ${result.error_message}`);",
											"console.log(`Type: ${result.__typename}`);",
											"console.log(\"No contract was created\");",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"savings_open_contract\",\n    \"variables\": {\n        \"input\": {\n            \"product_id\": \"{{k90_savings_products}}\",\n            \"amount\": 9000000,\n            \"payment_method\": \"BANK_TRANSFER\"\n        }\n    },\n    \"query\": \"mutation savings_open_contract($input: SavingsOpenContractInput!) {\\n  savings_open_contract(input: $input) {\\n    status\\n    error_message\\n    contract {\\n      id\\n      created_at\\n      updated_at\\n      available_amount\\n      estimated_profit\\n      matured_at\\n      approved_at\\n      terminated_at\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "savings_open_contract (K90)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											},
											{
												"key": "X-Request-Id",
												"value": "{{x-request-id}}",
												"type": "text"
											},
											{
												"key": "X-Request-Signature",
												"value": "{{x-request-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"savings_open_contract\",\n    \"variables\": {\n        \"input\": {\n            \"product_id\": \"clqaoh1ow000108jl9bvz7t14\",\n            \"amount\": 9000000,\n            \"payment_method\": \"BANK_TRANSFER\"\n        }\n    },\n    \"query\": \"mutation savings_open_contract($input: SavingsOpenContractInput!) {\\n  savings_open_contract(input: $input) {\\n    status\\n    error_message\\n    contract {\\n      id\\n      created_at\\n      updated_at\\n      available_amount\\n      estimated_profit\\n      matured_at\\n      approved_at\\n      terminated_at\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://stock-api-v2.infina.dev/graphql",
											"protocol": "https",
											"host": [
												"stock-api-v2",
												"infina",
												"dev"
											],
											"path": [
												"graphql"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "390"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "cache-control",
											"value": "no-store"
										},
										{
											"key": "ETag",
											"value": "W/\"186-xg9yjf/+kPMAtCQCsO67Hcw027M\""
										},
										{
											"key": "Date",
											"value": "Thu, 12 Jun 2025 10:26:20 GMT"
										},
										{
											"key": "X-Kong-Upstream-Latency",
											"value": "80"
										},
										{
											"key": "X-Kong-Proxy-Latency",
											"value": "0"
										},
										{
											"key": "Via",
											"value": "kong/2.8.5"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"savings_open_contract\": {\n            \"status\": \"success\",\n            \"error_message\": null,\n            \"contract\": {\n                \"id\": \"cmbt8hc26023y4nt4eo6ddekl\",\n                \"created_at\": \"2025-06-12T10:26:20.623Z\",\n                \"updated_at\": \"2025-06-12T10:26:20.623Z\",\n                \"available_amount\": 0,\n                \"estimated_profit\": 0,\n                \"matured_at\": null,\n                \"approved_at\": null,\n                \"terminated_at\": null,\n                \"status\": \"NEW\",\n                \"__typename\": \"SavingsContract\"\n            },\n            \"__typename\": \"SavingsOpenContractResult\"\n        }\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "SignOut",
					"item": [
						{
							"name": "signout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// 1. Validate status 200OK and the response structure",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"✅ Validate Signout Response\", function () {",
											"    let response = pm.response.json();",
											"",
											"    // Validate top-level structure",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
											"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
											"",
											"    // Validate \"signout\" property in the \"data\" object",
											"    pm.expect(response.data).to.have.property(\"signout\").that.is.a(\"string\").and.equals(\"success\");",
											"",
											"    // Validate \"extensions\"",
											"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
											"",
											"    console.log(\"✅ Signout Response is valid!\");",
											"});",
											"",
											"",
											"// 2. Clear collection variables",
											"pm.test(\"Clear all collection variables after signout\", function() {",
											"    // Get current variables",
											"    const vars = pm.collectionVariables.toObject();",
											"    const varCount = Object.keys(vars).length;",
											"    ",
											"    if (varCount > 0) {",
											"        // Log which variables are being cleared",
											"        console.log(`Clearing ${varCount} collection variables:`, Object.keys(vars));",
											"        ",
											"        // Clear all variables",
											"        pm.collectionVariables.clear();",
											"        ",
											"        // Verify they're gone",
											"        pm.expect(Object.keys(pm.collectionVariables.toObject()).length).to.equal(0);",
											"    } else {",
											"        console.log(\"No collection variables to clear\");",
											"        pm.expect(true).to.be.true; // dummy assertion so test doesn't fail",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {\n        \"onesignal_id\": \"d94a83aa-4a3c-4c1a-9171-ac36900e0523\"\n    },\n    \"query\": \"mutation ($onesignal_id: String) {\\n  signout(input: {onesignal_id: $onesignal_id})\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api/graphiql",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api",
										"graphiql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set('baseUrl', \"https://staging.realstake.co/api\");",
					"pm.collectionVariables.set('x-infina-api-key', \"zTW9S4LF5qGQfCAJzOiKGAR0Y2dTuAKs\");",
					"pm.collectionVariables.set('x-infina-app-version', \"9.26.13\");",
					"pm.collectionVariables.set('requestSecret', \"476f85ba2d4bc9a3caea55813e14dac9\");",
					"",
					"",
					"// // Set the maximum number of retries",
					"// pm.collectionVariables.set(\"maxRetries\", 3);",
					"",
					"// // Set the delay between retries (in milliseconds)",
					"// pm.collectionVariables.set(\"retryDelay\", 2000); // 2 seconds",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}