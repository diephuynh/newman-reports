{
	"info": {
		"_postman_id": "ca164a72-c2d5-4294-bd9a-b0fa557784f7",
		"name": "Infina-Finavi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3169862",
		"_collection_link": "https://dark-equinox-267507.postman.co/workspace/Infina-B2C---AutoWithdraw~258e2ddd-0762-413b-b252-4b5ee6799f06/collection/3169862-ca164a72-c2d5-4294-bd9a-b0fa557784f7?action=share&source=collection_link&creator=3169862"
	},
	"item": [
		{
			"name": "FRS & Finavi",
			"item": [
				{
					"name": "SignIn",
					"item": [
						{
							"name": "SignIn & Relogin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('phoneNumber', \"0931895560\"); //Users ekyc approved and signed Contract",
											"pm.collectionVariables.set('password', \"12345678\");",
											"pm.collectionVariables.set('pinCode', 111111);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Handle login response\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData.errors && jsonData.errors.length > 0) {",
											"        var error = jsonData.errors[0];",
											"        ",
											"        if (error.key === \"multiple_active_sessions\" && error.details && error.details.reLoginToken) {",
											"            pm.environment.set(\"reLoginToken\", error.details.reLoginToken);",
											"            ",
											"            // Call API re_login after login multi session",
											"            pm.sendRequest({",
											"                url: pm.collectionVariables.get(\"baseUrl\"),",
											"                method: \"POST\",",
											"                header: {",
											"                    \"Content-Type\": \"application/json\",",
											"                    \"x-infina-app-version\": pm.collectionVariables.get(\"x-infina-app-version\"),",
											"                    \"x-infina-api-key\": pm.collectionVariables.get(\"x-infina-api-key\")",
											"                },",
											"                body: {",
											"                    mode: \"raw\",",
											"                    raw: JSON.stringify({",
											"                        variables: {",
											"                            input: {",
											"                                re_login_token: error.details.reLoginToken",
											"                            }",
											"                        },",
											"                        query: \"mutation ($input: ReLoginInput) {\\n  re_login(input: $input) {\\n    api_client {\\n      access_token\\n      ip_address\\n      refresh_token\\n      user {\\n        id\\n        ip_address\\n        uid\\n        email\\n        phone\\n        first_name\\n        last_name\\n        status\\n        has_pin_code\\n        pin_type\\n        pin_blocking_duration\\n        pin_allowed_attempts\\n        freshchat_restore_id\\n        avatar\\n        confirm_contract\\n        contract_signed_at\\n        kyc {\\n          status\\n          address\\n          passport_issue_date\\n          passport_issue_place\\n          document_type\\n          document_number\\n          idcard_issue_date\\n          idcard_issue_place\\n          idcard_type\\n          cmnd\\n          first_name\\n          manual_review\\n          last_name\\n          full_name\\n          idcard_back_page\\n          idcard_front_page\\n          __typename\\n        }\\n        user_credits {\\n          id\\n          reward_balance\\n          expired_at\\n          __typename\\n        }\\n        documents {\\n          url\\n          created_at\\n          __typename\\n        }\\n        verified_phone\\n        verified_email\\n        referral_code\\n        referral_url\\n        custom_referral_code\\n        bank_info {\\n          bank_name\\n          bank_city\\n          bank_branch\\n          account_number\\n          account_owner\\n          bank_support\\n          verified\\n          __typename\\n        }\\n        referred_code\\n        created_at\\n        discourse {\\n          is_sign_up\\n          sign_up_at\\n          __typename\\n        }\\n        completed_challenge\\n        synced_ii_at\\n        pin_unblock_at\\n        pin_enable_manual_unblock\\n        __typename\\n      }\\n      __typename\\n    }\\n    flow\\n    __typename\\n  }\\n}\"",
											"                    })",
											"                }",
											"            }, function (err, res) {",
											"                if (!err && res.json().data && res.json().data.re_login.api_client) {",
											"                    let reLoginData = res.json().data.re_login.api_client;",
											"                    pm.collectionVariables.set(\"access_token\", reLoginData.access_token);",
											"                    pm.collectionVariables.set(\"refresh_token\", reLoginData.refresh_token);",
											"                    pm.collectionVariables.set(\"userid\", reLoginData.user.id);",
											"                    pm.collectionVariables.set(\"uid\", reLoginData.user.uid);",
											"                    pm.collectionVariables.set(\"MapId\", reLoginData.user.uid + '_SAV');",
											"                }",
											"                ",
											"            });",
											"        }",
											"    } else if (jsonData.data && jsonData.data.signin_v2) {",
											"        let loginData = jsonData.data.signin_v2;",
											"        pm.collectionVariables.set(\"access_token\", loginData.access_token);",
											"        pm.collectionVariables.set(\"refresh_token\", loginData.refresh_token);",
											"        pm.collectionVariables.set(\"userid\", loginData.user.id);",
											"        pm.collectionVariables.set(\"uid\", loginData.user.uid);",
											"        pm.collectionVariables.set(\"MapId\", loginData.user.uid + '_SAV');",
											"    }",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches signin_v2\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"signin_v2\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"signin_v2\",\n    \"variables\": {\n        \"email\": \"{{phoneNumber}}\",\n        \"password\": \"{{password}}\",\n        \"fcm_token\": \"{{$guid}}:APA91bFVsdSihx4iIvzKHqkmnSg15GpP2QyQwvMx6-Zrj-A3b9OGozt1Sg2NNdr0mfqBGENGhDyt8Dh0P_XEi6gjrDP0D-yyOjErOUtY8KNZ__gu0LP3rHs\",\n        \"app_instance_id\": \"{{$guid}}\",\n        \"platform\":\"PostmanTest\"\n    },\n    \"query\":\"mutation signin_v2($email: String, $password: String, $app_instance_id: String, $fcm_token: String, $platform: String) {\\n  signin_v2(\\n    input: {email: $email, password: $password, app_instance_id: $app_instance_id, fcm_token: $fcm_token, platform: $platform}\\n  ) {\\n    access_token\\n    ip_address\\n    refresh_token\\n    user {\\n      id\\n      ip_address\\n      uid\\n      email\\n      phone\\n      first_name\\n      last_name\\n      status\\n      has_pin_code\\n      pin_type\\n      pin_blocking_duration\\n      pin_allowed_attempts\\n      freshchat_restore_id\\n      avatar\\n      confirm_contract\\n      contract_signed_at\\n      kyc {\\n        status\\n        address\\n        passport_issue_date\\n        passport_issue_place\\n        document_type\\n        document_number\\n        idcard_issue_date\\n        idcard_issue_place\\n        idcard_type\\n        cmnd\\n        first_name\\n        manual_review\\n        last_name\\n        full_name\\n        idcard_back_page\\n        idcard_front_page\\n        __typename\\n      }\\n      user_credits {\\n        id\\n        reward_balance\\n        expired_at\\n        __typename\\n      }\\n      documents {\\n        url\\n        created_at\\n        __typename\\n      }\\n      verified_phone\\n      verified_email\\n      referral_code\\n      referral_url\\n      custom_referral_code\\n      bank_info {\\n        bank_name\\n        bank_city\\n        bank_branch\\n        account_number\\n        account_owner\\n        bank_support\\n        verified\\n        __typename\\n      }\\n      referred_code\\n      created_at\\n      discourse {\\n        is_sign_up\\n        sign_up_at\\n        __typename\\n      }\\n      completed_challenge\\n      synced_ii_at\\n      pin_unblock_at\\n      pin_enable_manual_unblock\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api/graphiql",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api",
										"graphiql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Home",
					"item": [
						{
							"name": "portfolio (Finavi stock_total_balance)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('data', 'extensions');",
											"    pm.expect(response.data).to.have.property('portfolio');",
											"    pm.expect(response.extensions).to.have.property('timing');",
											"});",
											"",
											"// Validate extensions",
											"pm.test(\"Extensions are valid\", function() {",
											"    pm.expect(response.extensions.timing).to.be.a('number').and.to.be.above(0);",
											"});",
											"",
											"// Validate portfolio data",
											"const portfolio = response.data.portfolio;",
											"pm.test(\"Portfolio structure is valid\", function() {",
											"    pm.expect(portfolio).to.have.all.keys(",
											"        'certificate_of_deposit_balance',",
											"        'certificate_of_deposit_temp_interest',",
											"        'real_estate_balance',",
											"        'real_estate_interest',",
											"        'mf_balance',",
											"        'mf_profit',",
											"        'stock_total_balance',",
											"        'stock_total_growth',",
											"        '__typename'",
											"    );",
											"    pm.expect(portfolio.__typename).to.equal('PortfolioResult');",
											"});",
											"",
											"// // Validate numeric fields",
											"// pm.test(\"Certificate of Deposit values are valid\", function() {",
											"//     pm.expect(portfolio.certificate_of_deposit_balance).to.be.a('number').and.to.equal(0);",
											"//     pm.expect(portfolio.certificate_of_deposit_temp_interest).to.be.a('number').and.to.equal(0);",
											"// });",
											"",
											"// pm.test(\"Real Estate values are valid\", function() {",
											"//     pm.expect(portfolio.real_estate_balance).to.be.a('number').and.to.equal(20000000);",
											"//     pm.expect(portfolio.real_estate_interest).to.be.a('number').and.to.equal(0);",
											"// });",
											"",
											"// pm.test(\"Mutual Fund values are valid\", function() {",
											"//     pm.expect(portfolio.mf_balance).to.be.a('number').and.to.equal(6836653774);",
											"//     pm.expect(portfolio.mf_profit).to.be.a('number').and.to.equal(-1395753021);",
											"// });",
											"",
											"// pm.test(\"Stock values are valid\", function() {",
											"//     pm.expect(portfolio.stock_total_balance).to.be.a('number').and.to.equal(49986560484);",
											"//     pm.expect(portfolio.stock_total_growth).to.be.a('number').and.to.equal(-5574);",
											"// });",
											"",
											"// Validate business logic (optional)",
											"pm.test(\"Negative values are valid where expected\", function() {",
											"    pm.expect(portfolio.mf_profit).to.be.below(0);",
											"    pm.expect(portfolio.stock_total_growth).to.be.below(0);",
											"});",
											"",
											"pm.test(\"Positive balances are valid\", function() {",
											"    pm.expect(portfolio.real_estate_balance).to.be.above(0);",
											"    pm.expect(portfolio.mf_balance).to.be.above(0);",
											"    pm.expect(portfolio.stock_total_balance).to.be.above(0);",
											"});",
											"",
											"// Store values for future tests (optional)",
											"pm.test(\"Store portfolio values\", function() {",
											"    pm.collectionVariables.set(\"stock_balance\", portfolio.stock_total_balance);",
											"    pm.collectionVariables.set(\"mf_balance\", portfolio.mf_balance);",
											"    ",
											"    console.log(\"Stock balance stored:\", portfolio.stock_total_balance);",
											"    console.log(\"MF balance stored:\", portfolio.mf_balance);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolio(input: {get_performance: false}) {\\n    certificate_of_deposit_balance\\n    certificate_of_deposit_temp_interest\\n    real_estate_balance\\n    real_estate_interest\\n    mf_balance\\n    mf_profit\\n    stock_total_balance\\n    stock_total_growth\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_maintenance_config",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate maintenance config exists",
											"pm.test(\"Maintenance config object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_maintenance_config');",
											"    const config = jsonData.data.st_partner_maintenance_config;",
											"    pm.expect(config).to.be.an('object');",
											"});",
											"",
											"const maintenanceConfig = jsonData.data.st_partner_maintenance_config;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(maintenanceConfig).to.have.property('is_maintenance');",
											"    pm.expect(maintenanceConfig).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate field types",
											"pm.test(\"Field types are correct\", function() {",
											"    pm.expect(maintenanceConfig.is_maintenance).to.be.a('boolean');",
											"    pm.expect(maintenanceConfig.__typename).to.be.a('string');",
											"});",
											"",
											"// 8. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(maintenanceConfig.__typename).to.equal('StPartnerMaintenanceConfig');",
											"});",
											"",
											"// 9. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['is_maintenance', '__typename'];",
											"    const actualFields = Object.keys(maintenanceConfig);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 10. Additional validation when in maintenance",
											"if (maintenanceConfig.is_maintenance) {",
											"    pm.test(\"Maintenance mode is active\", function() {",
											"        // Could add additional checks here for maintenance messages or timestamps",
											"        pm.expect(maintenanceConfig.is_maintenance).to.be.true;",
											"    });",
											"} else {",
											"    pm.test(\"Service is operational (not in maintenance)\", function() {",
											"        pm.expect(maintenanceConfig.is_maintenance).to.be.false;",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  st_partner_maintenance_config {\\n    is_maintenance\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_beneficiary_bank_accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const { st_partner_beneficiary_bank_accounts } = pm.response.json().data;",
											"    pm.expect(st_partner_beneficiary_bank_accounts).to.be.an('array').with.length.gt(0);",
											"    ",
											"    const account = st_partner_beneficiary_bank_accounts[0];",
											"    pm.expect(account).to.have.all.keys([",
											"        'sub_account', 'bank_name', 'short_bank_name', ",
											"        'full_name', 'bank_account', 'bank_id', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Bank account validation\", () => {",
											"    const { bank_account, bank_id, short_bank_name } = pm.response.json().data.st_partner_beneficiary_bank_accounts[0];",
											"    ",
											"    // Validate account number format",
											"    pm.expect(bank_account).to.match(/^[0-9]{10,14}$/);",
											"    ",
											"    // Validate bank code consistency",
											"    pm.expect(bank_id).to.equal(short_bank_name);",
											"    ",
											"    // Validate name format",
											"    pm.expect(pm.response.json().data.st_partner_beneficiary_bank_accounts[0].full_name)",
											"      .to.match(/^[A-Z\\s]+$/);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_beneficiary_bank_accounts\",\n    \"variables\": {},\n    \"query\": \"query st_partner_beneficiary_bank_accounts {\\n  st_partner_beneficiary_bank_accounts {\\n    sub_account\\n    bank_name\\n    short_bank_name\\n    full_name\\n    bank_account\\n    bank_id\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_frs_stock_account (status)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Validate response time",
											"pm.test(\"Response time is reasonable (<300ms)\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// Validate extensions timing",
											"pm.test(\"Extensions timing exists and is valid\", function() {",
											"    pm.expect(jsonData.extensions).to.have.property('timing');",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// Validate get_frs_stock_account exists",
											"pm.test(\"FRS stock account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_frs_stock_account');",
											"    const account = jsonData.data.get_frs_stock_account;",
											"    pm.expect(account).to.be.an('object');",
											"});",
											"",
											"const frsAccount = jsonData.data.get_frs_stock_account;",
											"",
											"// Validate required fields",
											"pm.test(\"FRS account has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'user_id',",
											"        'status',",
											"        'frs_partner_convert_promotion_type',",
											"        'frs_migration_accept_timestamp'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(frsAccount).to.have.property(field);",
											"    });",
											"});",
											"",
											"// Validate ID formats",
											"pm.test(\"IDs have correct format\", function() {",
											"    pm.expect(frsAccount.id).to.be.a('string');",
											"    pm.expect(frsAccount.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"    ",
											"    pm.expect(frsAccount.user_id).to.be.a('string');",
											"    pm.expect(frsAccount.user_id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"});",
											"",
											"// Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(frsAccount.status).to.be.a('string');",
											"    pm.expect(frsAccount.status).to.be.oneOf([",
											"        'APPROVED',",
											"        'PENDING',",
											"        'REJECTED',",
											"        'SUSPENDED',",
											"        'CLOSED'",
											"    ]);",
											"});",
											"",
											"// Validate promotion type",
											"pm.test(\"Promotion type is valid\", function() {",
											"    pm.expect(frsAccount.frs_partner_convert_promotion_type).to.be.a('string');",
											"    pm.expect(frsAccount.frs_partner_convert_promotion_type).to.be.oneOf([",
											"        'REWARD',",
											"        'BONUS',",
											"        'PROMOTION',",
											"        'OTHER'",
											"    ]);",
											"});",
											"",
											"// Validate timestamp format",
											"pm.test(\"Migration timestamp is valid\", function() {",
											"    pm.expect(frsAccount.frs_migration_accept_timestamp).to.be.a('string');",
											"    pm.expect(new Date(frsAccount.frs_migration_accept_timestamp).toString())",
											"      .to.not.equal('Invalid Date');",
											"    ",
											"    // Validate timestamp is in the past",
											"    const migrationDate = new Date(frsAccount.frs_migration_accept_timestamp);",
											"    pm.expect(migrationDate.getTime()).to.be.lessThan(Date.now());",
											"});",
											"",
											"// Additional validation for approved accounts",
											"if (frsAccount.status === \"APPROVED\") {",
											"    pm.test(\"Approved account has valid migration timestamp\", function() {",
											"        const migrationDate = new Date(frsAccount.frs_migration_accept_timestamp);",
											"        pm.expect(migrationDate.toString()).to.not.equal('Invalid Date');",
											"    });",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query get_frs_stock_account{get_frs_stock_account{id user_id status frs_partner_convert_promotion_type frs_migration_accept_timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_main_account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate main account object exists",
											"pm.test(\"Main account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_main_account');",
											"    const account = jsonData.data.st_partner_main_account;",
											"    pm.expect(account).to.be.an('object');",
											"});",
											"",
											"const mainAccount = jsonData.data.st_partner_main_account;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'uid',",
											"        'custody_code',",
											"        'status',",
											"        'binding_method',",
											"        'vsd_status'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(mainAccount).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 7. Validate ID format",
											"pm.test(\"ID has correct format\", function() {",
											"    pm.expect(mainAccount.id).to.be.a('string');",
											"    pm.expect(mainAccount.id).to.match(/^[a-z0-9]{20,25}$/); // UUID-like format",
											"});",
											"",
											"// 8. Validate timestamps",
											"pm.test(\"Timestamps are valid\", function() {",
											"    pm.expect(mainAccount.created_at).to.be.a('string');",
											"    pm.expect(new Date(mainAccount.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(mainAccount.updated_at).to.be.a('string');",
											"    pm.expect(new Date(mainAccount.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate updated_at is after created_at",
											"    const createdAt = new Date(mainAccount.created_at);",
											"    const updatedAt = new Date(mainAccount.updated_at);",
											"    pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"});",
											"",
											"// 9. Validate UID format",
											"pm.test(\"UID has correct format\", function() {",
											"    pm.expect(mainAccount.uid).to.be.a('string');",
											"    pm.expect(mainAccount.uid).to.match(/^U\\d{10}$/); // U followed by 10 digits",
											"});",
											"",
											"// 10. Validate custody code format",
											"pm.test(\"Custody code has correct format\", function() {",
											"    pm.expect(mainAccount.custody_code).to.be.a('string');",
											"    //pm.expect(mainAccount.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/); // 2 digits + 1 letter + 6 digits",
											"});",
											"",
											"// 11. Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(mainAccount.status).to.be.a('string');",
											"    pm.expect(mainAccount.status).to.be.oneOf([",
											"        'APPROVED',",
											"        'PENDING',",
											"        'REJECTED',",
											"        'SUSPENDED'",
											"    ]);",
											"});",
											"",
											"// 12. Validate binding method",
											"pm.test(\"Binding method is valid\", function() {",
											"    pm.expect(mainAccount.binding_method).to.be.a('string');",
											"    pm.expect(mainAccount.binding_method).to.be.oneOf([",
											"        'REGISTER',",
											"        'LINK',",
											"        'MANUAL',",
											"        'AUTO'",
											"    ]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query{st_partner_main_account{id created_at updated_at uid custody_code status binding_method vsd_status}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "watch_list_categories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Watchlist structure valid\", () => {",
											"    const { categories, has_next } = pm.response.json().data.watch_list_categories;",
											"    pm.expect(categories).to.be.an('array').with.lengthOf(1);",
											"    pm.expect(has_next).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Stock data validation\", () => {",
											"    const stocks = pm.response.json().data.watch_list_categories.categories[0].stocks;",
											"    ",
											"    stocks.forEach(stock => {",
											"        // Required fields",
											"        pm.expect(stock).to.have.all.keys([",
											"            'id', 'code', 'logo', 'exchange', ",
											"            'industry', 'name', 'price_data', '__typename'",
											"        ]);",
											"        ",
											"        // Price data checks",
											"        pm.expect(stock.price_data.change).to.be.a('number');",
											"        pm.expect(stock.price_data.latest_price).to.be.a('number').above(0);",
											"        ",
											"        // Logo URL security",
											"        pm.expect(stock.logo).to.match(/^https:\\/\\//);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"watch_list_categories\",\n    \"variables\": {\n        \"limit\": 10,\n        \"skip\": 0\n    },\n    \"query\": \"query watch_list_categories($limit: Int, $skip: Int, $stock_asset_id: ID, $is_include: Boolean) {\\n  watch_list_categories(\\n    limit: $limit\\n    skip: $skip\\n    stock_asset_id: $stock_asset_id\\n    is_include: $is_include\\n  ) {\\n    categories {\\n      id\\n      name\\n      order\\n      stocks {\\n        id\\n        code\\n        logo\\n        exchange\\n        industry\\n        name\\n        price_data {\\n          change\\n          latest_price\\n          percentage_change\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    has_next\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user_total_account_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate account balance object exists",
											"pm.test(\"Account balance object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_user_total_account_balance');",
											"    const balanceObj = jsonData.data.get_user_total_account_balance;",
											"    pm.expect(balanceObj).to.be.an('object');",
											"});",
											"",
											"const balanceData = jsonData.data.get_user_total_account_balance;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(balanceData).to.have.property('status');",
											"    pm.expect(balanceData).to.have.property('message');",
											"    pm.expect(balanceData).to.have.property('payload');",
											"    pm.expect(balanceData).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate status field",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(balanceData.status).to.equal('success');",
											"});",
											"",
											"// 9. Validate message field",
											"pm.test(\"Message is null\", function() {",
											"    pm.expect(balanceData.message).to.be.null;",
											"});",
											"",
											"// 10. Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(balanceData.__typename).to.equal('GetUserStockAccountBalanceResult');",
											"    pm.expect(balanceData.payload.__typename).to.equal('UserStockTotalAccountBalance');",
											"});",
											"",
											"// 11. Validate payload structure",
											"pm.test(\"Payload has correct structure\", function() {",
											"    const payload = balanceData.payload;",
											"    pm.expect(payload).to.be.an('object');",
											"    ",
											"    pm.expect(payload).to.have.property('total_account_balance');",
											"    pm.expect(payload.total_account_balance).to.be.a('number');",
											"    ",
											"    pm.expect(payload).to.have.property('growth_amount');",
											"    pm.expect(payload.growth_amount).to.be.a('number');",
											"    ",
											"    pm.expect(payload).to.have.property('growth_rate');",
											"    pm.expect(payload.growth_rate).to.be.a('number');",
											"});",
											"",
											"// 12. Validate numeric values",
											"pm.test(\"Numeric values are valid\", function() {",
											"    const payload = balanceData.payload;",
											"    ",
											"    // Validate balance is non-negative",
											"    pm.expect(payload.total_account_balance).to.be.at.least(0);",
											"    ",
											"    // Growth rate should be between -100 and 100",
											"    pm.expect(payload.growth_rate).to.be.at.least(-100);",
											"    pm.expect(payload.growth_rate).to.be.at.most(100);",
											"    ",
											"    // Validate growth calculation consistency",
											"    if (payload.total_account_balance !== 0) {",
											"        const expectedGrowthRate = (payload.growth_amount / (payload.total_account_balance - payload.growth_amount)) * 100;",
											"        pm.expect(payload.growth_rate).to.be.closeTo(expectedGrowthRate, 0.01);",
											"    }",
											"});",
											"",
											"// 13. Store values for future tests",
											"",
											"// 14. Validate no unexpected fields in payload",
											"pm.test(\"No extra fields in payload\", function() {",
											"    const expectedFields = ['total_account_balance', 'growth_amount', 'growth_rate', '__typename'];",
											"    const actualFields = Object.keys(balanceData.payload);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  get_user_total_account_balance {\\n    status\\n    message\\n    payload {\\n      total_account_balance\\n      growth_amount\\n      growth_rate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_frs_stock_account (FrsPortfolioType)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// Validate extensions timing",
											"pm.test(\"Extensions timing exists and is valid\", function() {",
											"    pm.expect(jsonData.extensions).to.have.property('timing');",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// Validate get_frs_stock_account exists",
											"pm.test(\"FRS stock account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_frs_stock_account');",
											"    const account = jsonData.data.get_frs_stock_account;",
											"    pm.expect(account).to.be.an('object');",
											"});",
											"",
											"const frsAccount = jsonData.data.get_frs_stock_account;",
											"",
											"// Validate required fields",
											"pm.test(\"FRS account has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'user_id',",
											"        'status',",
											"        'trading_account_number',",
											"        'cash_holdings',",
											"        'portfolio',",
											"        'proportion',",
											"        'created_at',",
											"        'updated_at',",
											"        '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(frsAccount).to.have.property(field);",
											"    });",
											"});",
											"",
											"// Validate ID formats",
											"pm.test(\"IDs have correct format\", function() {",
											"    pm.expect(frsAccount.id).to.be.a('string');",
											"    pm.expect(frsAccount.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"    ",
											"    pm.expect(frsAccount.user_id).to.be.a('string');",
											"    pm.expect(frsAccount.user_id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"});",
											"",
											"// Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(frsAccount.status).to.be.a('string');",
											"    pm.expect(frsAccount.status).to.be.oneOf([",
											"        'APPROVED',",
											"        'PENDING',",
											"        'REJECTED',",
											"        'SUSPENDED',",
											"        'CLOSED'",
											"    ]);",
											"});",
											"",
											"// Validate trading account number",
											"pm.test(\"Trading account number is valid\", function() {",
											"    pm.expect(frsAccount.trading_account_number).to.be.a('string');",
											"    pm.expect(frsAccount.trading_account_number).to.match(/^[A-Z0-9]{8,15}$/);",
											"});",
											"",
											"// Validate timestamps",
											"pm.test(\"Timestamps are valid\", function() {",
											"    pm.expect(frsAccount.created_at).to.be.a('string');",
											"    pm.expect(new Date(frsAccount.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(frsAccount.updated_at).to.be.a('string');",
											"    pm.expect(new Date(frsAccount.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate updated_at is after created_at",
											"    const createdAt = new Date(frsAccount.created_at);",
											"    const updatedAt = new Date(frsAccount.updated_at);",
											"    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename\", function() {",
											"    pm.expect(frsAccount.__typename).to.equal('FrsStockAccount');",
											"});",
											"",
											"// Validate cash holdings",
											"pm.test(\"Cash holdings structure is valid\", function() {",
											"    const cashHoldings = frsAccount.cash_holdings;",
											"    pm.expect(cashHoldings).to.be.an('object');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('buying_power');",
											"    pm.expect(cashHoldings.buying_power).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('total_available_market_value');",
											"    pm.expect(cashHoldings.total_available_market_value).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('total_account_balance');",
											"    pm.expect(cashHoldings.total_account_balance).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('__typename');",
											"    pm.expect(cashHoldings.__typename).to.equal('FrsCashHoldings');",
											"});",
											"",
											"// Validate portfolio array",
											"pm.test(\"Portfolio has valid structure\", function() {",
											"    pm.expect(frsAccount.portfolio).to.be.an('array');",
											"    ",
											"    if (frsAccount.portfolio.length > 0) {",
											"        const portfolioItem = frsAccount.portfolio[0];",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('logo');",
											"        pm.expect(portfolioItem.logo).to.be.a('string');",
											"        pm.expect(portfolioItem.logo).to.include('https://');",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('code');",
											"        pm.expect(portfolioItem.code).to.be.a('string');",
											"        pm.expect(portfolioItem.code).to.match(/^[A-Z]{2,4}$/);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('quantity');",
											"        pm.expect(portfolioItem.quantity).to.be.a('number');",
											"        pm.expect(portfolioItem.quantity).to.be.at.least(0);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('sellable_quantity');",
											"        pm.expect(portfolioItem.sellable_quantity).to.be.a('number');",
											"        pm.expect(portfolioItem.sellable_quantity).to.be.at.least(0);",
											"        pm.expect(portfolioItem.sellable_quantity).to.be.at.most(portfolioItem.quantity);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('average_price');",
											"        pm.expect(portfolioItem.average_price).to.be.a('number');",
											"        pm.expect(portfolioItem.average_price).to.be.at.least(0);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('name');",
											"        pm.expect(portfolioItem.name).to.be.a('string');",
											"        pm.expect(portfolioItem.name.length).to.be.at.least(3);",
											"        ",
											"        // Validate price data",
											"        pm.expect(portfolioItem).to.have.property('price_data');",
											"        const priceData = portfolioItem.price_data;",
											"        ",
											"        pm.expect(priceData).to.have.property('previous_close');",
											"        pm.expect(priceData.previous_close).to.be.a('number');",
											"        pm.expect(priceData.previous_close).to.be.above(0);",
											"        ",
											"        pm.expect(priceData).to.have.property('latest_price');",
											"        pm.expect(priceData.latest_price).to.be.a('number');",
											"        pm.expect(priceData.latest_price).to.be.above(0);",
											"        ",
											"        pm.expect(priceData).to.have.property('percentage_change');",
											"        pm.expect(priceData.percentage_change).to.be.a('number');",
											"        ",
											"        pm.expect(priceData).to.have.property('total_current_value');",
											"        pm.expect(priceData.total_current_value).to.be.a('number');",
											"        pm.expect(priceData.total_current_value).to.be.at.least(0);",
											"        ",
											"        // Validate total growth",
											"        pm.expect(priceData).to.have.property('total_growth');",
											"        const totalGrowth = priceData.total_growth;",
											"        ",
											"        pm.expect(totalGrowth).to.have.property('growth_amount');",
											"        pm.expect(totalGrowth.growth_amount).to.be.a('number');",
											"        ",
											"        pm.expect(totalGrowth).to.have.property('growth_rate');",
											"        pm.expect(totalGrowth.growth_rate).to.be.a('number');",
											"        ",
											"        pm.expect(totalGrowth).to.have.property('__typename');",
											"        pm.expect(totalGrowth.__typename).to.equal('FrsPortfolioTotalGrowth');",
											"        ",
											"        pm.expect(priceData).to.have.property('__typename');",
											"        pm.expect(priceData.__typename).to.equal('FrsPortfolioPriceData');",
											"        ",
											"        // Validate pending orders",
											"        pm.expect(portfolioItem).to.have.property('pending_buy');",
											"        pm.expect(portfolioItem.pending_buy).to.be.a('number');",
											"        pm.expect(portfolioItem.pending_buy).to.be.at.least(0);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('pending_sell');",
											"        pm.expect(portfolioItem.pending_sell).to.be.a('number');",
											"        pm.expect(portfolioItem.pending_sell).to.be.at.least(0);",
											"        ",
											"        pm.expect(portfolioItem).to.have.property('__typename');",
											"        pm.expect(portfolioItem.__typename).to.equal('FrsPortfolioType');",
											"    }",
											"});",
											"",
											"// Validate proportion array",
											"pm.test(\"Proportion array exists\", function() {",
											"    pm.expect(frsAccount.proportion).to.be.an('array');",
											"});",
											"",
											"",
											"// Additional validation for approved accounts",
											"if (frsAccount.status === \"APPROVED\") {",
											"    pm.test(\"Approved account has valid trading account number\", function() {",
											"        pm.expect(frsAccount.trading_account_number.length).to.be.at.least(8);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_frs_stock_account\",\n    \"variables\": {},\n    \"query\": \"query get_frs_stock_account {\\n  get_frs_stock_account {\\n    id\\n    user_id\\n    status\\n    trading_account_number\\n    cash_holdings {\\n      buying_power\\n      total_available_market_value\\n      total_account_balance\\n      __typename\\n    }\\n    portfolio {\\n      logo\\n      code\\n      quantity\\n      sellable_quantity\\n      average_price\\n      name\\n      price_data {\\n        previous_close\\n        latest_price\\n        percentage_change\\n        total_current_value\\n        total_growth {\\n          growth_amount\\n          growth_rate\\n          __typename\\n        }\\n        __typename\\n      }\\n      pending_buy\\n      pending_sell\\n      __typename\\n    }\\n    proportion {\\n      code\\n      percentage\\n      amount\\n      __typename\\n    }\\n    created_at\\n    updated_at\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user_total_account_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys(['data', 'extensions']);",
											"    pm.expect(response.data.get_user_total_account_balance).to.exist;",
											"});",
											"",
											"pm.test(\"Success state validation\", () => {",
											"    const result = pm.response.json().data.get_user_total_account_balance;",
											"    pm.expect(result.status).to.equal(\"success\");",
											"    pm.expect(result.message).to.be.null;",
											"    pm.expect(result.__typename).to.equal(\"GetUserStockAccountBalanceResult\");",
											"});",
											"",
											"pm.test(\"Balance data validation\", () => {",
											"    const payload = pm.response.json().data.get_user_total_account_balance.payload;",
											"    pm.expect(payload.total_account_balance).to.be.a('number').that.equals(0);",
											"    pm.expect(payload.growth_amount).to.be.a('number').that.equals(0);",
											"    pm.expect(payload.growth_rate).to.be.a('number').that.equals(0);",
											"    pm.expect(payload.__typename).to.equal(\"UserStockTotalAccountBalance\");",
											"});",
											"",
											"pm.test(\"Performance timing\", () => {",
											"    const timing = pm.response.json().extensions.timing;",
											"    pm.expect(timing).to.be.a('number').that.is.within(0, 100);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  get_user_total_account_balance {\\n    status\\n    message\\n    payload {\\n      total_account_balance\\n      growth_amount\\n      growth_rate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_frs_stock_account_total_balance_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys(['data', 'extensions']);",
											"    pm.expect(response.data.get_frs_stock_account_total_balance_history).to.exist;",
											"});",
											"",
											"pm.test(\"Growth data validation\", () => {",
											"    const growth = pm.response.json().data.get_frs_stock_account_total_balance_history.total_growth;",
											"    pm.expect(growth.growth_rate).to.be.a('number').that.equals(0);",
											"    pm.expect(growth.growth_amount).to.be.a('number').that.equals(0);",
											"    pm.expect(growth.__typename).to.equal(\"FrsTotalGrowthResult\");",
											"});",
											"",
											"pm.test(\"Type name validation\", () => {",
											"    const typeName = pm.response.json().data.get_frs_stock_account_total_balance_history.__typename;",
											"    pm.expect(typeName).to.equal(\"FrsStockAccountTotalBalanceHistoryResult\");",
											"});",
											"",
											"",
											"// Future-proofing test",
											"pm.test(\"Extensions structure\", () => {",
											"    const extensions = pm.response.json().extensions;",
											"    pm.expect(extensions).to.be.an('object');",
											"    pm.expect(extensions.timing).to.be.a('number');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_frs_stock_account_total_balance_history\",\n    \"variables\": {\n        \"from\": 0,\n        \"to\": 0\n    },\n    \"query\": \"query get_frs_stock_account_total_balance_history($from: Int!, $to: Int!) {\\n  get_frs_stock_account_total_balance_history(input: {from: $from, to: $to}) {\\n    total_growth {\\n      growth_rate\\n      growth_amount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_mfs_invested_in_stock",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has JSON content type\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data.get_mfs_invested_in_stock).to.exist;",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"});",
											"",
											"// 3. Validate Extensions",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 4. Validate Mutual Funds Object",
											"const mfData = jsonData.data.get_mfs_invested_in_stock;",
											"",
											"pm.test(\"MF data has correct typename\", function() {",
											"    pm.expect(mfData.__typename).to.equal(\"GetMFsInvestedInStockResult\");",
											"});",
											"",
											"pm.test(\"Status is success and message is null\", function() {",
											"    pm.expect(mfData.status).to.equal(\"success\");",
											"    pm.expect(mfData.message).to.be.null;",
											"});",
											"",
											"// 5. Validate Mutual Funds Array",
											"pm.test(\"MFs array exists and has items\", function() {",
											"    pm.expect(mfData.mfs).to.be.an('array');",
											"    pm.expect(mfData.mfs.length).to.be.at.least(1);",
											"});",
											"",
											"// 6. Validate Individual Mutual Funds",
											"mfData.mfs.forEach((fund, index) => {",
											"    const fundPrefix = `Fund ${index + 1} (${fund.code})`;",
											"    ",
											"    // 6.1 Validate basic fields",
											"    pm.test(`${fundPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'code', 'name', 'class', 'status',",
											"            'type', 'issuer', 'weight', 'year_growth_rate', '__typename'",
											"        ];",
											"        requiredFields.forEach(field => {",
											"            pm.expect(fund).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // 6.2 Validate ID format",
											"    pm.test(`${fundPrefix} has valid ID format`, function() {",
											"        pm.expect(fund.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId",
											"    });",
											"",
											"    // 6.3 Validate code and name",
											"    pm.test(`${fundPrefix} has valid code and name`, function() {",
											"        pm.expect(fund.code).to.match(/^[A-Z0-9-]+$/);",
											"        pm.expect(fund.name).to.be.a('string');",
											"        pm.expect(fund.name.length).to.be.at.least(5);",
											"    });",
											"",
											"    // 6.4 Validate classification",
											"    // pm.test(`${fundPrefix} has valid class`, function() {",
											"    //     pm.expect(fund.class).to.be.oneOf(['high_growth', 'balanced', 'fixed_income', 'other']);",
											"    // });",
											"",
											"    // 6.5 Validate status and type",
											"    // pm.test(`${fundPrefix} has valid status and type`, function() {",
											"    //     pm.expect(fund.status).to.be.oneOf(['active', 'inactive', 'closed']);",
											"    //     pm.expect(fund.type).to.be.oneOf(['equity', 'bond', 'mixed', 'other']);",
											"    // });",
											"",
											"    // 6.6 Validate issuer",
											"    pm.test(`${fundPrefix} has valid issuer`, function() {",
											"        pm.expect(fund.issuer.__typename).to.equal(\"FundIssuerResult\");",
											"        pm.expect(fund.issuer.id).to.match(/^[a-f0-9]{24}$/);",
											"        pm.expect(fund.issuer.name).to.be.a('string');",
											"        pm.expect(fund.issuer.name.length).to.be.at.least(5);",
											"        ",
											"        // Validate issuer image URL",
											"        pm.expect(fund.issuer.image).to.include('https://');",
											"        pm.expect(fund.issuer.image).to.include('.png');",
											"    });",
											"",
											"    // 6.7 Validate weight and growth rate",
											"    pm.test(`${fundPrefix} has valid financial metrics`, function() {",
											"        pm.expect(fund.weight).to.be.a('number');",
											"        pm.expect(fund.weight).to.be.within(0, 1);",
											"        ",
											"        pm.expect(fund.year_growth_rate).to.be.a('number');",
											"        pm.expect(fund.year_growth_rate).to.be.at.least(-1);",
											"        pm.expect(fund.year_growth_rate).to.be.at.most(1);",
											"    });",
											"});",
											"",
											"// 7. Validate Specific Funds",
											"pm.test(\"SSI-SCA fund has correct values\", function() {",
											"    const ssiFund = mfData.mfs.find(f => f.code === 'SSI-SCA');",
											"    pm.expect(ssiFund.name).to.equal(\"Quỹ Đầu Tư Lợi Thế Cạnh Tranh Bền Vững SSI\");",
											"    pm.expect(ssiFund.status).to.equal(\"inactive\");",
											"    pm.expect(ssiFund.weight).to.equal(0.0843);",
											"    // pm.expect(ssiFund.year_growth_rate).to.equal(0.0131);",
											"});",
											"",
											"pm.test(\"DCDE fund has correct values\", function() {",
											"    const dcdeFund = mfData.mfs.find(f => f.code === 'DCDE');",
											"    pm.expect(dcdeFund.name).to.equal(\"Dragon VF4\");",
											"    pm.expect(dcdeFund.issuer.name).to.include(\"Dragon Capital\");",
											"    pm.expect(dcdeFund.year_growth_rate).to.equal(0);",
											"});",
											"",
											"// 8. Validate No Unexpected Fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const allowedTopLevel = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(allowedTopLevel);",
											"    ",
											"    const allowedMFFields = ['status', 'message', 'mfs', '__typename'];",
											"    pm.expect(Object.keys(mfData)).to.eql(allowedMFFields);",
											"    ",
											"    const allowedFundFields = [",
											"        'id', 'code', 'name', 'class', 'status', 'type',",
											"        'issuer', 'weight', 'year_growth_rate', '__typename'",
											"    ];",
											"    ",
											"    mfData.mfs.forEach(fund => {",
											"        pm.expect(Object.keys(fund)).to.eql(allowedFundFields);",
											"        ",
											"        const allowedIssuerFields = ['id', 'name', 'image', '__typename'];",
											"        pm.expect(Object.keys(fund.issuer)).to.eql(allowedIssuerFields);",
											"    });",
											"});",
											"",
											"// 9. Store Test Data for Future Use",
											"pm.environment.set(\"mfs_count\", mfData.mfs.length);",
											"pm.environment.set(\"first_fund_code\", mfData.mfs[0].code);",
											"pm.environment.set(\"inactive_funds_count\", ",
											"    mfData.mfs.filter(f => f.status === 'inactive').length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_mfs_invested_in_stock\",\n    \"variables\": {\n        \"stock_code\": \"HPG\"\n    },\n    \"query\": \"query get_mfs_invested_in_stock($stock_code: String!) {\\n  get_mfs_invested_in_stock(stock_code: $stock_code) {\\n    status\\n    message\\n    mfs {\\n      id\\n      code\\n      name\\n      class\\n      status\\n      type\\n      issuer {\\n        id\\n        name\\n        image\\n        __typename\\n      }\\n      weight\\n      year_growth_rate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate orders object exists",
											"pm.test(\"Orders object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('orders');",
											"    const orders = jsonData.data.orders;",
											"    pm.expect(orders).to.be.an('object');",
											"});",
											"",
											"const orders = jsonData.data.orders;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(orders).to.have.property('edges');",
											"    pm.expect(orders).to.have.property('nodes');",
											"    pm.expect(orders).to.have.property('page_info');",
											"    pm.expect(orders).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate empty edges and nodes",
											"pm.test(\"Edges and nodes are empty arrays\", function() {",
											"    pm.expect(orders.edges).to.be.an('array').that.is.empty;",
											"    pm.expect(orders.nodes).to.be.an('array').that.is.empty;",
											"});",
											"",
											"// 8. Validate page_info structure",
											"pm.test(\"Page info has correct structure\", function() {",
											"    const pageInfo = orders.page_info;",
											"    pm.expect(pageInfo).to.be.an('object');",
											"    ",
											"    pm.expect(pageInfo).to.have.property('start_cursor');",
											"    pm.expect(pageInfo.start_cursor).to.be.null;",
											"    ",
											"    pm.expect(pageInfo).to.have.property('end_cursor');",
											"    pm.expect(pageInfo.end_cursor).to.be.null;",
											"    ",
											"    pm.expect(pageInfo).to.have.property('has_next_page');",
											"    pm.expect(pageInfo.has_next_page).to.be.false;",
											"    ",
											"    pm.expect(pageInfo).to.have.property('has_previous_page');",
											"    pm.expect(pageInfo.has_previous_page).to.be.false;",
											"    ",
											"    pm.expect(pageInfo).to.have.property('__typename');",
											"    pm.expect(pageInfo.__typename).to.equal('PageInfo');",
											"});",
											"",
											"// 9. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(orders.__typename).to.equal('OrderConnection');",
											"    pm.expect(orders.page_info.__typename).to.equal('PageInfo');",
											"});",
											"",
											"// 10. Validate no unexpected fields",
											"pm.test(\"No extra fields in orders object\", function() {",
											"    const expectedFields = ['edges', 'nodes', 'page_info', '__typename'];",
											"    const actualFields = Object.keys(orders);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Validate pagination state",
											"pm.test(\"Pagination indicates no results\", function() {",
											"    pm.expect(orders.page_info.has_next_page).to.be.false;",
											"    pm.expect(orders.page_info.has_previous_page).to.be.false;",
											"    pm.expect(orders.page_info.start_cursor).to.be.null;",
											"    pm.expect(orders.page_info.end_cursor).to.be.null;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"orders\",\n    \"variables\": {\n        \"first\": 10,\n        \"reverse\": true,\n        \"sort_keys\": \"CREATED_AT\",\n        \"query\": \"status:QUEUED,PENDING_ACCEPTED\"\n    },\n    \"query\": \"query orders($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: OrderSortKeys, $query: String) {\\n  orders(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        created_at\\n        updated_at\\n        instrument\\n        quantity\\n        executed_quantity\\n        matching_price\\n        total_amount_placed\\n        reward_amount\\n        total_pending_amount\\n        status\\n        price\\n        origin\\n        tax_amount\\n        matching_type\\n        bidask_type\\n        cancellable_at\\n        matching_time\\n        commission\\n        __typename\\n      }\\n      __typename\\n    }\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      instrument\\n      quantity\\n      executed_quantity\\n      matching_price\\n      total_amount_placed\\n      reward_amount\\n      total_pending_amount\\n      status\\n      price\\n      origin\\n      tax_amount\\n      matching_type\\n      bidask_type\\n      cancellable_at\\n      matching_time\\n      commission\\n      __typename\\n    }\\n    page_info {\\n      start_cursor\\n      end_cursor\\n      has_next_page\\n      has_previous_page\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "order_trading_fee_rate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate fee rate object exists",
											"pm.test(\"Fee rate data exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('order_trading_fee_rate');",
											"});",
											"",
											"// 6. Validate fee rate value",
											"pm.test(\"Fee rate is valid\", function() {",
											"    const feeRate = jsonData.data.order_trading_fee_rate;",
											"    ",
											"    // Check type",
											"    pm.expect(feeRate).to.be.a('number');",
											"    ",
											"});",
											"",
											"// 7. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['order_trading_fee_rate'];",
											"    const actualFields = Object.keys(jsonData.data);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 9. Additional validation for non-zero fees",
											"if (jsonData.data.order_trading_fee_rate > 0) {",
											"    pm.test(\"Non-zero fee has additional validation\", function() {",
											"        // Could add tier validation or other business rules here",
											"        pm.expect(jsonData.data.order_trading_fee_rate).to.be.above(0);",
											"    });",
											"}",
											"",
											"// 10. Log the fee rate for debugging",
											"console.log(\"Current trading fee rate: \", jsonData.data.order_trading_fee_rate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query order_trading_fee_rate{order_trading_fee_rate}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "termination_reports",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys(['data', 'extensions']);",
											"    pm.expect(response.data.termination_reports).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Empty reports validation\", () => {",
											"    const reports = pm.response.json().data.termination_reports;",
											"    pm.expect(reports).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"// Future-proofing test",
											"pm.test(\"Extensions structure\", () => {",
											"    const extensions = pm.response.json().extensions;",
											"    pm.expect(extensions).to.be.an('object');",
											"    pm.expect(extensions.timing).to.be.a('number');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"termination_reports\",\n    \"variables\": {},\n    \"query\": \"query termination_reports {\\n  termination_reports\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_frs_stock_account (FrsCashHoldings)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// Validate extensions timing",
											"pm.test(\"Extensions timing exists and is valid\", function() {",
											"    pm.expect(jsonData.extensions).to.have.property('timing');",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// Validate get_frs_stock_account exists",
											"pm.test(\"FRS stock account object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_frs_stock_account');",
											"    const account = jsonData.data.get_frs_stock_account;",
											"    pm.expect(account).to.be.an('object');",
											"});",
											"",
											"const frsAccount = jsonData.data.get_frs_stock_account;",
											"",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename\", function() {",
											"    pm.expect(frsAccount.__typename).to.equal('FrsStockAccount');",
											"});",
											"",
											"// Validate cash holdings",
											"pm.test(\"Cash holdings structure is valid\", function() {",
											"    const cashHoldings = frsAccount.cash_holdings;",
											"    pm.expect(cashHoldings).to.be.an('object');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('buying_power');",
											"    pm.expect(cashHoldings.buying_power).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('total_available_market_value');",
											"    pm.expect(cashHoldings.total_available_market_value).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('total_account_balance');",
											"    pm.expect(cashHoldings.total_account_balance).to.be.a('number');",
											"    ",
											"    pm.expect(cashHoldings).to.have.property('__typename');",
											"    pm.expect(cashHoldings.__typename).to.equal('FrsCashHoldings');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_frs_stock_account\",\n    \"variables\": {},\n    \"query\": \"query get_frs_stock_account {\\n  get_frs_stock_account {\\n    cash_holdings {\\n      buying_power\\n      total_available_market_value\\n      total_account_balance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "notifications Stock (Realstake api)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// Validate extensions timing",
											"pm.test(\"Extensions timing exists and is valid\", function() {",
											"    pm.expect(jsonData.extensions).to.have.property('timing');",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// Validate notifications exists",
											"pm.test(\"Notifications object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('notifications');",
											"    const notifications = jsonData.data.notifications;",
											"    pm.expect(notifications).to.be.an('object');",
											"});",
											"",
											"const notifications = jsonData.data.notifications;",
											"",
											"// Validate required fields",
											"pm.test(\"Notifications has all required fields\", function() {",
											"    pm.expect(notifications).to.have.property('docs');",
											"    pm.expect(notifications).to.have.property('unread_count');",
											"    pm.expect(notifications).to.have.property('__typename');",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(notifications.__typename).to.equal('NotificationsResult');",
											"});",
											"",
											"// Validate docs array",
											"pm.test(\"Docs array is valid\", function() {",
											"    pm.expect(notifications.docs).to.be.an('array');",
											"    ",
											"    if (notifications.docs.length > 0) {",
											"        const doc = notifications.docs[0];",
											"        pm.expect(doc).to.have.property('id');",
											"        pm.expect(doc.id).to.be.a('string');",
											"        pm.expect(doc.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"        ",
											"        pm.expect(doc).to.have.property('__typename');",
											"        pm.expect(doc.__typename).to.equal('NotificationResult');",
											"    }",
											"});",
											"",
											"// Validate unread_count",
											"pm.test(\"Unread count is valid\", function() {",
											"    pm.expect(notifications.unread_count).to.be.a('number');",
											"    pm.expect(notifications.unread_count).to.be.at.least(0);",
											"});",
											"",
											"// Additional validation when there are unread notifications",
											"if (notifications.unread_count > 0) {",
											"    pm.test(\"Unread notifications have corresponding docs\", function() {",
											"        pm.expect(notifications.docs.length).to.be.at.least(1);",
											"    });",
											"}",
											"",
											"// Store relevant values for future tests",
											"pm.environment.set(\"notifications_count\", notifications.docs.length);",
											"pm.environment.set(\"unread_notifications_count\", notifications.unread_count);",
											"",
											"// Validate empty state",
											"if (notifications.docs.length === 0) {",
											"    pm.test(\"Empty docs array should have unread_count 0\", function() {",
											"        pm.expect(notifications.unread_count).to.equal(0);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"notifications\",\n    \"variables\": {\n        \"input\": {\n            \"limit\": 100,\n            \"page\": 1,\n            \"filter\": {\n                \"category\": \"STOCK\"\n            }\n        }\n    },\n    \"query\": \"query notifications($input: GetNotificationsInput) {\\n  notifications(input: $input) {\\n    docs {\\n      id\\n      __typename\\n    }\\n    unread_count\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_sub_account_assets_over_view",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// Validate st_partner_sub_account_assets_over_view exists",
											"pm.test(\"Assets overview object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_assets_over_view');",
											"    const overview = jsonData.data.st_partner_sub_account_assets_over_view;",
											"    pm.expect(overview).to.be.an('object');",
											"    pm.expect(overview).to.have.property('sub_account_assets_over_view');",
											"    pm.expect(overview).to.have.property('__typename');",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    const overview = jsonData.data.st_partner_sub_account_assets_over_view;",
											"    pm.expect(overview.__typename).to.equal('StPartnerSubAccountAssetsOverViewResult');",
											"    ",
											"    overview.sub_account_assets_over_view.forEach(item => {",
											"        pm.expect(item.__typename).to.equal('StPartnerSubAccountAssetOverView');",
											"    });",
											"});",
											"",
											"// Validate sub_account_assets_over_view array",
											"const assets = jsonData.data.st_partner_sub_account_assets_over_view.sub_account_assets_over_view;",
											"",
											"pm.test(\"Assets array has items\", function() {",
											"    pm.expect(assets).to.be.an('array');",
											"    pm.expect(assets.length).to.be.at.least(1);",
											"});",
											"",
											"// Validate each asset item in the array",
											"assets.forEach((asset, index) => {",
											"    const itemPrefix = `Asset item ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${itemPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'created_at', 'updated_at', 'custody_code', ",
											"            'sub_account_id', 'sub_account_no', 'sub_account_type',",
											"            'market_value', 'cost_value', 'gain_loss_percent', ",
											"            'gain_loss_value', 'total_loan', 'total_money', 'cash'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(asset).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate ID format",
											"    pm.test(`${itemPrefix} has valid ID`, function() {",
											"        pm.expect(asset.id).to.be.a('string');",
											"        pm.expect(asset.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    });",
											"",
											"    // Validate timestamps",
											"    pm.test(`${itemPrefix} has valid timestamps`, function() {",
											"        pm.expect(asset.created_at).to.be.a('string');",
											"        pm.expect(new Date(asset.created_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(asset.updated_at).to.be.a('string');",
											"        pm.expect(new Date(asset.updated_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        // Check if created_at equals updated_at (assuming initial creation)",
											"        pm.expect(asset.created_at).to.equal(asset.updated_at);",
											"    });",
											"",
											"    // Validate custody code format",
											"    pm.test(`${itemPrefix} has valid custody code`, function() {",
											"        pm.expect(asset.custody_code).to.be.a('string');",
											"        //pm.expect(asset.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"    });",
											"",
											"    // Validate sub account fields",
											"    pm.test(`${itemPrefix} has valid sub account fields`, function() {",
											"        pm.expect(asset.sub_account_id).to.be.a('string');",
											"        pm.expect(asset.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(asset.sub_account_no).to.be.a('string');",
											"        pm.expect(asset.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        ",
											"        pm.expect(asset.sub_account_type).to.be.a('string');",
											"        pm.expect(asset.sub_account_type).to.match(/^[A-Z]{2}$/);",
											"    });",
											"",
											"    // Validate numeric financial fields - FIXED VERSION",
											"    pm.test(`${itemPrefix} has valid financial values`, function() {",
											"        // Validate positive numeric fields",
											"        const positiveFields = ['market_value', 'cost_value', 'total_loan', 'total_money', 'cash'];",
											"        positiveFields.forEach(field => {",
											"            pm.expect(asset[field]).to.be.a('number');",
											"            pm.expect(asset[field]).to.be.at.least(0);",
											"        });",
											"        ",
											"        // Validate gain/loss fields can be negative",
											"        pm.expect(asset.gain_loss_value).to.be.a('number');",
											"        ",
											"        pm.expect(asset.gain_loss_percent).to.be.a('number');",
											"        pm.expect(asset.gain_loss_percent).to.be.at.most(100);",
											"        pm.expect(asset.gain_loss_percent).to.be.at.least(-100);",
											"        ",
											"        // Validate calculation consistency (optional)",
											"        if (asset.cost_value !== 0) {",
											"            const expectedGainLoss = asset.market_value - asset.cost_value;",
											"            pm.expect(asset.gain_loss_value).to.equal(expectedGainLoss);",
											"            ",
											"            const calculatedPercent = (asset.gain_loss_value / asset.cost_value) * 100;",
											"            pm.expect(asset.gain_loss_percent).to.be.closeTo(calculatedPercent, 0.01);",
											"        }",
											"    });",
											"});",
											"",
											"// Validate all custody codes are the same (if expected)",
											"pm.test(\"All items have same custody code\", function() {",
											"    if (assets.length > 1) {",
											"        const firstCustodyCode = assets[0].custody_code;",
											"        assets.slice(1).forEach(asset => {",
											"            pm.expect(asset.custody_code).to.equal(firstCustodyCode);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  st_partner_sub_account_assets_over_view {\\n    sub_account_assets_over_view {\\n      id\\n      created_at\\n      updated_at\\n      custody_code\\n      sub_account_id\\n      sub_account_no\\n      sub_account_type\\n      market_value\\n      cost_value\\n      gain_loss_percent\\n      gain_loss_value\\n      total_loan\\n      total_money\\n      cash\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_market_information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate market information object exists",
											"pm.test(\"Market information object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_market_information');",
											"    const marketInfo = jsonData.data.get_market_information;",
											"    pm.expect(marketInfo).to.be.an('object');",
											"});",
											"",
											"const marketInfo = jsonData.data.get_market_information;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(marketInfo).to.have.property('status');",
											"    pm.expect(marketInfo).to.have.property('is_eod_settlement');",
											"    pm.expect(marketInfo).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate status field",
											"pm.test(\"Status is either OPENING or CLOSED\", function() {",
											"    pm.expect(marketInfo.status).to.be.a('string');",
											"    pm.expect(marketInfo.status).to.be.oneOf(['OPENING', 'CLOSED']);",
											"});",
											"",
											"// 9. Validate is_eod_settlement field",
											"pm.test(\"is_eod_settlement is boolean\", function() {",
											"    pm.expect(marketInfo.is_eod_settlement).to.be.a('boolean');",
											"});",
											"",
											"// 10. Validate __typename",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(marketInfo.__typename).to.equal('MarketInformation');",
											"});",
											"",
											"// 11. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['status', 'is_eod_settlement', '__typename'];",
											"    const actualFields = Object.keys(marketInfo);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"",
											"// 15. Additional validation for CLOSED status",
											"if (marketInfo.status === 'CLOSED') {",
											"    pm.test(\"Market is closed - additional validations\", function() {",
											"        // Add any specific tests for CLOSED status",
											"        // For example, might check if certain services are available",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"getMarketInformation\",\n    \"variables\": {},\n    \"query\": \"query getMarketInformation {\\n  get_market_information {\\n    status\\n    is_eod_settlement\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_stock_categories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate categories object exists",
											"pm.test(\"Stock categories object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_stock_categories');",
											"    const categories = jsonData.data.get_stock_categories;",
											"    pm.expect(categories).to.be.an('object');",
											"});",
											"",
											"const categories = jsonData.data.get_stock_categories;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(categories).to.have.property('docs');",
											"    pm.expect(categories).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate docs array",
											"pm.test(\"Categories array has items\", function() {",
											"    pm.expect(categories.docs).to.be.an('array');",
											"    pm.expect(categories.docs.length).to.be.at.least(1);",
											"});",
											"",
											"// 9. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(categories.__typename).to.equal('StockCategoryResults');",
											"    categories.docs.forEach(category => {",
											"        pm.expect(category.__typename).to.equal('StockCategoryDetailsResult');",
											"    });",
											"});",
											"",
											"// 10. Validate each category in the array",
											"categories.docs.forEach((category, index) => {",
											"    const categoryPrefix = `Category ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${categoryPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'name', 'description', 'icon',",
											"            'count', 'is_highlighted', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(category).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate ID format",
											"    pm.test(`${categoryPrefix} has valid ID`, function() {",
											"        pm.expect(category.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId",
											"    });",
											"",
											"    // Validate name and description",
											"    pm.test(`${categoryPrefix} has valid name and description`, function() {",
											"        pm.expect(category.name).to.be.a('string');",
											"        pm.expect(category.name.length).to.be.at.least(3);",
											"        ",
											"        pm.expect(category.description).to.be.a('string');",
											"        pm.expect(category.description.length).to.be.at.least(3);",
											"    });",
											"",
											"    // Validate icon path",
											"    pm.test(`${categoryPrefix} has valid icon path`, function() {",
											"        pm.expect(category.icon).to.be.a('string');",
											"        pm.expect(category.icon).to.match(/^\\/static\\/.+/);",
											"        pm.expect(category.icon).to.include('.svg');",
											"    });",
											"",
											"    // Validate count",
											"    pm.test(`${categoryPrefix} has valid count`, function() {",
											"        pm.expect(category.count).to.be.a('number');",
											"        pm.expect(category.count).to.be.at.least(0);",
											"    });",
											"",
											"    // Validate is_highlighted",
											"    pm.test(`${categoryPrefix} has valid highlight flag`, function() {",
											"        pm.expect(category.is_highlighted).to.be.a('boolean');",
											"    });",
											"});",
											"",
											"// 11. Validate specific category data",
											"pm.test(\"First category is 'Lựa chọn bởi các quỹ'\", function() {",
											"    const firstCategory = categories.docs[0];",
											"    pm.expect(firstCategory.name).to.equal('Lựa chọn bởi các quỹ');",
											"    pm.expect(firstCategory.description).to.include('Dưới');",
											"    pm.expect(firstCategory.icon).to.include('mf_choice.svg');",
											"    pm.expect(firstCategory.count).to.equal(30);",
											"    pm.expect(firstCategory.is_highlighted).to.be.true;",
											"});",
											"",
											"pm.test(\"Second category is 'VN30'\", function() {",
											"    const secondCategory = categories.docs[1];",
											"    pm.expect(secondCategory.name).to.equal('VN30');",
											"    pm.expect(secondCategory.description).to.include('Nhóm 30 cổ phiếu');",
											"    pm.expect(secondCategory.icon).to.include('vn30.svg');",
											"    pm.expect(secondCategory.count).to.equal(30);",
											"    pm.expect(secondCategory.is_highlighted).to.be.true;",
											"});",
											"",
											"// 12. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedCategoryFields = ['docs', '__typename'];",
											"    pm.expect(Object.keys(categories)).to.eql(expectedCategoryFields);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"GetStockCategories\",\n    \"variables\": {\n        \"filter\": \"\"\n    },\n    \"query\": \"query GetStockCategories($filter: String!) {\\n  get_stock_categories(input: {filter: $filter}) {\\n    docs {\\n      id\\n      name\\n      description\\n      icon\\n      count\\n      is_highlighted\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_stock_market_indexes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate market indexes object exists",
											"pm.test(\"Market indexes object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_stock_market_indexes');",
											"    const indexes = jsonData.data.get_stock_market_indexes;",
											"    pm.expect(indexes).to.be.an('object');",
											"});",
											"",
											"const indexes = jsonData.data.get_stock_market_indexes;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(indexes).to.have.property('docs');",
											"    pm.expect(indexes).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate docs array",
											"pm.test(\"Indexes array has items\", function() {",
											"    pm.expect(indexes.docs).to.be.an('array');",
											"    pm.expect(indexes.docs.length).to.be.at.least(1);",
											"});",
											"",
											"// 9. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(indexes.__typename).to.equal('StockMarketIndexResults');",
											"    indexes.docs.forEach(index => {",
											"        pm.expect(index.__typename).to.equal('StockMarketIndexDetailsResult');",
											"        pm.expect(index.price_data.__typename).to.equal('StockPriceDataResult');",
											"    });",
											"});",
											"",
											"// 10. Validate each index in the array",
											"indexes.docs.forEach((index, i) => {",
											"    const indexPrefix = `Index ${i + 1} (${index.code})`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${indexPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'code', 'name', 'exchange', 'price_data', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(index).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate code and name",
											"    pm.test(`${indexPrefix} has valid code and name`, function() {",
											"        pm.expect(index.code).to.be.a('string');",
											"        pm.expect(index.code.length).to.be.at.least(3);",
											"        pm.expect(index.name).to.be.a('string');",
											"        pm.expect(index.name.length).to.be.at.least(3);",
											"        pm.expect(index.name).to.include(index.code.replace('INDEX', '-Index'));",
											"    });",
											"",
											"    // Validate exchange",
											"    pm.test(`${indexPrefix} has valid exchange`, function() {",
											"        pm.expect(index.exchange).to.be.a('string');",
											"        pm.expect(index.exchange).to.be.oneOf(['HOSE', 'HNX', 'UPCOM']);",
											"    });",
											"",
											"    // Validate price data",
											"    pm.test(`${indexPrefix} has valid price data`, function() {",
											"        const priceData = index.price_data;",
											"        pm.expect(priceData.latest_price).to.be.a('number');",
											"        pm.expect(priceData.latest_price).to.be.above(0);",
											"        pm.expect(priceData.percentage_change).to.be.a('number');",
											"        pm.expect(priceData.percentage_change).to.be.at.least(-100);",
											"        pm.expect(priceData.percentage_change).to.be.at.most(100);",
											"    });",
											"});",
											"",
											"// 11. Validate specific index data",
											"pm.test(\"VN-Index has correct data\", function() {",
											"    const vnIndex = indexes.docs.find(i => i.code === 'VNINDEX');",
											"    pm.expect(vnIndex.name).to.equal('VN-Index');",
											"    pm.expect(vnIndex.exchange).to.equal('HOSE');",
											"    pm.expect(vnIndex.price_data.latest_price).to.be.a('number');",
											"    //pm.expect(vnIndex.price_data.percentage_change).to.equal(0);",
											"});",
											"",
											"pm.test(\"HNX-Index has correct data\", function() {",
											"    const hnxIndex = indexes.docs.find(i => i.code === 'HNXINDEX');",
											"    pm.expect(hnxIndex.name).to.equal('HNX-Index');",
											"    pm.expect(hnxIndex.exchange).to.equal('HNX');",
											"    //pm.expect(hnxIndex.price_data.percentage_change).to.equal(-0.06);",
											"});",
											"",
											"// 12. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedIndexFields = ['docs', '__typename'];",
											"    pm.expect(Object.keys(indexes)).to.eql(expectedIndexFields);",
											"    ",
											"    indexes.docs.forEach(index => {",
											"        const expectedIndexItemFields = ['code', 'name', 'exchange', 'price_data', '__typename'];",
											"        pm.expect(Object.keys(index)).to.eql(expectedIndexItemFields);",
											"    });",
											"});",
											"",
											"// 13. Store index data for future tests",
											"pm.environment.set(\"index_count\", indexes.docs.length);",
											"pm.environment.set(\"vnindex_price\", ",
											"    indexes.docs.find(i => i.code === 'VNINDEX').price_data.latest_price);",
											"",
											"// 14. Validate price-change relationship",
											"pm.test(\"All indexes have valid price/change data\", function() {",
											"    indexes.docs.forEach(index => {",
											"        const price = index.price_data.latest_price;",
											"        const change = index.price_data.percentage_change;",
											"        ",
											"        if (change > 0) {",
											"            pm.expect(price).to.be.above(0, `${index.code} price should be positive when change is positive`);",
											"        } else if (change < 0) {",
											"            pm.expect(price).to.be.above(0, `${index.code} price should be positive when change is negative`);",
											"        }",
											"        // Change = 0 has no price requirement",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"GetStockMarketIndexList\",\n    \"variables\": {\n        \"filter\": \"HOSE\"\n    },\n    \"query\": \"query GetStockMarketIndexList($filter: String!) {\\n  get_stock_market_indexes(input: {filter: $filter}) {\\n    docs {\\n      code\\n      name\\n      exchange\\n      price_data {\\n        latest_price\\n        percentage_change\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_broker_house_recommendations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate recommendations object exists",
											"pm.test(\"Recommendations object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_broker_house_recommendations');",
											"    const recommendations = jsonData.data.get_broker_house_recommendations;",
											"    pm.expect(recommendations).to.be.an('object');",
											"});",
											"",
											"const recommendations = jsonData.data.get_broker_house_recommendations;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(recommendations).to.have.property('status');",
											"    pm.expect(recommendations).to.have.property('message');",
											"    pm.expect(recommendations).to.have.property('broker_house_recommendations');",
											"    pm.expect(recommendations).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate field types",
											"pm.test(\"Field types are correct\", function() {",
											"    pm.expect(recommendations.status).to.be.a('string');",
											"    pm.expect(recommendations.message).to.be.null;",
											"    pm.expect(recommendations.broker_house_recommendations).to.be.an('array');",
											"    pm.expect(recommendations.__typename).to.be.a('string');",
											"});",
											"",
											"// 9. Validate status value",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(recommendations.status).to.equal('success');",
											"});",
											"",
											"// 10. Validate empty recommendations array",
											"pm.test(\"Recommendations array is empty\", function() {",
											"    pm.expect(recommendations.broker_house_recommendations.length).to.equal(0);",
											"});",
											"",
											"// 11. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(recommendations.__typename).to.equal('GetBrokerHouseRecommendationsResult');",
											"});",
											"",
											"// 12. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['status', 'message', 'broker_house_recommendations', '__typename'];",
											"    const actualFields = Object.keys(recommendations);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 13. Additional validation for non-empty recommendations",
											"if (recommendations.broker_house_recommendations.length > 0) {",
											"    pm.test(\"Recommendation items have valid structure\", function() {",
											"        recommendations.broker_house_recommendations.forEach(item => {",
											"            pm.expect(item).to.have.property('broker_house_id');",
											"            pm.expect(item).to.have.property('broker_house_name');",
											"            pm.expect(item).to.have.property('recommendation_score');",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_broker_house_recommendations\",\n    \"variables\": {\n        \"limit\": 10\n    },\n    \"query\": \"query get_broker_house_recommendations($limit: Int) {\\n  get_broker_house_recommendations(limit: $limit) {\\n    status\\n    message\\n    broker_house_recommendations {\\n      stock_asset {\\n        name\\n        code\\n        logo\\n        trading_info {\\n          last_price\\n          __typename\\n        }\\n        __typename\\n      }\\n      analyst {\\n        sell\\n        buy\\n        hold\\n        average_target_price\\n        expectation\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_hot_stock_category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate hot stock category object exists",
											"pm.test(\"Hot stock category object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_hot_stock_category');",
											"    const hotStocks = jsonData.data.get_hot_stock_category;",
											"    pm.expect(hotStocks).to.be.an('object');",
											"});",
											"",
											"const hotStocks = jsonData.data.get_hot_stock_category;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(hotStocks).to.have.property('status');",
											"    pm.expect(hotStocks).to.have.property('message');",
											"    pm.expect(hotStocks).to.have.property('category');",
											"    pm.expect(hotStocks).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate status field",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(hotStocks.status).to.equal('success');",
											"});",
											"",
											"// 9. Validate message field",
											"pm.test(\"Message is null for successful response\", function() {",
											"    pm.expect(hotStocks.message).to.be.null;",
											"});",
											"",
											"// 10. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(hotStocks.__typename).to.equal('GetHotStockCategory');",
											"    pm.expect(hotStocks.category.__typename).to.equal('StockCategoryDetailsResult');",
											"    hotStocks.category.list.forEach(stock => {",
											"        pm.expect(stock.__typename).to.equal('StockDetailsResult');",
											"        pm.expect(stock.price_data.__typename).to.equal('StockPriceDataResult');",
											"    });",
											"});",
											"",
											"// 11. Validate category object",
											"pm.test(\"Category has valid structure\", function() {",
											"    const category = hotStocks.category;",
											"    ",
											"    pm.expect(category.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    pm.expect(new Date(category.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(category.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId",
											"    pm.expect(category.description).to.be.a('string');",
											"    pm.expect(category.description.length).to.be.at.least(10);",
											"});",
											"",
											"// 12. Validate stock list",
											"pm.test(\"Stock list has items\", function() {",
											"    pm.expect(hotStocks.category.list).to.be.an('array');",
											"    pm.expect(hotStocks.category.list.length).to.be.at.least(1);",
											"});",
											"",
											"// 13. Validate each stock in the list",
											"hotStocks.category.list.forEach((stock, index) => {",
											"    const stockPrefix = `Stock ${index + 1} (${stock.code})`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${stockPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'code', 'name', 'logo', 'price_data', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(stock).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate stock code and name",
											"    // pm.test(`${stockPrefix} has valid code and name`, function() {",
											"    //     pm.expect(stock.code).to.match(/^[A-Z]{2,4}$/);",
											"    //     pm.expect(stock.name).to.match(/^CTCP/); // Starts with CTCP",
											"    // });",
											"",
											"    // Validate logo URL",
											"    pm.test(`${stockPrefix} has valid logo URL`, function() {",
											"        pm.expect(stock.logo).to.include('https://');",
											"        //pm.expect(stock.logo).to.include(stock.code);",
											"        pm.expect(stock.logo).to.include('.png');",
											"    });",
											"",
											"    // Validate price data",
											"    pm.test(`${stockPrefix} has valid price data`, function() {",
											"        const priceData = stock.price_data;",
											"        ",
											"        pm.expect(priceData.latest_price).to.be.a('number');",
											"        pm.expect(priceData.latest_price).to.be.above(0);",
											"        ",
											"        pm.expect(priceData.change).to.be.a('number');",
											"        ",
											"        pm.expect(priceData.percentage_change).to.be.a('number');",
											"        pm.expect(priceData.percentage_change).to.be.at.least(-100);",
											"        pm.expect(priceData.percentage_change).to.be.at.most(100);",
											"        ",
											"        // Validate change calculation",
											"        if (priceData.percentage_change !== 0 && priceData.latest_price !== 0) {",
											"            const calculatedChange = (priceData.change / (priceData.latest_price - priceData.change)) * 100;",
											"            pm.expect(priceData.percentage_change).to.be.closeTo(calculatedChange, 0.01);",
											"        }",
											"    });",
											"});",
											"",
											"// 14. Validate specific stock data",
											"pm.test(\"FLC stock has correct data\", function() {",
											"    const flcStock = hotStocks.category.list.find(s => s.code === 'FLC');",
											"    pm.expect(flcStock.name).to.equal('CTCP Tập đoàn FLC');",
											"    // pm.expect(flcStock.price_data.latest_price).to.equal(3500);",
											"    // pm.expect(flcStock.price_data.change).to.equal(0);",
											"    // pm.expect(flcStock.price_data.percentage_change).to.equal(0);",
											"});",
											"",
											"pm.test(\"FPT stock has correct data\", function() {",
											"    const fptStock = hotStocks.category.list.find(s => s.code === 'FPT');",
											"    pm.expect(fptStock.name).to.equal('CTCP FPT');",
											"    // pm.expect(fptStock.price_data.latest_price).to.equal(117100);",
											"    // pm.expect(fptStock.price_data.change).to.equal(600);",
											"    // pm.expect(fptStock.price_data.percentage_change).to.equal(0.52);",
											"});",
											"",
											"// 15. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedHotStockFields = ['status', 'message', 'category', '__typename'];",
											"    pm.expect(Object.keys(hotStocks)).to.eql(expectedHotStockFields);",
											"    ",
											"    const expectedCategoryFields = ['updated_at', 'id', 'description', 'list', '__typename'];",
											"    pm.expect(Object.keys(hotStocks.category)).to.eql(expectedCategoryFields);",
											"});",
											"",
											"// 16. Store hot stock data for future tests",
											"pm.environment.set(\"hot_stocks_count\", hotStocks.category.list.length);",
											"pm.environment.set(\"last_update\", hotStocks.category.updated_at);",
											"pm.environment.set(\"top_stock_code\", hotStocks.category.list[0].code);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_hot_stock_category\",\n    \"variables\": {},\n    \"query\": \"query get_hot_stock_category {\\n  get_hot_stock_category {\\n    status\\n    message\\n    category {\\n      updated_at\\n      id\\n      description\\n      list {\\n        code\\n        name\\n        logo\\n        price_data {\\n          latest_price\\n          change\\n          percentage_change\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "search_stocks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate search results object exists",
											"pm.test(\"Search results object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('search_stocks');",
											"    const searchResults = jsonData.data.search_stocks;",
											"    pm.expect(searchResults).to.be.an('object');",
											"});",
											"",
											"const searchResults = jsonData.data.search_stocks;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(searchResults).to.have.property('status');",
											"    pm.expect(searchResults).to.have.property('message');",
											"    pm.expect(searchResults).to.have.property('stocks');",
											"    pm.expect(searchResults).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate status field",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(searchResults.status).to.equal('success');",
											"});",
											"",
											"// 9. Validate message field",
											"pm.test(\"Message is null for successful response\", function() {",
											"    pm.expect(searchResults.message).to.be.null;",
											"});",
											"",
											"// 10. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(searchResults.__typename).to.equal('SearchStocksResult');",
											"    searchResults.stocks.forEach(stock => {",
											"        pm.expect(stock.__typename).to.equal('StockDetailsResult');",
											"        pm.expect(stock.price_data.__typename).to.equal('StockPriceDataResult');",
											"    });",
											"});",
											"",
											"// 11. Validate stocks array",
											"pm.test(\"Stocks array has items\", function() {",
											"    pm.expect(searchResults.stocks).to.be.an('array');",
											"    pm.expect(searchResults.stocks.length).to.be.at.least(1);",
											"});",
											"",
											"// 12. Validate each stock in the results",
											"searchResults.stocks.forEach((stock, index) => {",
											"    const stockPrefix = `Stock ${index + 1} (${stock.code})`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${stockPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'code', 'name', 'logo', 'price_data', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(stock).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate stock code and name",
											"    pm.test(`${stockPrefix} has valid code and name`, function() {",
											"        pm.expect(stock.code).to.match(/^[A-Z]{2,4}$/);",
											"        pm.expect(stock.name).to.match(/^CTCP/); // Should start with CTCP",
											"        pm.expect(stock.name.length).to.be.at.least(10);",
											"    });",
											"",
											"",
											"    // Validate price data",
											"    pm.test(`${stockPrefix} has valid price data`, function() {",
											"        const priceData = stock.price_data;",
											"        ",
											"        pm.expect(priceData.latest_price).to.be.a('number');",
											"        pm.expect(priceData.latest_price).to.be.above(0);",
											"        ",
											"        pm.expect(priceData.change).to.be.a('number');",
											"        ",
											"        pm.expect(priceData.percentage_change).to.be.a('number');",
											"        pm.expect(priceData.percentage_change).to.be.at.least(-100);",
											"        pm.expect(priceData.percentage_change).to.be.at.most(100);",
											"        ",
											"        // Validate change calculation",
											"        if (priceData.percentage_change !== 0) {",
											"            const calculatedPercentage = (priceData.change / (priceData.latest_price - priceData.change)) * 100;",
											"            pm.expect(priceData.percentage_change).to.be.closeTo(calculatedPercentage, 0.01);",
											"        }",
											"    });",
											"});",
											"",
											"// 13. Validate specific stock data",
											"pm.test(\"BHP stock has correct data\", function() {",
											"    const bhpStock = searchResults.stocks.find(s => s.code === 'BHP');",
											"    pm.expect(bhpStock.name).to.equal('CTCP Bia Hà Nội - Hải Phòng');",
											"    //pm.expect(bhpStock.price_data.latest_price).to.equal(7100);",
											"    //pm.expect(bhpStock.price_data.change).to.equal(0);",
											"    //pm.expect(bhpStock.price_data.percentage_change).to.equal(0);",
											"});",
											"",
											"pm.test(\"HHP stock has correct negative change\", function() {",
											"    const hhpStock = searchResults.stocks.find(s => s.code === 'HHP');",
											"    pm.expect(hhpStock.name).to.equal('CTCP Giấy Hoàng Hà Hải Phòng');",
											"    //pm.expect(hhpStock.price_data.change).to.equal(-40);",
											"    //pm.expect(hhpStock.price_data.percentage_change).to.equal(-0.46);",
											"});",
											"",
											"// 14. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedSearchFields = ['status', 'message', 'stocks', '__typename'];",
											"    pm.expect(Object.keys(searchResults)).to.eql(expectedSearchFields);",
											"    ",
											"    searchResults.stocks.forEach(stock => {",
											"        const expectedStockFields = ['code', 'name', 'logo', 'price_data', '__typename'];",
											"        pm.expect(Object.keys(stock)).to.eql(expectedStockFields);",
											"    });",
											"});",
											"",
											"",
											"// 16. Validate all stocks have Vietnamese company names",
											"pm.test(\"All stocks have Vietnamese company names starting with CTCP\", function() {",
											"    searchResults.stocks.forEach(stock => {",
											"        pm.expect(stock.name).to.match(/^CTCP/);",
											"        pm.expect(stock.name).to.match(/[\\p{L}\\s-]+/u); // Contains Vietnamese characters",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"searchStock\",\n    \"variables\": {\n        \"keywords\": \"HP\"\n    },\n    \"query\": \"query searchStock($keywords: String!) {\\n  search_stocks(keywords: $keywords) {\\n    status\\n    message\\n    stocks {\\n      code\\n      name\\n      logo\\n      price_data {\\n        latest_price\\n        change\\n        percentage_change\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Normal (NM)",
					"item": [
						{
							"name": "st_partner_sub_account_portfolio (Normal)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// Validate st_partner_sub_account_portfolio exists",
											"pm.test(\"Portfolio object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_portfolio');",
											"    const portfolio = jsonData.data.st_partner_sub_account_portfolio;",
											"    pm.expect(portfolio).to.be.an('object');",
											"    pm.expect(portfolio).to.have.property('sub_account_portfolio');",
											"    pm.expect(portfolio).to.have.property('__typename');",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    const portfolio = jsonData.data.st_partner_sub_account_portfolio;",
											"    pm.expect(portfolio.__typename).to.equal('StPartnerSubAccountPortfolioResult');",
											"});",
											"",
											"const portfolioItems = jsonData.data.st_partner_sub_account_portfolio.sub_account_portfolio;",
											"",
											"// Validate portfolio array exists and has items",
											"pm.test(\"Portfolio has items\", function() {",
											"    pm.expect(portfolioItems).to.be.an('array');",
											"    pm.expect(portfolioItems.length).to.be.at.least(1);",
											"});",
											"",
											"// Validate each portfolio item",
											"portfolioItems.forEach((item, index) => {",
											"    const itemPrefix = `Portfolio item ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${itemPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'created_at', 'updated_at', 'custody_code',",
											"            'sub_account_id', 'sub_account_no', 'sub_account_type',",
											"            'symbol', 'restrict_quantity', 'await_restrict_quantity',",
											"            'trade_quantity', 'total_volume', 'cost_price', 'market_value',",
											"            'cost_value', 'gain_loss_percent', 'gain_loss_value',",
											"            'allocation', 'logo', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(item).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate ID and timestamps",
											"    pm.test(`${itemPrefix} has valid ID and timestamps`, function() {",
											"        pm.expect(item.id).to.be.a('string');",
											"        pm.expect(item.id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(item.created_at).to.be.a('string');",
											"        pm.expect(new Date(item.created_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(item.updated_at).to.be.a('string');",
											"        pm.expect(new Date(item.updated_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(item.created_at).to.equal(item.updated_at);",
											"    });",
											"",
											"    // Validate account identifiers",
											"    pm.test(`${itemPrefix} has valid account identifiers`, function() {",
											"        //pm.expect(item.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"        pm.expect(item.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"        pm.expect(item.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        pm.expect(item.sub_account_type).to.match(/^[A-Z]{2}$/);",
											"    });",
											"",
											"    // Validate stock symbol and logo",
											"    pm.test(`${itemPrefix} has valid symbol and logo`, function() {",
											"        pm.expect(item.symbol).to.be.a('string');",
											"        pm.expect(item.symbol).to.match(/^[A-Z]{2,4}$/);",
											"        ",
											"        pm.expect(item.logo).to.be.a('string');",
											"        pm.expect(item.logo).to.include('https://');",
											"        pm.expect(item.logo).to.include(item.symbol);",
											"    });",
											"",
											"    // Validate quantity fields",
											"    pm.test(`${itemPrefix} has valid quantity values`, function() {",
											"        const quantityFields = [",
											"            'restrict_quantity', 'await_restrict_quantity',",
											"            'trade_quantity', 'total_volume'",
											"        ];",
											"        ",
											"        quantityFields.forEach(field => {",
											"            pm.expect(item[field]).to.be.a('number');",
											"            pm.expect(item[field]).to.be.at.least(0);",
											"        });",
											"        ",
											"        // Validate total_volume is sum of trade_quantity and restrict quantities",
											"        const expectedTotalVolume = item.trade_quantity + item.restrict_quantity;",
											"        pm.expect(item.total_volume).to.equal(expectedTotalVolume);",
											"    });",
											"",
											"    // Validate price and value fields",
											"    pm.test(`${itemPrefix} has valid price and value fields`, function() {",
											"        pm.expect(item.cost_price).to.be.a('number');",
											"        pm.expect(item.cost_price).to.be.above(0);",
											"        ",
											"        pm.expect(item.market_value).to.be.a('number');",
											"        pm.expect(item.market_value).to.be.at.least(0);",
											"        ",
											"        pm.expect(item.cost_value).to.be.a('number');",
											"        pm.expect(item.cost_value).to.be.at.least(0);",
											"    });",
											"",
											"    // Validate gain/loss calculations",
											"    pm.test(`${itemPrefix} has correct gain/loss calculations`, function() {",
											"        const expectedGainLossValue = item.market_value - item.cost_value;",
											"        pm.expect(item.gain_loss_value).to.equal(expectedGainLossValue);",
											"        ",
											"        if (item.cost_value !== 0) {",
											"            const expectedGainLossPercent = (item.gain_loss_value / item.cost_value) * 100;",
											"            pm.expect(item.gain_loss_percent).to.be.closeTo(expectedGainLossPercent, 0.01);",
											"        }",
											"    });",
											"",
											"    // Validate allocation",
											"    pm.test(`${itemPrefix} has valid allocation`, function() {",
											"        pm.expect(item.allocation).to.be.a('number');",
											"        pm.expect(item.allocation).to.be.at.least(0);",
											"        pm.expect(item.allocation).to.be.at.most(1);",
											"    });",
											"",
											"    // Validate __typename",
											"    pm.test(`${itemPrefix} has correct __typename`, function() {",
											"        pm.expect(item.__typename).to.equal('StPartnerSubAccountPortfolio');",
											"    });",
											"});",
											"",
											"// Validate allocation sums to approximately 1 (100%)",
											"pm.test(\"Portfolio allocations sum to approximately 1\", function() {",
											"    const totalAllocation = portfolioItems.reduce((sum, item) => sum + item.allocation, 0);",
											"    pm.expect(totalAllocation).to.be.closeTo(1, 0.001);",
											"});",
											"",
											"// Validate all items belong to same sub-account",
											"pm.test(\"All portfolio items belong to same sub-account\", function() {",
											"    if (portfolioItems.length > 1) {",
											"        const firstItem = portfolioItems[0];",
											"        portfolioItems.slice(1).forEach(item => {",
											"            pm.expect(item.sub_account_id).to.equal(firstItem.sub_account_id);",
											"            pm.expect(item.sub_account_no).to.equal(firstItem.sub_account_no);",
											"            pm.expect(item.custody_code).to.equal(firstItem.custody_code);",
											"        });",
											"    }",
											"});",
											"",
											"// Store portfolio data for future tests",
											"pm.environment.set(\"portfolio_items_count\", portfolioItems.length);",
											"pm.environment.set(\"sub_account_no\", portfolioItems[0].sub_account_no);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_sub_account_portfolio\",\n    \"variables\": {\n        \"input\": {\n            \"sub_account_no\": \"0001122911NM\",\n            \"sort_by\": \"ALLOCATION\",\n            \"sort_type\": \"DESC\"\n        }\n    },\n    \"query\": \"query st_partner_sub_account_portfolio($input: GetSubAccountPortfolioInput!) {\\n  st_partner_sub_account_portfolio(input: $input) {\\n    sub_account_portfolio {\\n      id\\n      created_at\\n      updated_at\\n      custody_code\\n      sub_account_id\\n      sub_account_no\\n      sub_account_type\\n      symbol\\n      restrict_quantity\\n      await_restrict_quantity\\n      trade_quantity\\n      total_volume\\n      cost_price\\n      market_value\\n      cost_value\\n      gain_loss_percent\\n      gain_loss_value\\n      allocation\\n      logo\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_sub_account_asset_detail (Normal)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// Validate st_partner_sub_account_asset_detail exists",
											"pm.test(\"Asset detail object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_asset_detail');",
											"    const assetDetail = jsonData.data.st_partner_sub_account_asset_detail;",
											"    pm.expect(assetDetail).to.be.an('object');",
											"});",
											"",
											"const asset = jsonData.data.st_partner_sub_account_asset_detail;",
											"",
											"// Validate required fields",
											"pm.test(\"Asset detail has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id', 'created_at', 'updated_at', 'custody_code',",
											"        'sub_account_id', 'sub_account_no', 'sub_account_type',",
											"        'market_value', 'cost_value', 'gain_loss_percent',",
											"        'gain_loss_value', 'total_loan', 'total_money', 'cash',",
											"        't0', 't1', 't2', 'buying_power', 'pending_match_value',",
											"        'pending_receive_value', 'loan_inday', 'margin_debt',",
											"        'custody_fee', 'other_fee', 'dividend_value', 'blocked_value',",
											"        'holding_stock', 'total_asset', 'nav', 'fee',",
											"        'cash_advanced', 'status', '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(asset).to.have.property(field);",
											"    });",
											"});",
											"",
											"// Validate ID and timestamps",
											"pm.test(\"ID and timestamps are valid\", function() {",
											"    pm.expect(asset.id).to.be.a('string');",
											"    pm.expect(asset.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(asset.created_at).to.be.a('string');",
											"    pm.expect(new Date(asset.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(asset.updated_at).to.be.a('string');",
											"    pm.expect(new Date(asset.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(asset.created_at).to.equal(asset.updated_at);",
											"});",
											"",
											"// Validate account identifiers",
											"pm.test(\"Account identifiers are valid\", function() {",
											"    //pm.expect(asset.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"    pm.expect(asset.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"    pm.expect(asset.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"    pm.expect(asset.sub_account_type).to.match(/^[A-Z]{2}$/);",
											"});",
											"",
											"// Validate numeric financial fields",
											"pm.test(\"Financial values are valid\", function() {",
											"    // Positive value fields",
											"    const positiveFields = [",
											"        'market_value', 'cost_value', 'total_loan', 'total_money',",
											"        'cash', 't0', 't1', 't2', 'buying_power', 'pending_match_value',",
											"        'pending_receive_value', 'loan_inday', 'margin_debt', 'custody_fee',",
											"        'other_fee', 'dividend_value', 'blocked_value', 'holding_stock',",
											"        'total_asset', 'nav', 'fee', 'cash_advanced'",
											"    ];",
											"    ",
											"    positiveFields.forEach(field => {",
											"        pm.expect(asset[field]).to.be.a('number');",
											"        pm.expect(asset[field]).to.be.at.least(0);",
											"    });",
											"    ",
											"    // Gain/loss fields can be negative",
											"    pm.expect(asset.gain_loss_value).to.be.a('number');",
											"    pm.expect(asset.gain_loss_percent).to.be.a('number');",
											"    pm.expect(asset.gain_loss_percent).to.be.at.least(-100);",
											"    pm.expect(asset.gain_loss_percent).to.be.at.most(100);",
											"});",
											"",
											"// Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(asset.status).to.be.a('string');",
											"    pm.expect(asset.status).to.match(/^[A-Z]$/);",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename\", function() {",
											"    pm.expect(asset.__typename).to.equal('StPartnerSubAccountAssetDetail');",
											"});",
											"",
											"// Validate financial calculations",
											"pm.test(\"Financial calculations are consistent\", function() {",
											"    // Validate gain/loss calculations",
											"    const expectedGainLoss = asset.market_value - asset.cost_value;",
											"    pm.expect(asset.gain_loss_value).to.equal(expectedGainLoss);",
											"    ",
											"    if (asset.cost_value !== 0) {",
											"        const expectedPercent = (asset.gain_loss_value / asset.cost_value) * 100;",
											"        pm.expect(asset.gain_loss_percent).to.be.closeTo(expectedPercent, 0.01);",
											"    }",
											"      ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_sub_account_asset_detail\",\n    \"variables\": {\n        \"input\": {\n            \"sub_account_no\": \"0001122911NM\"\n        }\n    },\n    \"query\": \"query st_partner_sub_account_asset_detail($input: GetSubAccountAssetDetailInput!) {\\n  st_partner_sub_account_asset_detail(input: $input) {\\n    id\\n    created_at\\n    updated_at\\n    custody_code\\n    sub_account_id\\n    sub_account_no\\n    sub_account_type\\n    market_value\\n    cost_value\\n    gain_loss_percent\\n    gain_loss_value\\n    total_loan\\n    total_money\\n    cash\\n    t0\\n    t1\\n    t2\\n    buying_power\\n    pending_match_value\\n    pending_receive_value\\n    loan_inday\\n    margin_debt\\n    custody_fee\\n    other_fee\\n    dividend_value\\n    blocked_value\\n    holding_stock\\n    total_asset\\n    nav\\n    fee\\n    cash_advanced\\n    status\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_order_webview (SELL - Normal)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Webview response structure valid\", () => {",
											"    const webview = pm.response.json().data.st_partner_order_webview;",
											"    pm.expect(webview).to.be.an('object');",
											"    pm.expect(webview).to.have.all.keys([",
											"        'webview_url', 'expired_at', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"URL validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    ",
											"    // Basic URL checks",
											"    pm.expect(url).to.match(/^https:\\/\\//);",
											"    pm.expect(url).to.include('token=eyJ');",
											"    ",
											"    // Parameter validation",
											"    pm.expect(url).to.include('subNumber=0001122911NM');",
											"    pm.expect(url).to.include('sellBuyType=SELL');",
											"    pm.expect(url).to.include('symbol=HPG');",
											"});",
											"",
											"pm.test(\"Expiration time valid\", () => {",
											"    const expiry = pm.response.json().data.st_partner_order_webview.expired_at;",
											"    pm.expect(expiry).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    ",
											"    // Check if expiration is in future",
											"    const expiryDate = new Date(expiry);",
											"    pm.expect(expiryDate).to.be.above(new Date());",
											"});",
											"",
											"pm.test(\"JWT token basic validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    const token = url.match(/token=([^&]+)/)[1];",
											"    ",
											"    // Verify JWT structure (header.payload.signature)",
											"    const parts = token.split('.');",
											"    pm.expect(parts.length).to.equal(3);",
											"    pm.expect(parts[0]).to.match(/^eyJ/);  // JWT header",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_order_webview\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911NM\",\n        \"symbol\": \"HPG\",\n        \"action\": \"SELL\"\n    },\n    \"query\": \"query st_partner_order_webview($sub_account_no: String!, $symbol: String, $action: ST_PARTNER_ORDER_WEBVIEW_ACTION!) {\\n  st_partner_order_webview(\\n    input: {sub_account_no: $sub_account_no, symbol: $symbol, action: $action}\\n  ) {\\n    webview_url\\n    expired_at\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_order_webview (BUY - Normal)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Webview response structure valid\", () => {",
											"    const webview = pm.response.json().data.st_partner_order_webview;",
											"    pm.expect(webview).to.be.an('object');",
											"    pm.expect(webview).to.have.all.keys([",
											"        'webview_url', 'expired_at', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"URL validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    ",
											"    // Basic URL checks",
											"    pm.expect(url).to.match(/^https:\\/\\//);",
											"    pm.expect(url).to.include('token=eyJ');",
											"    ",
											"    // Parameter validation",
											"    pm.expect(url).to.include('subNumber=0001122911NM');",
											"    pm.expect(url).to.include('sellBuyType=BUY');",
											"    pm.expect(url).to.include('symbol=HPG');",
											"});",
											"",
											"pm.test(\"Expiration time valid\", () => {",
											"    const expiry = pm.response.json().data.st_partner_order_webview.expired_at;",
											"    pm.expect(expiry).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    ",
											"    // Check if expiration is in future",
											"    const expiryDate = new Date(expiry);",
											"    pm.expect(expiryDate).to.be.above(new Date());",
											"});",
											"",
											"pm.test(\"JWT token basic validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    const token = url.match(/token=([^&]+)/)[1];",
											"    ",
											"    // Verify JWT structure (header.payload.signature)",
											"    const parts = token.split('.');",
											"    pm.expect(parts.length).to.equal(3);",
											"    pm.expect(parts[0]).to.match(/^eyJ/);  // JWT header",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_order_webview\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911NM\",\n        \"symbol\": \"HPG\",\n        \"action\": \"BUY\"\n    },\n    \"query\": \"query st_partner_order_webview($sub_account_no: String!, $symbol: String, $action: ST_PARTNER_ORDER_WEBVIEW_ACTION!) {\\n  st_partner_order_webview(\\n    input: {sub_account_no: $sub_account_no, symbol: $symbol, action: $action}\\n  ) {\\n    webview_url\\n    expired_at\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_withdraw_fees (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(info).to.be.an('object');",
											"    pm.expect(info).to.have.all.keys([",
											"        'cash', 'withdrawable_balance', 'transfer_fee',",
											"        'advance_fee', '__typename'",
											"    ]);",
											"    ",
											"    // Validate advance_fee structure",
											"    pm.expect(info.advance_fee).to.have.all.keys([",
											"        'advance_amount', 'fee_advance', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Balance validation\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Withdrawable can't exceed cash",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"    ",
											"    // Check if balance difference is reasonable",
											"    const balanceDiff = cash - withdrawable_balance;",
											"    pm.expect(balanceDiff).to.be.within(0, cash);",
											"});",
											"",
											"pm.test(\"Fee validation\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Fees should be non-negative",
											"    pm.expect(info.transfer_fee).to.be.at.least(0);",
											"    pm.expect(info.advance_fee.advance_amount).to.be.at.least(0);",
											"    pm.expect(info.advance_fee.fee_advance).to.be.at.least(0);",
											"    ",
											"    // Log if fees are zero (might need verification)",
											"    if (info.transfer_fee === 0) {",
											"        console.log(\"Note: Transfer fee is currently zero\");",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_withdraw_fees\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911NM\",\n        \"amount\": 50000,\n        \"bankID\": \"VIETCAPITALBANK\"\n    },\n    \"query\": \"query get_finavi_withdraw_fees($subAccountNo: String!, $bankID: String!, $amount: Float!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    transfer_fee(bankID: $bankID, amount: $amount)\\n    advance_fee(amount: $amount) {\\n      advance_amount\\n      fee_advance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_transfer_internal_fees (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const res = pm.response.json();",
											"    pm.expect(res.data.st_partner_sub_account_withdrawal_info).to.include({",
											"        \"__typename\": \"StPartnerSubAccountWithdrawalInfo\"",
											"    });",
											"    ",
											"    const { cash, withdrawable_balance } = res.data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"});",
											"",
											"pm.test(\"Advance fee validation\", () => {",
											"    const advanceFee = pm.response.json().data.st_partner_sub_account_withdrawal_info.advance_fee;",
											"    pm.expect(advanceFee).to.deep.include({",
											"        advance_amount: 0,",
											"        fee_advance: 0,",
											"        __typename: \"StPartnerSubAccountWithdrawalAdvanceFee\"",
											"    });",
											"});",
											"",
											"pm.test(\"Balance difference check\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    const diff = cash - withdrawable_balance;",
											"    pm.expect(diff).to.not.equal(0);  // Verify if this expected hold amount",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_transfer_internal_fees\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911NM\",\n        \"amount\": 10000\n    },\n    \"query\": \"query get_finavi_transfer_internal_fees($subAccountNo: String!, $amount: Float!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    advance_fee(amount: $amount) {\\n      advance_amount\\n      fee_advance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_validate_withdrawal_info (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validation response structure\", () => {",
											"    const validation = pm.response.json().data.st_partner_validate_withdrawal_info;",
											"    pm.expect(validation).to.be.an('object');",
											"    pm.expect(validation).to.have.all.keys([",
											"        'status', 'error_message', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Success state validation\", () => {",
											"    const { status, error_message } = pm.response.json().data.st_partner_validate_withdrawal_info;",
											"    ",
											"    // Verify success state",
											"    if (status === \"success\") {",
											"        pm.expect(error_message).to.be.null;",
											"    } else {",
											"        pm.expect(error_message).to.be.a('string').that.is.not.empty;",
											"    }",
											"    ",
											"    // Validate status values",
											"    pm.expect(status).to.be.oneOf([\"success\", \"error\"]);",
											"});",
											"",
											"pm.test(\"Type consistency\", () => {",
											"    const typeName = pm.response.json().data.st_partner_validate_withdrawal_info.__typename;",
											"    pm.expect(typeName).to.equal(\"StPartnerValidateWithdrawalInfoResult\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_validate_withdrawal_info\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 50000,\n            \"sub_account\": \"0001122911NM\",\n            \"bank_id\": \"VIETCAPITALBANK\"\n        }\n    },\n    \"query\": \"mutation st_partner_validate_withdrawal_info($input: StPartnerValidateWithdrawalInfoInput!) {\\n  st_partner_validate_withdrawal_info(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_send_withdrawal_otp (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_send_withdrawal_otp');",
											"});",
											"",
											"// Validate OTP sending result",
											"const otpResult = response.data.st_partner_send_withdrawal_otp;",
											"pm.test(\"OTP sending result is valid\", function() {",
											"    pm.expect(otpResult).to.have.all.keys(",
											"        'status',",
											"        'error_message',",
											"        'transaction_id',",
											"        '__typename'",
											"    );",
											"    pm.expect(otpResult.status).to.equal('success');",
											"    pm.expect(otpResult.error_message).to.be.null;",
											"    pm.expect(otpResult.__typename).to.equal('StPartnerSendWithdrawalOTPResult');",
											"});",
											"",
											"",
											"// Store transaction ID for OTP verification",
											"pm.test(\"Store transaction ID\", function() {",
											"    pm.collectionVariables.set(\"withdrawal_transaction_id\", otpResult.transaction_id);",
											"    console.log(\"Stored transaction ID for OTP verification:\", otpResult.transaction_id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_send_withdrawal_otp\",\n    \"variables\": {\n        \"amount\": 5000,\n        \"sub_account\": \"0001122911NM\"\n    },\n    \"query\": \"mutation st_partner_send_withdrawal_otp($sub_account: String!, $amount: Int!) {\\n  st_partner_send_withdrawal_otp(sub_account: $sub_account, amount: $amount) {\\n    status\\n    error_message\\n    transaction_id\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_verify_withdrawal_otp (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_verify_withdrawal_otp');",
											"});",
											"",
											"// Validate OTP verification result",
											"const verifyResult = response.data.st_partner_verify_withdrawal_otp;",
											"pm.test(\"OTP verification result is valid\", function() {",
											"    pm.expect(verifyResult).to.have.all.keys(",
											"        'status',",
											"        'error_message',",
											"        '__typename'",
											"    );",
											"    pm.expect(verifyResult.status).to.equal('success');",
											"    pm.expect(verifyResult.error_message).to.be.null;",
											"    pm.expect(verifyResult.__typename).to.equal('StPartnerVerifyWithdrawalOTPResult');",
											"});",
											"",
											"// Verify this matches the previous transaction ID (if applicable)",
											"pm.test(\"Transaction context is consistent\", function() {",
											"    const storedTransactionId = pm.collectionVariables.get(\"withdrawal_transaction_id\");",
											"    if (storedTransactionId) {",
											"        console.log(\"Verified OTP for transaction:\", storedTransactionId);",
											"        pm.expect(verifyResult.status).to.equal('success');",
											"    }",
											"});",
											"",
											"// Clear transaction ID after successful verification",
											"pm.test(\"Clean up transaction ID\", function() {",
											"    pm.collectionVariables.unset(\"withdrawal_transaction_id\");",
											"    console.log(\"Cleared transaction ID after successful verification\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_verify_withdrawal_otp\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 50000,\n            \"bank_id\": \"VIETCAPITALBANK\",\n            \"otp\": \"111111\",\n            \"sub_account\": \"0001122911NM\",\n            \"transaction_id\": \"{{withdrawal_transaction_id}}\"\n        }\n    },\n    \"query\": \"mutation st_partner_verify_withdrawal_otp($input: StPartnerVerifyWithdrawalOTPInput!) {\\n  st_partner_verify_withdrawal_otp(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_withdrawable_balance (0001122911NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(info).to.be.an('object');",
											"    pm.expect(info).to.have.all.keys([",
											"        'cash', 'withdrawable_balance', ",
											"        'withdrawal_limit_per_time', ",
											"        'withdrawal_limit_per_day',",
											"        '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Balance validation\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Withdrawable can't exceed cash",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"    ",
											"    // Verify all values are integers",
											"    pm.expect(cash % 1).to.equal(0);",
											"    pm.expect(withdrawable_balance % 1).to.equal(0);",
											"});",
											"",
											"pm.test(\"Withdrawal limits check\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Confirm limits are positive",
											"    pm.expect(info.withdrawal_limit_per_time).to.be.above(0);",
											"    pm.expect(info.withdrawal_limit_per_day).to.be.above(0);",
											"    ",
											"    // Log warning if limits seem unusually high",
											"    if (info.withdrawal_limit_per_time > 1000000000) {",
											"        console.warn(\"Extremely high per-transaction limit detected\");",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_withdrawable_balance\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911NM\"\n    },\n    \"query\": \"query get_finavi_withdrawable_balance($subAccountNo: String!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    withdrawal_limit_per_time\\n    withdrawal_limit_per_day\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_transfer_cash_internal (NM -> MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer result structure valid\", () => {",
											"    const transfer = pm.response.json().data.st_partner_transfer_cash_internal;",
											"    pm.expect(transfer).to.be.an('object');",
											"    pm.expect(transfer).to.have.all.keys([",
											"        'status', 'error_message', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Success state validation\", () => {",
											"    const { status, error_message } = pm.response.json().data.st_partner_transfer_cash_internal;",
											"    ",
											"    pm.expect(status).to.equal(\"success\");",
											"    pm.expect(error_message).to.be.null;",
											"});",
											"",
											"pm.test(\"Type name consistency\", () => {",
											"    const typeName = pm.response.json().data.st_partner_transfer_cash_internal.__typename;",
											"    pm.expect(typeName).to.equal(\"TransferCashInternalResult\");",
											"});",
											"",
											"// Optional: Future-proof status check",
											"pm.test(\"Status value is valid\", () => {",
											"    const validStatuses = [\"success\", \"error\", \"pending\"];",
											"    const status = pm.response.json().data.st_partner_transfer_cash_internal.status;",
											"    pm.expect(status).to.be.oneOf(validStatuses);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_transfer_cash_internal\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 10000,\n            \"source_account\": \"0001122911NM\", \n            \"destination_account\": \"0001122911MG\"\n        }\n    },\n    \"query\": \"mutation st_partner_transfer_cash_internal($input: TransferCashInternalInput!) {\\n  st_partner_transfer_cash_internal(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_internal_stock_transfer_list (NM -> MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response structure",
											"pm.test(\"Response has correct structure\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Check top-level structure",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_internal_stock_transfer_list');",
											"    ",
											"    // Check internal_stock_transfer_list",
											"    const transferList = response.data.st_partner_internal_stock_transfer_list;",
											"    pm.expect(transferList).to.have.property('internal_stock_transfer_list').that.is.an('array');",
											"    pm.expect(transferList).to.have.property('__typename', 'StPartnerInternalStockTransferListResult');",
											"    ",
											"    // Validate each item in the array",
											"    const items = transferList.internal_stock_transfer_list;",
											"    pm.expect(items.length).to.be.greaterThan(0);",
											"    ",
											"    items.forEach(item => {",
											"        pm.expect(item).to.have.property('stock_code').that.is.a('string');",
											"        pm.expect(item).to.have.property('sub_account').that.is.a('string');",
											"        pm.expect(item).to.have.property('can_transfer_quantity').that.is.a('number');",
											"        pm.expect(item).to.have.property('__typename', 'StPartnerInternalStockTransfer');",
											"    });",
											"});",
											"",
											"",
											"// Validate quantities are positive numbers",
											"pm.test(\"All transfer quantities are positive\", function () {",
											"    const response = pm.response.json();",
											"    const items = response.data.st_partner_internal_stock_transfer_list.internal_stock_transfer_list;",
											"    ",
											"    items.forEach(item => {",
											"        pm.expect(item.can_transfer_quantity).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_internal_stock_transfer_list\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911NM\" //\"0001122911MG\"\n    },\n    \"query\": \"query st_partner_internal_stock_transfer_list($subAccountNo: String!) {\\n  st_partner_internal_stock_transfer_list(subAccountNo: $subAccountNo) {\\n    ... on StPartnerSubAccountNotFoundError {\\n      error_message\\n      __typename\\n    }\\n    ... on StPartnerInternalStockTransferListResult {\\n      internal_stock_transfer_list {\\n        stock_code\\n        sub_account\\n        can_transfer_quantity\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_transfer_internal_stock (NM -> MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate transfer object exists",
											"pm.test(\"Transfer object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_transfer_internal_stock');",
											"    const transfer = jsonData.data.st_partner_transfer_internal_stock;",
											"    pm.expect(transfer).to.be.an('object');",
											"});",
											"",
											"const transferResult = jsonData.data.st_partner_transfer_internal_stock;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(transferResult).to.have.property('status');",
											"    pm.expect(transferResult).to.have.property('error_message');",
											"    pm.expect(transferResult).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate field types",
											"pm.test(\"Field types are correct\", function() {",
											"    pm.expect(transferResult.status).to.be.a('string');",
											"    pm.expect(transferResult.error_message).to.be.null;",
											"    pm.expect(transferResult.__typename).to.be.a('string');",
											"});",
											"",
											"// 8. Validate status value",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(transferResult.status).to.equal('success');",
											"});",
											"",
											"// 9. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(transferResult.__typename).to.equal('StPartnerInternalStockTransferResult');",
											"});",
											"",
											"// 10. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['status', 'error_message', '__typename'];",
											"    const actualFields = Object.keys(transferResult);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Additional validation for error cases",
											"if (transferResult.status !== \"success\") {",
											"    pm.test(\"Error message should exist when status is not success\", function() {",
											"        pm.expect(transferResult.error_message).to.not.be.null;",
											"        pm.expect(transferResult.error_message).to.be.a('string');",
											"    });",
											"}",
											"",
											"// 12. Store transfer status for future tests",
											"pm.environment.set(\"last_transfer_status\", transferResult.status);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_transfer_internal_stock\",\n    \"variables\": {\n        \"input\": {\n            \"quantity\": 1,\n            \"stock_code\": \"AAA\",\n            \"sub_account_no\": \"0001122911NM\",\n            \"receive_sub_account_no\": \"0001122911MG\"\n        }\n    },\n    \"query\": \"mutation st_partner_transfer_internal_stock($input: StPartnerTransferInternalStockInput!) {\\n  st_partner_transfer_internal_stock(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_open_order_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate open order history object exists",
											"pm.test(\"Open order history object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_open_order_history');",
											"    const orderHistory = jsonData.data.st_partner_open_order_history;",
											"    pm.expect(orderHistory).to.be.an('object');",
											"});",
											"",
											"const orderHistory = jsonData.data.st_partner_open_order_history;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(orderHistory).to.have.property('st_partner_orders');",
											"    pm.expect(orderHistory).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate empty orders array",
											"pm.test(\"Orders array is empty\", function() {",
											"    pm.expect(orderHistory.st_partner_orders).to.be.an('array').that.is.empty;",
											"});",
											"",
											"// 8. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(orderHistory.__typename).to.equal('StPartnerGetListOrderResult');",
											"});",
											"",
											"// 9. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['st_partner_orders', '__typename'];",
											"    const actualFields = Object.keys(orderHistory);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 10. Store empty state for future tests",
											"pm.environment.set(\"has_open_orders\", false);",
											"pm.environment.set(\"open_orders_count\", orderHistory.st_partner_orders.length);",
											"",
											"// 11. Additional validation when orders exist (for future use)",
											"if (orderHistory.st_partner_orders.length > 0) {",
											"    pm.test(\"Orders have valid structure\", function() {",
											"        orderHistory.st_partner_orders.forEach(order => {",
											"            pm.expect(order).to.have.property('order_id');",
											"            pm.expect(order.order_id).to.be.a('string');",
											"            // Add more order field validations as needed",
											"        });",
											"    });",
											"} else {",
											"    pm.test(\"No open orders exist for this partner\", function() {",
											"        pm.expect(orderHistory.st_partner_orders.length).to.equal(0);",
											"    });",
											"}",
											"",
											"// 12. Validate response against schema (optional)",
											"pm.test(\"Response matches expected schema\", function() {",
											"    const schema = {",
											"        type: \"object\",",
											"        properties: {",
											"            data: {",
											"                type: \"object\",",
											"                properties: {",
											"                    st_partner_open_order_history: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            st_partner_orders: {",
											"                                type: \"array\",",
											"                                items: {} // Empty array expected",
											"                            },",
											"                            __typename: {",
											"                                type: \"string\",",
											"                                pattern: \"^StPartnerGetListOrderResult$\"",
											"                            }",
											"                        },",
											"                        required: [\"st_partner_orders\", \"__typename\"]",
											"                    }",
											"                },",
											"                required: [\"st_partner_open_order_history\"]",
											"            }",
											"        },",
											"        required: [\"data\"]",
											"    };",
											"    ",
											"    pm.expect(jsonData).to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_open_order_history\",\n    \"variables\": {\n        \"sub_account\": \"0001122911NM\"\n    },\n    \"query\": \"query st_partner_open_order_history($sub_account: String!) {\\n  st_partner_open_order_history(input: {sub_account: $sub_account}) {\\n    st_partner_orders {\\n      id\\n      created_at\\n      updated_at\\n      stt\\n      order_id\\n      symbol\\n      sub_account\\n      custody_code\\n      transaction_number\\n      transaction_date\\n      transaction_time\\n      execute_type\\n      price_type\\n      quote_price\\n      order_quantity\\n      remain_quantity\\n      execute_quantity\\n      match_price\\n      cancel_quantity\\n      adjust_quantity\\n      trade_place\\n      place_value\\n      execute_value\\n      order_status\\n      order_type\\n      cost_price\\n      fee\\n      tax_fee\\n      actual_fee\\n      provisional_value\\n      real_value\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_order_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate order history object exists",
											"pm.test(\"Order history object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_order_history');",
											"    const orderHistory = jsonData.data.st_partner_order_history;",
											"    pm.expect(orderHistory).to.be.an('object');",
											"});",
											"",
											"const orderHistory = jsonData.data.st_partner_order_history;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(orderHistory).to.have.property('st_partner_orders');",
											"    pm.expect(orderHistory).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate orders array",
											"pm.test(\"Orders array has items\", function() {",
											"    pm.expect(orderHistory.st_partner_orders).to.be.an('array');",
											"    pm.expect(orderHistory.st_partner_orders.length).to.be.at.least(1);",
											"});",
											"",
											"// 8. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(orderHistory.__typename).to.equal('StPartnerGetListOrderResult');",
											"    orderHistory.st_partner_orders.forEach(order => {",
											"        pm.expect(order.__typename).to.equal('StPartnerOrder');",
											"    });",
											"});",
											"",
											"// 9. Validate each order in the array",
											"orderHistory.st_partner_orders.forEach((order, index) => {",
											"    const orderPrefix = `Order ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${orderPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'created_at', 'updated_at', 'stt', 'order_id', 'symbol',",
											"            'sub_account', 'custody_code', 'transaction_number', 'transaction_date',",
											"            'transaction_time', 'execute_type', 'price_type', 'quote_price',",
											"            'order_quantity', 'remain_quantity', 'execute_quantity', 'match_price',",
											"            'cancel_quantity', 'adjust_quantity', 'trade_place', 'place_value',",
											"            'execute_value', 'order_status', 'order_type', 'cost_price', 'fee',",
											"            'tax_fee', 'actual_fee', 'provisional_value', 'real_value', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(order).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate ID and timestamps",
											"    pm.test(`${orderPrefix} has valid ID and timestamps`, function() {",
											"        pm.expect(order.id).to.be.a('string');",
											"        pm.expect(order.id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(order.created_at).to.be.a('string');",
											"        pm.expect(new Date(order.created_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(order.updated_at).to.be.a('string');",
											"        pm.expect(new Date(order.updated_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(order.created_at).to.equal(order.updated_at);",
											"    });",
											"",
											"    // Validate order identifiers",
											"    pm.test(`${orderPrefix} has valid identifiers`, function() {",
											"        pm.expect(order.order_id).to.match(/^\\d{15}$/);",
											"        pm.expect(order.symbol).to.match(/^[A-Z]{2,4}$/);",
											"        pm.expect(order.sub_account).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        //pm.expect(order.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"        pm.expect(order.transaction_number).to.match(/^F\\d{9}$/);",
											"    });",
											"",
											"    // Validate dates and times",
											"    pm.test(`${orderPrefix} has valid dates and times`, function() {",
											"        pm.expect(order.transaction_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/);",
											"        pm.expect(order.transaction_time).to.match(/^\\d{2}:\\d{2}:\\d{2}$/);",
											"    });",
											"",
											"    // Validate numeric fields",
											"    // pm.test(`${orderPrefix} has valid numeric values`, function() {",
											"    //     const numericFields = [",
											"    //         'stt', 'quote_price', 'order_quantity', 'remain_quantity',",
											"    //         'execute_quantity', 'match_price', 'cancel_quantity', 'adjust_quantity',",
											"    //         'place_value', 'execute_value', 'order_status', 'cost_price', 'fee',",
											"    //         'tax_fee', 'actual_fee', 'provisional_value', 'real_value'",
											"    //     ];",
											"        ",
											"    //     numericFields.forEach(field => {",
											"    //         pm.expect(order[field]).to.be.a('number');",
											"    //         pm.expect(order[field]).to.be.at.least(0).unless(() => {",
											"    //             // Allow negative values for these fields if needed",
											"    //             return ['cost_price', 'match_price'].includes(field);",
											"    //         });",
											"    //     });",
											"    // });",
											"",
											"    // Validate order type and status",
											"    pm.test(`${orderPrefix} has valid order type and status`, function() {",
											"        pm.expect(order.execute_type).to.be.oneOf(['NB', 'NS', 'NC']); // Buy, Sell, Cancel",
											"        pm.expect(order.price_type).to.be.oneOf(['LO', 'ATO', 'ATC']); // Limit, At Open, At Close",
											"        pm.expect(order.order_type).to.be.oneOf(['N', 'M', 'C']); // Normal, Market, Cancel",
											"        pm.expect(order.order_status).to.be.a('number');",
											"    });",
											"",
											"    // Validate quantity relationships",
											"    pm.test(`${orderPrefix} has valid quantity relationships`, function() {",
											"        pm.expect(order.order_quantity).to.equal(",
											"            order.execute_quantity + order.remain_quantity + order.cancel_quantity",
											"        );",
											"        ",
											"        if (order.execute_quantity > 0) {",
											"            pm.expect(order.match_price).to.be.above(0);",
											"            pm.expect(order.execute_value).to.equal(order.execute_quantity * order.match_price);",
											"        }",
											"    });",
											"});",
											"",
											"// 10. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedOrderHistoryFields = ['st_partner_orders', '__typename'];",
											"    pm.expect(Object.keys(orderHistory)).to.eql(expectedOrderHistoryFields);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_order_history\",\n    \"variables\": {\n        \"input\": {\n            \"end_date\": \"01/01/2026\",\n            \"start_date\": \"01/01/2025\",\n            \"from\": 0,\n            \"to\": 1000,\n            \"execute_type\": \"ALL\",\n            \"order_status\": \"ALL\",\n            \"sort\": \"LAST_DATE\",\n            \"sub_account\": \"0001122911NM\"\n        }\n    },\n    \"query\": \"query st_partner_order_history($input: GetListOrderInput!) {\\n  st_partner_order_history(input: $input) {\\n    st_partner_orders {\\n      id\\n      created_at\\n      updated_at\\n      stt\\n      order_id\\n      symbol\\n      sub_account\\n      custody_code\\n      transaction_number\\n      transaction_date\\n      transaction_time\\n      execute_type\\n      price_type\\n      quote_price\\n      order_quantity\\n      remain_quantity\\n      execute_quantity\\n      match_price\\n      cancel_quantity\\n      adjust_quantity\\n      trade_place\\n      place_value\\n      execute_value\\n      order_status\\n      order_type\\n      cost_price\\n      fee\\n      tax_fee\\n      actual_fee\\n      provisional_value\\n      real_value\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_internal_stock_transfer_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate transfer history object exists",
											"pm.test(\"Transfer history object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_internal_stock_transfer_history');",
											"    const transferHistory = jsonData.data.st_partner_internal_stock_transfer_history;",
											"    pm.expect(transferHistory).to.be.an('object');",
											"});",
											"",
											"const transferHistory = jsonData.data.st_partner_internal_stock_transfer_history;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(transferHistory).to.have.property('stock_transfer_history');",
											"    pm.expect(transferHistory).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate transfers array",
											"pm.test(\"Transfers array has items\", function() {",
											"    pm.expect(transferHistory.stock_transfer_history).to.be.an('array');",
											"    pm.expect(transferHistory.stock_transfer_history.length).to.be.at.least(1);",
											"});",
											"",
											"// 8. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(transferHistory.__typename).to.equal('StPartnerGetInternalStockTransferHistoryResult');",
											"    transferHistory.stock_transfer_history.forEach(transfer => {",
											"        pm.expect(transfer.__typename).to.equal('StPartnerInternalStockTransferTransaction');",
											"    });",
											"});",
											"",
											"// 9. Validate each transfer in the array",
											"transferHistory.stock_transfer_history.forEach((transfer, index) => {",
											"    const transferPrefix = `Transfer ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${transferPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'sub_account', 'transaction_date', 'transaction_time',",
											"            'transaction_name', 'stock_code', 'quantity',",
											"            'receive_sub_account', 'receive_account_name', 'description',",
											"            '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(transfer).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate account and stock codes",
											"    pm.test(`${transferPrefix} has valid account and stock codes`, function() {",
											"        pm.expect(transfer.sub_account).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        if (transfer.receive_sub_account) {",
											"            pm.expect(transfer.receive_sub_account).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        }",
											"        pm.expect(transfer.stock_code).to.match(/^[A-Z]{2,4}$/);",
											"    });",
											"",
											"    // Validate dates and times",
											"    pm.test(`${transferPrefix} has valid dates and times`, function() {",
											"        pm.expect(transfer.transaction_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/);",
											"        pm.expect(transfer.transaction_time).to.match(/^\\d{2}:\\d{2}:\\d{2}$/);",
											"    });",
											"",
											"    // Validate numeric fields",
											"    pm.test(`${transferPrefix} has valid numeric values`, function() {",
											"        pm.expect(transfer.quantity).to.be.a('number');",
											"        pm.expect(transfer.quantity).to.be.at.least(1);",
											"    });",
											"",
											"    // Validate description format",
											"    pm.test(`${transferPrefix} has valid description format`, function() {",
											"        const parts = transfer.description.split('|');",
											"        pm.expect(parts.length).to.equal(3);",
											"        pm.expect(parts[0]).to.match(/^\\d{10}[A-Z]{2}$/); // Account",
											"        pm.expect(parts[1]).to.match(/^[A-Z]{2,4}$/); // Stock code",
											"        pm.expect(parts[2]).to.match(/^\\d{10}[A-Z]{2}$/); // Account",
											"    });",
											"",
											"    // Validate transaction name",
											"    pm.test(`${transferPrefix} has valid transaction name`, function() {",
											"        pm.expect(transfer.transaction_name).to.equal('Chuyển khoản CK nội bộ giữa các tiểu khoản');",
											"    });",
											"",
											"    // Validate receive account info",
											"    if (transfer.receive_sub_account === null) {",
											"        pm.test(`${transferPrefix} has null receive account fields`, function() {",
											"            pm.expect(transfer.receive_account_name).to.be.null;",
											"        });",
											"    } else {",
											"        pm.test(`${transferPrefix} has valid receive account info`, function() {",
											"            pm.expect(transfer.receive_account_name).to.be.a('string');",
											"            pm.expect(transfer.receive_account_name.length).to.be.at.least(3);",
											"        });",
											"    }",
											"});",
											"",
											"// 10. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedTransferHistoryFields = ['stock_transfer_history', '__typename'];",
											"    pm.expect(Object.keys(transferHistory)).to.eql(expectedTransferHistoryFields);",
											"});",
											"",
											"",
											"// 12. Validate transfer direction consistency",
											"// pm.test(\"Transfer descriptions match account fields\", function() {",
											"//     transferHistory.stock_transfer_history.forEach((transfer, index) => {",
											"//         const descriptionParts = transfer.description.split('|');",
											"//         pm.expect(descriptionParts[0]).to.equal(transfer.sub_account);",
											"//         pm.expect(descriptionParts[1]).to.equal(transfer.stock_code);",
											"//         if (transfer.receive_sub_account) {",
											"//             pm.expect(descriptionParts[2]).to.equal(transfer.receive_sub_account);",
											"//         }",
											"//     });",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_internal_stock_transfer_history\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911NM\",\n        \"to_date\": \"2026-01-01\",\n        \"from_date\": \"2025-05-26\"\n    },\n    \"query\": \"query st_partner_internal_stock_transfer_history($sub_account_no: String!, $from_date: String!, $to_date: String!) {\\n  st_partner_internal_stock_transfer_history(\\n    input: {sub_account_no: $sub_account_no, from_date: $from_date, to_date: $to_date}\\n  ) {\\n    ... on StPartnerGetInternalStockTransferHistoryError {\\n      error_message\\n      __typename\\n    }\\n    ... on StPartnerGetInternalStockTransferHistoryResult {\\n      stock_transfer_history {\\n        sub_account\\n        transaction_date\\n        transaction_time\\n        transaction_name\\n        stock_code\\n        quantity\\n        receive_sub_account\\n        receive_account_name\\n        description\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_sub_account_transactions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate transactions object exists",
											"pm.test(\"Transactions object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_transactions');",
											"    const transactions = jsonData.data.st_partner_sub_account_transactions;",
											"    pm.expect(transactions).to.be.an('object');",
											"});",
											"",
											"const transactions = jsonData.data.st_partner_sub_account_transactions;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(transactions).to.have.property('sub_account_transactions');",
											"    pm.expect(transactions).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate transactions array",
											"pm.test(\"Transactions array has items\", function() {",
											"    pm.expect(transactions.sub_account_transactions).to.be.an('array');",
											"    pm.expect(transactions.sub_account_transactions.length).to.be.at.least(1);",
											"});",
											"",
											"// 8. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(transactions.__typename).to.equal('StPartnerSubAccountTransactionResult');",
											"    transactions.sub_account_transactions.forEach(tx => {",
											"        pm.expect(tx.__typename).to.equal('StPartnerSubAccountTransaction');",
											"    });",
											"});",
											"",
											"// 9. Validate each transaction in the array",
											"transactions.sub_account_transactions.forEach((tx, index) => {",
											"    const txPrefix = `Transaction ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${txPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'sub_account_no', 'transaction_date', 'type', ",
											"            'transaction_name', 'amount', 'description', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(tx).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate account number format",
											"    pm.test(`${txPrefix} has valid account number`, function() {",
											"        pm.expect(tx.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"    });",
											"",
											"    // Validate transaction date",
											"    pm.test(`${txPrefix} has valid transaction date`, function() {",
											"        pm.expect(tx.transaction_date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"        pm.expect(new Date(tx.transaction_date).toString()).to.not.equal('Invalid Date');",
											"    });",
											"",
											"    // Validate transaction type",
											"    pm.test(`${txPrefix} has valid transaction type`, function() {",
											"        pm.expect(tx.type).to.be.a('string');",
											"        pm.expect(tx.type).to.match(/^[A-Z_]+$/);",
											"    });",
											"",
											"    // Validate amount",
											"    pm.test(`${txPrefix} has valid amount`, function() {",
											"        pm.expect(tx.amount).to.be.a('number');",
											"        // Amount can be positive or negative depending on transaction type",
											"    });",
											"",
											"    // Validate description",
											"    pm.test(`${txPrefix} has valid description`, function() {",
											"        pm.expect(tx.description).to.be.a('string');",
											"        pm.expect(tx.description.length).to.be.at.least(5);",
											"    });",
											"",
											"    // Validate null fields for OTHER type",
											"    if (tx.type === 'OTHER') {",
											"        pm.test(`${txPrefix} has null fields for OTHER type`, function() {",
											"            const nullableFields = [",
											"                'stock_code', 'quantity', 'price', ",
											"                'fee', 'tax', 'receive_account_no', ",
											"                'receive_account_name'",
											"            ];",
											"            ",
											"            nullableFields.forEach(field => {",
											"                pm.expect(tx[field]).to.be.null;",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"",
											"// 11. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedTopFields = ['data'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    const expectedTxFields = ['sub_account_transactions', '__typename'];",
											"    pm.expect(Object.keys(transactions)).to.eql(expectedTxFields);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_sub_account_transactions\",\n    \"variables\": {\n        \"input\": {\n            \"to_date\": \"01/01/2026\",\n            \"from_date\": \"26/05/2025\",\n            \"sub_account\": \"0001122911NM\",\n            \"transaction_type\": \"ALL\"\n        }\n    },\n    \"query\": \"query st_partner_sub_account_transactions($input: StPartnerSubAccountTransactionsInput!) {\\n  st_partner_sub_account_transactions(input: $input) {\\n    ... on StPartnerSubAccountTransactionError {\\n      error_message\\n      __typename\\n    }\\n    ... on StPartnerSubAccountTransactionResult {\\n      sub_account_transactions {\\n        sub_account_no\\n        transaction_date\\n        type\\n        transaction_name\\n        stock_code\\n        quantity\\n        price\\n        fee\\n        tax\\n        amount\\n        receive_account_no\\n        receive_account_name\\n        description\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Margin (MG)",
					"item": [
						{
							"name": "st_partner_sub_account_portfolio (Margin)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// Validate st_partner_sub_account_portfolio exists",
											"pm.test(\"Portfolio object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_portfolio');",
											"    const portfolio = jsonData.data.st_partner_sub_account_portfolio;",
											"    pm.expect(portfolio).to.be.an('object');",
											"    pm.expect(portfolio).to.have.property('sub_account_portfolio');",
											"    pm.expect(portfolio).to.have.property('__typename');",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename values\", function() {",
											"    const portfolio = jsonData.data.st_partner_sub_account_portfolio;",
											"    pm.expect(portfolio.__typename).to.equal('StPartnerSubAccountPortfolioResult');",
											"});",
											"",
											"const portfolioItems = jsonData.data.st_partner_sub_account_portfolio.sub_account_portfolio;",
											"",
											"// Validate portfolio array exists and has items",
											"pm.test(\"Portfolio has items\", function() {",
											"    pm.expect(portfolioItems).to.be.an('array');",
											"    pm.expect(portfolioItems.length).to.be.at.least(1);",
											"});",
											"",
											"// Validate each portfolio item",
											"portfolioItems.forEach((item, index) => {",
											"    const itemPrefix = `Portfolio item ${index + 1}`;",
											"    ",
											"    // Validate required fields",
											"    pm.test(`${itemPrefix} has required fields`, function() {",
											"        const requiredFields = [",
											"            'id', 'created_at', 'updated_at', 'custody_code',",
											"            'sub_account_id', 'sub_account_no', 'sub_account_type',",
											"            'symbol', 'restrict_quantity', 'await_restrict_quantity',",
											"            'trade_quantity', 'total_volume', 'cost_price', 'market_value',",
											"            'cost_value', 'gain_loss_percent', 'gain_loss_value',",
											"            'allocation', 'logo', '__typename'",
											"        ];",
											"        ",
											"        requiredFields.forEach(field => {",
											"            pm.expect(item).to.have.property(field);",
											"        });",
											"    });",
											"",
											"    // Validate ID and timestamps",
											"    pm.test(`${itemPrefix} has valid ID and timestamps`, function() {",
											"        pm.expect(item.id).to.be.a('string');",
											"        pm.expect(item.id).to.match(/^[a-z0-9]{20,25}$/);",
											"        ",
											"        pm.expect(item.created_at).to.be.a('string');",
											"        pm.expect(new Date(item.created_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(item.updated_at).to.be.a('string');",
											"        pm.expect(new Date(item.updated_at).toString()).to.not.equal('Invalid Date');",
											"        ",
											"        pm.expect(item.created_at).to.equal(item.updated_at);",
											"    });",
											"",
											"    // Validate account identifiers",
											"    pm.test(`${itemPrefix} has valid account identifiers`, function() {",
											"        //pm.expect(item.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"        pm.expect(item.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"        pm.expect(item.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"        pm.expect(item.sub_account_type).to.match(/^[A-Z]{2}$/);",
											"    });",
											"",
											"    // Validate stock symbol and logo",
											"    pm.test(`${itemPrefix} has valid symbol and logo`, function() {",
											"        pm.expect(item.symbol).to.be.a('string');",
											"        pm.expect(item.symbol).to.match(/^[A-Z]{2,4}$/);",
											"        ",
											"        pm.expect(item.logo).to.be.a('string');",
											"        pm.expect(item.logo).to.include('https://');",
											"        pm.expect(item.logo).to.include(item.symbol);",
											"    });",
											"",
											"    // Validate quantity fields",
											"    pm.test(`${itemPrefix} has valid quantity values`, function() {",
											"        const quantityFields = [",
											"            'restrict_quantity', 'await_restrict_quantity',",
											"            'trade_quantity', 'total_volume'",
											"        ];",
											"        ",
											"        quantityFields.forEach(field => {",
											"            pm.expect(item[field]).to.be.a('number');",
											"            pm.expect(item[field]).to.be.at.least(0);",
											"        });",
											"        ",
											"        // Validate total_volume is sum of trade_quantity and restrict quantities",
											"        const expectedTotalVolume = item.trade_quantity + item.restrict_quantity;",
											"        pm.expect(item.total_volume).to.equal(expectedTotalVolume);",
											"    });",
											"",
											"    // Validate price and value fields",
											"    pm.test(`${itemPrefix} has valid price and value fields`, function() {",
											"        pm.expect(item.cost_price).to.be.a('number');",
											"        pm.expect(item.cost_price).to.be.above(0);",
											"        ",
											"        pm.expect(item.market_value).to.be.a('number');",
											"        pm.expect(item.market_value).to.be.at.least(0);",
											"        ",
											"        pm.expect(item.cost_value).to.be.a('number');",
											"        pm.expect(item.cost_value).to.be.at.least(0);",
											"    });",
											"",
											"    // Validate gain/loss calculations",
											"    pm.test(`${itemPrefix} has correct gain/loss calculations`, function() {",
											"        const expectedGainLossValue = item.market_value - item.cost_value;",
											"        pm.expect(item.gain_loss_value).to.equal(expectedGainLossValue);",
											"        ",
											"        if (item.cost_value !== 0) {",
											"            const expectedGainLossPercent = (item.gain_loss_value / item.cost_value) * 100;",
											"            pm.expect(item.gain_loss_percent).to.be.closeTo(expectedGainLossPercent, 0.01);",
											"        }",
											"    });",
											"",
											"    // Validate allocation",
											"    pm.test(`${itemPrefix} has valid allocation`, function() {",
											"        pm.expect(item.allocation).to.be.a('number');",
											"        pm.expect(item.allocation).to.be.at.least(0);",
											"        pm.expect(item.allocation).to.be.at.most(1);",
											"    });",
											"",
											"    // Validate __typename",
											"    pm.test(`${itemPrefix} has correct __typename`, function() {",
											"        pm.expect(item.__typename).to.equal('StPartnerSubAccountPortfolio');",
											"    });",
											"});",
											"",
											"// Validate allocation sums to approximately 1 (100%)",
											"pm.test(\"Portfolio allocations sum to approximately 1\", function() {",
											"    const totalAllocation = portfolioItems.reduce((sum, item) => sum + item.allocation, 0);",
											"    pm.expect(totalAllocation).to.be.closeTo(1, 0.001);",
											"});",
											"",
											"// Validate all items belong to same sub-account",
											"pm.test(\"All portfolio items belong to same sub-account\", function() {",
											"    if (portfolioItems.length > 1) {",
											"        const firstItem = portfolioItems[0];",
											"        portfolioItems.slice(1).forEach(item => {",
											"            pm.expect(item.sub_account_id).to.equal(firstItem.sub_account_id);",
											"            pm.expect(item.sub_account_no).to.equal(firstItem.sub_account_no);",
											"            pm.expect(item.custody_code).to.equal(firstItem.custody_code);",
											"        });",
											"    }",
											"});",
											"",
											"// Store portfolio data for future tests",
											"pm.environment.set(\"portfolio_items_count\", portfolioItems.length);",
											"pm.environment.set(\"sub_account_no\", portfolioItems[0].sub_account_no);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_sub_account_portfolio\",\n    \"variables\": {\n        \"input\": {\n            \"sub_account_no\": \"0001122911MG\",\n            \"sort_by\": \"ALLOCATION\",\n            \"sort_type\": \"DESC\"\n        }\n    },\n    \"query\": \"query st_partner_sub_account_portfolio($input: GetSubAccountPortfolioInput!) {\\n  st_partner_sub_account_portfolio(input: $input) {\\n    sub_account_portfolio {\\n      id\\n      created_at\\n      updated_at\\n      custody_code\\n      sub_account_id\\n      sub_account_no\\n      sub_account_type\\n      symbol\\n      restrict_quantity\\n      await_restrict_quantity\\n      trade_quantity\\n      total_volume\\n      cost_price\\n      market_value\\n      cost_value\\n      gain_loss_percent\\n      gain_loss_value\\n      allocation\\n      logo\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_sub_account_asset_detail (Margin)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response headers",
											"pm.test(\"Content-Type header is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// Validate st_partner_sub_account_asset_detail exists",
											"pm.test(\"Asset detail object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_sub_account_asset_detail');",
											"    const assetDetail = jsonData.data.st_partner_sub_account_asset_detail;",
											"    pm.expect(assetDetail).to.be.an('object');",
											"});",
											"",
											"const asset = jsonData.data.st_partner_sub_account_asset_detail;",
											"",
											"// Validate required fields",
											"pm.test(\"Asset detail has all required fields\", function() {",
											"    const requiredFields = [",
											"        'id', 'created_at', 'updated_at', 'custody_code',",
											"        'sub_account_id', 'sub_account_no', 'sub_account_type',",
											"        'market_value', 'cost_value', 'gain_loss_percent',",
											"        'gain_loss_value', 'total_loan', 'total_money', 'cash',",
											"        't0', 't1', 't2', 'buying_power', 'pending_match_value',",
											"        'pending_receive_value', 'loan_inday', 'margin_debt',",
											"        'custody_fee', 'other_fee', 'dividend_value', 'blocked_value',",
											"        'holding_stock', 'total_asset', 'nav', 'fee',",
											"        'cash_advanced', 'status', '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(asset).to.have.property(field);",
											"    });",
											"});",
											"",
											"// Validate ID and timestamps",
											"pm.test(\"ID and timestamps are valid\", function() {",
											"    pm.expect(asset.id).to.be.a('string');",
											"    pm.expect(asset.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    ",
											"    pm.expect(asset.created_at).to.be.a('string');",
											"    pm.expect(new Date(asset.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(asset.updated_at).to.be.a('string');",
											"    pm.expect(new Date(asset.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(asset.created_at).to.equal(asset.updated_at);",
											"});",
											"",
											"// Validate account identifiers",
											"pm.test(\"Account identifiers are valid\", function() {",
											"    //pm.expect(asset.custody_code).to.match(/^\\d{2}[A-Z]\\d{6}$/);",
											"    pm.expect(asset.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"    pm.expect(asset.sub_account_no).to.match(/^\\d{10}[A-Z]{2}$/);",
											"    pm.expect(asset.sub_account_type).to.match(/^[A-Z]{2}$/);",
											"});",
											"",
											"// Validate numeric financial fields",
											"pm.test(\"Financial values are valid\", function() {",
											"    // Positive value fields",
											"    const positiveFields = [",
											"        'market_value', 'cost_value', 'total_loan', 'total_money',",
											"        'cash', 't0', 't1', 't2', 'buying_power', 'pending_match_value',",
											"        'pending_receive_value', 'loan_inday', 'margin_debt', 'custody_fee',",
											"        'other_fee', 'dividend_value', 'blocked_value', 'holding_stock',",
											"        'total_asset', 'nav', 'fee', 'cash_advanced'",
											"    ];",
											"    ",
											"    positiveFields.forEach(field => {",
											"        pm.expect(asset[field]).to.be.a('number');",
											"        pm.expect(asset[field]).to.be.at.least(0);",
											"    });",
											"    ",
											"    // Gain/loss fields can be negative",
											"    pm.expect(asset.gain_loss_value).to.be.a('number');",
											"    pm.expect(asset.gain_loss_percent).to.be.a('number');",
											"    pm.expect(asset.gain_loss_percent).to.be.at.least(-100);",
											"    pm.expect(asset.gain_loss_percent).to.be.at.most(100);",
											"});",
											"",
											"// Validate status field",
											"pm.test(\"Status is valid\", function() {",
											"    pm.expect(asset.status).to.be.a('string');",
											"    pm.expect(asset.status).to.match(/^[A-Z]$/);",
											"});",
											"",
											"// Validate __typename",
											"pm.test(\"Correct __typename\", function() {",
											"    pm.expect(asset.__typename).to.equal('StPartnerSubAccountAssetDetail');",
											"});",
											"",
											"// Validate financial calculations",
											"pm.test(\"Financial calculations are consistent\", function() {",
											"    // Validate gain/loss calculations",
											"    const expectedGainLoss = asset.market_value - asset.cost_value;",
											"    pm.expect(asset.gain_loss_value).to.equal(expectedGainLoss);",
											"    ",
											"    if (asset.cost_value !== 0) {",
											"        const expectedPercent = (asset.gain_loss_value / asset.cost_value) * 100;",
											"        pm.expect(asset.gain_loss_percent).to.be.closeTo(expectedPercent, 0.01);",
											"    }",
											"      ",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_sub_account_asset_detail\",\n    \"variables\": {\n        \"input\": {\n            \"sub_account_no\": \"0001122911MG\"\n        }\n    },\n    \"query\": \"query st_partner_sub_account_asset_detail($input: GetSubAccountAssetDetailInput!) {\\n  st_partner_sub_account_asset_detail(input: $input) {\\n    id\\n    created_at\\n    updated_at\\n    custody_code\\n    sub_account_id\\n    sub_account_no\\n    sub_account_type\\n    market_value\\n    cost_value\\n    gain_loss_percent\\n    gain_loss_value\\n    total_loan\\n    total_money\\n    cash\\n    t0\\n    t1\\n    t2\\n    buying_power\\n    pending_match_value\\n    pending_receive_value\\n    loan_inday\\n    margin_debt\\n    custody_fee\\n    other_fee\\n    dividend_value\\n    blocked_value\\n    holding_stock\\n    total_asset\\n    nav\\n    fee\\n    cash_advanced\\n    status\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_order_webview (SELL - Margin)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Webview response structure valid\", () => {",
											"    const webview = pm.response.json().data.st_partner_order_webview;",
											"    pm.expect(webview).to.be.an('object');",
											"    pm.expect(webview).to.have.all.keys([",
											"        'webview_url', 'expired_at', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"URL validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    ",
											"    // Basic URL checks",
											"    pm.expect(url).to.match(/^https:\\/\\//);",
											"    pm.expect(url).to.include('token=eyJ');",
											"    ",
											"    // Parameter validation",
											"    pm.expect(url).to.include('subNumber=0001122911MG');",
											"    pm.expect(url).to.include('sellBuyType=SELL');",
											"    pm.expect(url).to.include('symbol=HPG');",
											"});",
											"",
											"pm.test(\"Expiration time valid\", () => {",
											"    const expiry = pm.response.json().data.st_partner_order_webview.expired_at;",
											"    pm.expect(expiry).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    ",
											"    // Check if expiration is in future",
											"    const expiryDate = new Date(expiry);",
											"    pm.expect(expiryDate).to.be.above(new Date());",
											"});",
											"",
											"pm.test(\"JWT token basic validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    const token = url.match(/token=([^&]+)/)[1];",
											"    ",
											"    // Verify JWT structure (header.payload.signature)",
											"    const parts = token.split('.');",
											"    pm.expect(parts.length).to.equal(3);",
											"    pm.expect(parts[0]).to.match(/^eyJ/);  // JWT header",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_order_webview\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911MG\",\n        \"symbol\": \"HPG\",\n        \"action\": \"SELL\"\n    },\n    \"query\": \"query st_partner_order_webview($sub_account_no: String!, $symbol: String, $action: ST_PARTNER_ORDER_WEBVIEW_ACTION!) {\\n  st_partner_order_webview(\\n    input: {sub_account_no: $sub_account_no, symbol: $symbol, action: $action}\\n  ) {\\n    webview_url\\n    expired_at\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_order_webview (BUY - Margin)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Webview response structure valid\", () => {",
											"    const webview = pm.response.json().data.st_partner_order_webview;",
											"    pm.expect(webview).to.be.an('object');",
											"    pm.expect(webview).to.have.all.keys([",
											"        'webview_url', 'expired_at', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"URL validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    ",
											"    // Basic URL checks",
											"    pm.expect(url).to.match(/^https:\\/\\//);",
											"    pm.expect(url).to.include('token=eyJ');",
											"    ",
											"    // Parameter validation",
											"    pm.expect(url).to.include('subNumber=0001122911MG');",
											"    pm.expect(url).to.include('sellBuyType=BUY');",
											"    pm.expect(url).to.include('symbol=HPG');",
											"});",
											"",
											"pm.test(\"Expiration time valid\", () => {",
											"    const expiry = pm.response.json().data.st_partner_order_webview.expired_at;",
											"    pm.expect(expiry).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"    ",
											"    // Check if expiration is in future",
											"    const expiryDate = new Date(expiry);",
											"    pm.expect(expiryDate).to.be.above(new Date());",
											"});",
											"",
											"pm.test(\"JWT token basic validation\", () => {",
											"    const url = pm.response.json().data.st_partner_order_webview.webview_url;",
											"    const token = url.match(/token=([^&]+)/)[1];",
											"    ",
											"    // Verify JWT structure (header.payload.signature)",
											"    const parts = token.split('.');",
											"    pm.expect(parts.length).to.equal(3);",
											"    pm.expect(parts[0]).to.match(/^eyJ/);  // JWT header",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_order_webview\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911MG\",\n        \"symbol\": \"HPG\",\n        \"action\": \"BUY\"\n    },\n    \"query\": \"query st_partner_order_webview($sub_account_no: String!, $symbol: String, $action: ST_PARTNER_ORDER_WEBVIEW_ACTION!) {\\n  st_partner_order_webview(\\n    input: {sub_account_no: $sub_account_no, symbol: $symbol, action: $action}\\n  ) {\\n    webview_url\\n    expired_at\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_withdrawable_balance (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(info).to.be.an('object');",
											"    pm.expect(info).to.have.all.keys([",
											"        'cash', 'withdrawable_balance', ",
											"        'withdrawal_limit_per_time', ",
											"        'withdrawal_limit_per_day',",
											"        '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Balance validation\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Withdrawable can't exceed cash",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"    ",
											"    // Verify all values are integers",
											"    pm.expect(cash % 1).to.equal(0);",
											"    pm.expect(withdrawable_balance % 1).to.equal(0);",
											"});",
											"",
											"pm.test(\"Withdrawal limits check\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Confirm limits are positive",
											"    pm.expect(info.withdrawal_limit_per_time).to.be.above(0);",
											"    pm.expect(info.withdrawal_limit_per_day).to.be.above(0);",
											"    ",
											"    // Log warning if limits seem unusually high",
											"    if (info.withdrawal_limit_per_time > 1000000000) {",
											"        console.warn(\"Extremely high per-transaction limit detected\");",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_withdrawable_balance\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911MG\"\n    },\n    \"query\": \"query get_finavi_withdrawable_balance($subAccountNo: String!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    withdrawal_limit_per_time\\n    withdrawal_limit_per_day\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_validate_withdrawal_info (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validation response structure\", () => {",
											"    const validation = pm.response.json().data.st_partner_validate_withdrawal_info;",
											"    pm.expect(validation).to.be.an('object');",
											"    pm.expect(validation).to.have.all.keys([",
											"        'status', 'error_message', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Success state validation\", () => {",
											"    const { status, error_message } = pm.response.json().data.st_partner_validate_withdrawal_info;",
											"    ",
											"    // Verify success state",
											"    if (status === \"success\") {",
											"        pm.expect(error_message).to.be.null;",
											"    } else {",
											"        pm.expect(error_message).to.be.a('string').that.is.not.empty;",
											"    }",
											"    ",
											"    // Validate status values",
											"    pm.expect(status).to.be.oneOf([\"success\", \"error\"]);",
											"});",
											"",
											"pm.test(\"Type consistency\", () => {",
											"    const typeName = pm.response.json().data.st_partner_validate_withdrawal_info.__typename;",
											"    pm.expect(typeName).to.equal(\"StPartnerValidateWithdrawalInfoResult\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_validate_withdrawal_info\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 50000,\n            \"sub_account\": \"0001122911MG\",\n            \"bank_id\": \"VIETCAPITALBANK\"\n        }\n    },\n    \"query\": \"mutation st_partner_validate_withdrawal_info($input: StPartnerValidateWithdrawalInfoInput!) {\\n  st_partner_validate_withdrawal_info(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_send_withdrawal_otp (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_send_withdrawal_otp');",
											"});",
											"",
											"// Validate OTP sending result",
											"const otpResult = response.data.st_partner_send_withdrawal_otp;",
											"pm.test(\"OTP sending result is valid\", function() {",
											"    pm.expect(otpResult).to.have.all.keys(",
											"        'status',",
											"        'error_message',",
											"        'transaction_id',",
											"        '__typename'",
											"    );",
											"    pm.expect(otpResult.status).to.equal('success');",
											"    pm.expect(otpResult.error_message).to.be.null;",
											"    pm.expect(otpResult.__typename).to.equal('StPartnerSendWithdrawalOTPResult');",
											"});",
											"",
											"",
											"// Store transaction ID for OTP verification",
											"pm.test(\"Store transaction ID\", function() {",
											"    pm.collectionVariables.set(\"withdrawal_transaction_id\", otpResult.transaction_id);",
											"    console.log(\"Stored transaction ID for OTP verification:\", otpResult.transaction_id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_send_withdrawal_otp\",\n    \"variables\": {\n        \"amount\": 5000,\n        \"sub_account\": \"0001122911MG\"\n    },\n    \"query\": \"mutation st_partner_send_withdrawal_otp($sub_account: String!, $amount: Int!) {\\n  st_partner_send_withdrawal_otp(sub_account: $sub_account, amount: $amount) {\\n    status\\n    error_message\\n    transaction_id\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_verify_withdrawal_otp (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Basic response validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has valid JSON body\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Parse the response",
											"const response = pm.response.json();",
											"",
											"// Validate main structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_verify_withdrawal_otp');",
											"});",
											"",
											"// Validate OTP verification result",
											"const verifyResult = response.data.st_partner_verify_withdrawal_otp;",
											"pm.test(\"OTP verification result is valid\", function() {",
											"    pm.expect(verifyResult).to.have.all.keys(",
											"        'status',",
											"        'error_message',",
											"        '__typename'",
											"    );",
											"    pm.expect(verifyResult.status).to.equal('success');",
											"    pm.expect(verifyResult.error_message).to.be.null;",
											"    pm.expect(verifyResult.__typename).to.equal('StPartnerVerifyWithdrawalOTPResult');",
											"});",
											"",
											"// Verify this matches the previous transaction ID (if applicable)",
											"pm.test(\"Transaction context is consistent\", function() {",
											"    const storedTransactionId = pm.collectionVariables.get(\"withdrawal_transaction_id\");",
											"    if (storedTransactionId) {",
											"        console.log(\"Verified OTP for transaction:\", storedTransactionId);",
											"        pm.expect(verifyResult.status).to.equal('success');",
											"    }",
											"});",
											"",
											"// Clear transaction ID after successful verification",
											"pm.test(\"Clean up transaction ID\", function() {",
											"    pm.collectionVariables.unset(\"withdrawal_transaction_id\");",
											"    console.log(\"Cleared transaction ID after successful verification\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_verify_withdrawal_otp\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 50000,\n            \"bank_id\": \"VIETCAPITALBANK\",\n            \"otp\": \"111111\",\n            \"sub_account\": \"0001122911MG\",\n            \"transaction_id\": \"{{withdrawal_transaction_id}}\"\n        }\n    },\n    \"query\": \"mutation st_partner_verify_withdrawal_otp($input: StPartnerVerifyWithdrawalOTPInput!) {\\n  st_partner_verify_withdrawal_otp(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_withdraw_fees (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(info).to.be.an('object');",
											"    pm.expect(info).to.have.all.keys([",
											"        'cash', 'withdrawable_balance', 'transfer_fee',",
											"        'advance_fee', '__typename'",
											"    ]);",
											"    ",
											"    // Validate advance_fee structure",
											"    pm.expect(info.advance_fee).to.have.all.keys([",
											"        'advance_amount', 'fee_advance', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Balance validation\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Withdrawable can't exceed cash",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"    ",
											"    // Check if balance difference is reasonable",
											"    const balanceDiff = cash - withdrawable_balance;",
											"    pm.expect(balanceDiff).to.be.within(0, cash);",
											"});",
											"",
											"pm.test(\"Fee validation\", () => {",
											"    const info = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    ",
											"    // Fees should be non-negative",
											"    pm.expect(info.transfer_fee).to.be.at.least(0);",
											"    pm.expect(info.advance_fee.advance_amount).to.be.at.least(0);",
											"    pm.expect(info.advance_fee.fee_advance).to.be.at.least(0);",
											"    ",
											"    // Log if fees are zero (might need verification)",
											"    if (info.transfer_fee === 0) {",
											"        console.log(\"Note: Transfer fee is currently zero\");",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_withdraw_fees\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911MG\",\n        \"amount\": 50000,\n        \"bankID\": \"VIETCAPITALBANK\"\n    },\n    \"query\": \"query get_finavi_withdraw_fees($subAccountNo: String!, $bankID: String!, $amount: Float!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    transfer_fee(bankID: $bankID, amount: $amount)\\n    advance_fee(amount: $amount) {\\n      advance_amount\\n      fee_advance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_finavi_transfer_internal_fees (0001122911MG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Withdrawal info structure valid\", () => {",
											"    const res = pm.response.json();",
											"    pm.expect(res.data.st_partner_sub_account_withdrawal_info).to.include({",
											"        \"__typename\": \"StPartnerSubAccountWithdrawalInfo\"",
											"    });",
											"    ",
											"    const { cash, withdrawable_balance } = res.data.st_partner_sub_account_withdrawal_info;",
											"    pm.expect(withdrawable_balance).to.be.at.most(cash);",
											"});",
											"",
											"pm.test(\"Advance fee validation\", () => {",
											"    const advanceFee = pm.response.json().data.st_partner_sub_account_withdrawal_info.advance_fee;",
											"    pm.expect(advanceFee).to.deep.include({",
											"        advance_amount: 0,",
											"        fee_advance: 0,",
											"        __typename: \"StPartnerSubAccountWithdrawalAdvanceFee\"",
											"    });",
											"});",
											"",
											"pm.test(\"Balance difference check\", () => {",
											"    const { cash, withdrawable_balance } = pm.response.json().data.st_partner_sub_account_withdrawal_info;",
											"    const diff = cash - withdrawable_balance;",
											"    pm.expect(diff).to.not.equal(0);  // Verify if this expected hold amount",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"get_finavi_transfer_internal_fees\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911MG\",\n        \"amount\": 10000\n    },\n    \"query\": \"query get_finavi_transfer_internal_fees($subAccountNo: String!, $amount: Float!) {\\n  st_partner_sub_account_withdrawal_info(subAccountNo: $subAccountNo) {\\n    cash\\n    withdrawable_balance\\n    advance_fee(amount: $amount) {\\n      advance_amount\\n      fee_advance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_transfer_cash_internal (MG -> NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer result structure valid\", () => {",
											"    const transfer = pm.response.json().data.st_partner_transfer_cash_internal;",
											"    pm.expect(transfer).to.be.an('object');",
											"    pm.expect(transfer).to.have.all.keys([",
											"        'status', 'error_message', '__typename'",
											"    ]);",
											"});",
											"",
											"pm.test(\"Success state validation\", () => {",
											"    const { status, error_message } = pm.response.json().data.st_partner_transfer_cash_internal;",
											"    ",
											"    pm.expect(status).to.equal(\"success\");",
											"    pm.expect(error_message).to.be.null;",
											"});",
											"",
											"pm.test(\"Type name consistency\", () => {",
											"    const typeName = pm.response.json().data.st_partner_transfer_cash_internal.__typename;",
											"    pm.expect(typeName).to.equal(\"TransferCashInternalResult\");",
											"});",
											"",
											"// Optional: Future-proof status check",
											"pm.test(\"Status value is valid\", () => {",
											"    const validStatuses = [\"success\", \"error\", \"pending\"];",
											"    const status = pm.response.json().data.st_partner_transfer_cash_internal.status;",
											"    pm.expect(status).to.be.oneOf(validStatuses);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_transfer_cash_internal\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": 10000,\n            \"source_account\": \"0001122911MG\", \n            \"destination_account\": \"0001122911NM\"\n        }\n    },\n    \"query\": \"mutation st_partner_transfer_cash_internal($input: TransferCashInternalInput!) {\\n  st_partner_transfer_cash_internal(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_internal_stock_transfer_list (MG -> NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response structure",
											"pm.test(\"Response has correct structure\", function () {",
											"    const response = pm.response.json();",
											"    ",
											"    // Check top-level structure",
											"    pm.expect(response).to.have.property('data');",
											"    pm.expect(response.data).to.have.property('st_partner_internal_stock_transfer_list');",
											"    ",
											"    // Check internal_stock_transfer_list",
											"    const transferList = response.data.st_partner_internal_stock_transfer_list;",
											"    pm.expect(transferList).to.have.property('internal_stock_transfer_list').that.is.an('array');",
											"    pm.expect(transferList).to.have.property('__typename', 'StPartnerInternalStockTransferListResult');",
											"    ",
											"    // Validate each item in the array",
											"    const items = transferList.internal_stock_transfer_list;",
											"    pm.expect(items.length).to.be.greaterThan(0);",
											"    ",
											"    items.forEach(item => {",
											"        pm.expect(item).to.have.property('stock_code').that.is.a('string');",
											"        pm.expect(item).to.have.property('sub_account').that.is.a('string');",
											"        pm.expect(item).to.have.property('can_transfer_quantity').that.is.a('number');",
											"        pm.expect(item).to.have.property('__typename', 'StPartnerInternalStockTransfer');",
											"    });",
											"});",
											"",
											"",
											"// Validate quantities are positive numbers",
											"pm.test(\"All transfer quantities are positive\", function () {",
											"    const response = pm.response.json();",
											"    const items = response.data.st_partner_internal_stock_transfer_list.internal_stock_transfer_list;",
											"    ",
											"    items.forEach(item => {",
											"        pm.expect(item.can_transfer_quantity).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_internal_stock_transfer_list\",\n    \"variables\": {\n        \"subAccountNo\": \"0001122911MG\" //\"0001122911MG\"\n    },\n    \"query\": \"query st_partner_internal_stock_transfer_list($subAccountNo: String!) {\\n  st_partner_internal_stock_transfer_list(subAccountNo: $subAccountNo) {\\n    ... on StPartnerSubAccountNotFoundError {\\n      error_message\\n      __typename\\n    }\\n    ... on StPartnerInternalStockTransferListResult {\\n      internal_stock_transfer_list {\\n        stock_code\\n        sub_account\\n        can_transfer_quantity\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_transfer_internal_stock (MG -> NM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate transfer object exists",
											"pm.test(\"Transfer object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_transfer_internal_stock');",
											"    const transfer = jsonData.data.st_partner_transfer_internal_stock;",
											"    pm.expect(transfer).to.be.an('object');",
											"});",
											"",
											"const transferResult = jsonData.data.st_partner_transfer_internal_stock;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(transferResult).to.have.property('status');",
											"    pm.expect(transferResult).to.have.property('error_message');",
											"    pm.expect(transferResult).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate field types",
											"pm.test(\"Field types are correct\", function() {",
											"    pm.expect(transferResult.status).to.be.a('string');",
											"    pm.expect(transferResult.error_message).to.be.null;",
											"    pm.expect(transferResult.__typename).to.be.a('string');",
											"});",
											"",
											"// 8. Validate status value",
											"pm.test(\"Status is 'success'\", function() {",
											"    pm.expect(transferResult.status).to.equal('success');",
											"});",
											"",
											"// 9. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(transferResult.__typename).to.equal('StPartnerInternalStockTransferResult');",
											"});",
											"",
											"// 10. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['status', 'error_message', '__typename'];",
											"    const actualFields = Object.keys(transferResult);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 11. Additional validation for error cases",
											"if (transferResult.status !== \"success\") {",
											"    pm.test(\"Error message should exist when status is not success\", function() {",
											"        pm.expect(transferResult.error_message).to.not.be.null;",
											"        pm.expect(transferResult.error_message).to.be.a('string');",
											"    });",
											"}",
											"",
											"// 12. Store transfer status for future tests",
											"pm.environment.set(\"last_transfer_status\", transferResult.status);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_transfer_internal_stock\",\n    \"variables\": {\n        \"input\": {\n            \"quantity\": 1,\n            \"stock_code\": \"AAA\",\n            \"sub_account_no\": \"0001122911MG\",\n            \"receive_sub_account_no\": \"0001122911NM\"\n        }\n    },\n    \"query\": \"mutation st_partner_transfer_internal_stock($input: StPartnerTransferInternalStockInput!) {\\n  st_partner_transfer_internal_stock(input: $input) {\\n    status\\n    error_message\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_loan_contracts (INDUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate loan contracts object exists",
											"pm.test(\"Loan contracts object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_loan_contracts');",
											"    const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"    pm.expect(loanContracts).to.be.an('object');",
											"});",
											"",
											"const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(loanContracts).to.have.property('loan_contracts');",
											"    pm.expect(loanContracts).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate empty loan contracts array",
											"pm.test(\"Loan contracts array is empty\", function() {",
											"    pm.expect(loanContracts.loan_contracts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"// 8. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(loanContracts.__typename).to.equal('StPartnerLoanContractsResult');",
											"});",
											"",
											"// 9. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['loan_contracts', '__typename'];",
											"    const actualFields = Object.keys(loanContracts);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 10. Store empty state for future tests",
											"pm.environment.set(\"has_loan_contracts\", false);",
											"pm.environment.set(\"loan_contracts_count\", loanContracts.loan_contracts.length);",
											"",
											"// 11. Additional validation when contracts exist",
											"if (loanContracts.loan_contracts.length > 0) {",
											"    pm.test(\"Loan contracts have valid structure\", function() {",
											"        loanContracts.loan_contracts.forEach(contract => {",
											"            pm.expect(contract).to.have.property('id');",
											"            pm.expect(contract.id).to.be.a('string');",
											"            // Add more contract field validations as needed",
											"        });",
											"    });",
											"} else {",
											"    pm.test(\"No loan contracts exist for this partner\", function() {",
											"        pm.expect(loanContracts.loan_contracts.length).to.equal(0);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_loan_contracts\",\n    \"variables\": {\n        \"input\": {\n            \"sort\": \"DUEDATE_DESC\",\n            \"status\": \"INDUE\",\n            \"sub_account_no\": \"0001122911MG\",\n            \"to_date\": \"01/01/2026\",\n            \"from_date\": \"01/05/2025\"\n        }\n    },\n    \"query\": \"query st_partner_loan_contracts($input: GetLoanContractsInput!) {\\n  st_partner_loan_contracts(input: $input) {\\n    loan_contracts {\\n      sub_account_id\\n      loan_id\\n      tx_date\\n      due_date\\n      interest_rate\\n      remain_original_loan_amount\\n      remain_interest_amount\\n      overdue_day\\n      paid_amount\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_loan_contracts (PASSDUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate loan contracts object exists",
											"pm.test(\"Loan contracts object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_loan_contracts');",
											"    const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"    pm.expect(loanContracts).to.be.an('object');",
											"});",
											"",
											"const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(loanContracts).to.have.property('loan_contracts');",
											"    pm.expect(loanContracts).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate empty loan contracts array",
											"pm.test(\"Loan contracts array is empty\", function() {",
											"    pm.expect(loanContracts.loan_contracts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"// 8. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(loanContracts.__typename).to.equal('StPartnerLoanContractsResult');",
											"});",
											"",
											"// 9. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['loan_contracts', '__typename'];",
											"    const actualFields = Object.keys(loanContracts);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 10. Store empty state for future tests",
											"pm.environment.set(\"has_loan_contracts\", false);",
											"pm.environment.set(\"loan_contracts_count\", loanContracts.loan_contracts.length);",
											"",
											"// 11. Additional validation when contracts exist",
											"if (loanContracts.loan_contracts.length > 0) {",
											"    pm.test(\"Loan contracts have valid structure\", function() {",
											"        loanContracts.loan_contracts.forEach(contract => {",
											"            pm.expect(contract).to.have.property('id');",
											"            pm.expect(contract.id).to.be.a('string');",
											"            // Add more contract field validations as needed",
											"        });",
											"    });",
											"} else {",
											"    pm.test(\"No loan contracts exist for this partner\", function() {",
											"        pm.expect(loanContracts.loan_contracts.length).to.equal(0);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_loan_contracts\",\n    \"variables\": {\n        \"input\": {\n            \"sort\": \"DUEDATE_DESC\",\n            \"status\": \"PASSDUE\",\n            \"sub_account_no\": \"0001122911MG\",\n            \"to_date\": \"01/01/2026\",\n            \"from_date\": \"01/05/2025\"\n        }\n    },\n    \"query\": \"query st_partner_loan_contracts($input: GetLoanContractsInput!) {\\n  st_partner_loan_contracts(input: $input) {\\n    loan_contracts {\\n      sub_account_id\\n      loan_id\\n      tx_date\\n      due_date\\n      interest_rate\\n      remain_original_loan_amount\\n      remain_interest_amount\\n      overdue_day\\n      paid_amount\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_loan_contracts (PAID)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate loan contracts object exists",
											"pm.test(\"Loan contracts object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_loan_contracts');",
											"    const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"    pm.expect(loanContracts).to.be.an('object');",
											"});",
											"",
											"const loanContracts = jsonData.data.st_partner_loan_contracts;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(loanContracts).to.have.property('loan_contracts');",
											"    pm.expect(loanContracts).to.have.property('__typename');",
											"});",
											"",
											"// 7. Validate empty loan contracts array",
											"pm.test(\"Loan contracts array is empty\", function() {",
											"    pm.expect(loanContracts.loan_contracts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"// 8. Validate __typename value",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(loanContracts.__typename).to.equal('StPartnerLoanContractsResult');",
											"});",
											"",
											"// 9. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['loan_contracts', '__typename'];",
											"    const actualFields = Object.keys(loanContracts);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											"",
											"// 10. Store empty state for future tests",
											"pm.environment.set(\"has_loan_contracts\", false);",
											"pm.environment.set(\"loan_contracts_count\", loanContracts.loan_contracts.length);",
											"",
											"// 11. Additional validation when contracts exist",
											"if (loanContracts.loan_contracts.length > 0) {",
											"    pm.test(\"Loan contracts have valid structure\", function() {",
											"        loanContracts.loan_contracts.forEach(contract => {",
											"            pm.expect(contract).to.have.property('id');",
											"            pm.expect(contract.id).to.be.a('string');",
											"            // Add more contract field validations as needed",
											"        });",
											"    });",
											"} else {",
											"    pm.test(\"No loan contracts exist for this partner\", function() {",
											"        pm.expect(loanContracts.loan_contracts.length).to.equal(0);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_loan_contracts\",\n    \"variables\": {\n        \"input\": {\n            \"sort\": \"DUEDATE_DESC\",\n            \"status\": \"PAID\",\n            \"sub_account_no\": \"0001122911MG\",\n            \"to_date\": \"01/01/2026\",\n            \"from_date\": \"01/05/2025\"\n        }\n    },\n    \"query\": \"query st_partner_loan_contracts($input: GetLoanContractsInput!) {\\n  st_partner_loan_contracts(input: $input) {\\n    loan_contracts {\\n      sub_account_id\\n      loan_id\\n      tx_date\\n      due_date\\n      interest_rate\\n      remain_original_loan_amount\\n      remain_interest_amount\\n      overdue_day\\n      paid_amount\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "st_partner_debt_asset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestId = require('uuid').v4();",
											"// const requestId = 'a153a69b-90a7-4ecc-b09f-2727e125508d'",
											"const secret = pm.collectionVariables.get('requestSecret');",
											"const message = secret+requestId;",
											"const signature =  CryptoJS.SHA256(message).toString();",
											"pm.request.headers.add({key:'x-request-id',value: requestId});",
											"pm.request.headers.add({key:'x-request-signature', value:signature})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate debt asset object exists",
											"pm.test(\"Debt asset object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_debt_asset');",
											"    const debtAsset = jsonData.data.st_partner_debt_asset;",
											"    pm.expect(debtAsset).to.be.an('object');",
											"});",
											"",
											"const debtAsset = jsonData.data.st_partner_debt_asset;",
											"",
											"// 6. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    const requiredFields = [",
											"        'sub_account_id',",
											"        'remain_original_loan_amount',",
											"        'remain_interest_amount',",
											"        'loan_custody_fee',",
											"        'other_loan',",
											"        'total_loan_value',",
											"        'paid_amount',",
											"        'rtt',",
											"        'need_pay',",
											"        'used_limit',",
											"        '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(debtAsset).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 7. Validate sub_account_id format",
											"pm.test(\"Sub account ID has correct format\", function() {",
											"    pm.expect(debtAsset.sub_account_id).to.be.a('string');",
											"    pm.expect(debtAsset.sub_account_id).to.match(/^[a-z0-9]{20,25}$/);",
											"});",
											"",
											"// 8. Validate numeric fields",
											"pm.test(\"All numeric fields are valid\", function() {",
											"    const numericFields = [",
											"        'remain_original_loan_amount',",
											"        'remain_interest_amount',",
											"        'loan_custody_fee',",
											"        'other_loan',",
											"        'total_loan_value',",
											"        'paid_amount',",
											"        'rtt',",
											"        'need_pay',",
											"        'used_limit'",
											"    ];",
											"    ",
											"    numericFields.forEach(field => {",
											"        pm.expect(debtAsset[field]).to.be.a('number');",
											"        pm.expect(debtAsset[field]).to.be.at.least(0);",
											"    });",
											"});",
											"",
											"// 9. Validate __typename",
											"pm.test(\"Correct __typename value\", function() {",
											"    pm.expect(debtAsset.__typename).to.equal('StPartnerDebtAsset');",
											"});",
											"",
											"// 10. Validate loan calculations",
											"pm.test(\"Loan calculations are correct\", function() {",
											"    const expectedTotalLoan = debtAsset.remain_original_loan_amount + ",
											"                            debtAsset.remain_interest_amount +",
											"                            debtAsset.loan_custody_fee +",
											"                            debtAsset.other_loan;",
											"    ",
											"    pm.expect(debtAsset.total_loan_value).to.equal(expectedTotalLoan);",
											"});",
											"",
											"// // 11. Validate payment calculations",
											"// pm.test(\"Payment calculations are correct\", function() {",
											"//     pm.expect(debtAsset.need_pay).to.equal(debtAsset.total_loan_value - debtAsset.paid_amount);",
											"// });",
											"",
											"// 12. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = [",
											"        'sub_account_id',",
											"        'remain_original_loan_amount',",
											"        'remain_interest_amount',",
											"        'loan_custody_fee',",
											"        'other_loan',",
											"        'total_loan_value',",
											"        'paid_amount',",
											"        'rtt',",
											"        'need_pay',",
											"        'used_limit',",
											"        '__typename'",
											"    ];",
											"    const actualFields = Object.keys(debtAsset);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "{{x-request-id}}",
										"type": "text"
									},
									{
										"key": "X-Request-Signature",
										"value": "{{x-request-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"st_partner_debt_asset\",\n    \"variables\": {\n        \"sub_account_no\": \"0001122911MG\"\n    },\n    \"query\": \"query st_partner_debt_asset($sub_account_no: String!) {\\n  st_partner_debt_asset(input: {sub_account_no: $sub_account_no}) {\\n    sub_account_id\\n    remain_original_loan_amount\\n    remain_interest_amount\\n    loan_custody_fee\\n    other_loan\\n    total_loan_value\\n    paid_amount\\n    rtt\\n    need_pay\\n    used_limit\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stock Detail",
					"item": [
						{
							"name": "stock_pricing_alerts_by_stock_asset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys(['data', 'extensions']);",
											"    pm.expect(response.data).to.have.key('stock_pricing_alerts_by_stock_asset');",
											"    pm.expect(response.extensions).to.have.key('timing');",
											"});",
											"",
											"pm.test(\"Empty alerts array\", () => {",
											"    const alerts = pm.response.json().data.stock_pricing_alerts_by_stock_asset;",
											"    pm.expect(alerts).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"Performance timing valid\", () => {",
											"    const timing = pm.response.json().extensions.timing;",
											"    pm.expect(timing).to.be.a('number').that.is.at.least(0);",
											"    ",
											"    // Optional: Log performance threshold warning",
											"    if (timing > 1000) {",
											"        console.warn(`Slow response: ${timing}ms`);",
											"    }",
											"});",
											"",
											"// Future-proofing tests",
											"pm.test(\"Extensions structure\", () => {",
											"    const extensions = pm.response.json().extensions;",
											"    pm.expect(extensions).to.be.an('object');",
											"    pm.expect(extensions.timing).to.be.a('number');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"stock_pricing_alerts_by_stock_asset\",\n    \"variables\": {\n        \"stockAssetId\": \"62261d6c2de804000953f596\"\n    },\n    \"query\": \"query stock_pricing_alerts_by_stock_asset($stockAssetId: ID!) {\\n  stock_pricing_alerts_by_stock_asset(stock_asset_id: $stockAssetId) {\\n    id\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "total_stock_pricing_alert_by_user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys(['data', 'extensions']);",
											"    pm.expect(response.data).to.have.key('total_stock_pricing_alert_by_user');",
											"});",
											"",
											"pm.test(\"Total alerts count\", () => {",
											"    const total = pm.response.json().data.total_stock_pricing_alert_by_user.total;",
											"    pm.expect(total).to.be.a('number').that.equals(0);",
											"});",
											"",
											"pm.test(\"Type name validation\", () => {",
											"    const typeName = pm.response.json().data.total_stock_pricing_alert_by_user.__typename;",
											"    pm.expect(typeName).to.equal(\"GetTotalStockPricingAlertByUserResult\");",
											"});",
											"",
											"pm.test(\"Performance timing\", () => {",
											"    const timing = pm.response.json().extensions.timing;",
											"    pm.expect(timing).to.be.a('number').that.is.within(0, 1000);",
											"});",
											"",
											"// Future-proofing test",
											"pm.test(\"Extensions structure\", () => {",
											"    const extensions = pm.response.json().extensions;",
											"    pm.expect(extensions).to.be.an('object');",
											"    pm.expect(extensions.timing).to.be.a('number');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"total_stock_pricing_alert_by_user\",\n    \"variables\": {},\n    \"query\": \"query total_stock_pricing_alert_by_user {\\n  total_stock_pricing_alert_by_user {\\n    total\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"frs",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_stock_intraday_stats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Validate top-level structure",
											"pm.test(\"Response has data and extensions\", function () {",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"});",
											"",
											"// Validate extensions timing",
											"pm.test(\"Extensions timing exists and is a number\", function () {",
											"    pm.expect(jsonData.extensions).to.have.property('timing');",
											"    pm.expect(typeof jsonData.extensions.timing).to.equal('number');",
											"});",
											"",
											"// Validate data.get_stock_intraday_stats structure",
											"pm.test(\"Stock intraday stats exists\", function () {",
											"    pm.expect(jsonData.data).to.have.property('get_stock_intraday_stats');",
											"});",
											"",
											"const stats = jsonData.data.get_stock_intraday_stats;",
											"",
											"// Validate required fields in get_stock_intraday_stats",
											"pm.test(\"Stats has required fields\", function () {",
											"    pm.expect(stats).to.have.property('t');",
											"    pm.expect(stats).to.have.property('o');",
											"    pm.expect(stats).to.have.property('h');",
											"    pm.expect(stats).to.have.property('l');",
											"    pm.expect(stats).to.have.property('c');",
											"    pm.expect(stats).to.have.property('v');",
											"    pm.expect(stats).to.have.property('s');",
											"    pm.expect(stats).to.have.property('total_growth');",
											"    pm.expect(stats).to.have.property('__typename');",
											"});",
											"",
											"// Validate __typename values",
											"pm.test(\"Correct __typename values\", function () {",
											"    pm.expect(stats.__typename).to.equal('StockIntradayStatsResult');",
											"    pm.expect(stats.total_growth.__typename).to.equal('StockGrowth');",
											"});",
											"",
											"// Validate status",
											"pm.test(\"Status is 'ok'\", function () {",
											"    pm.expect(stats.s).to.equal('ok');",
											"});",
											"",
											"// Validate timestamp array (t)",
											"pm.test(\"Timestamp array has valid values\", function () {",
											"    pm.expect(stats.t).to.be.an('array').that.is.not.empty;",
											"    stats.t.forEach(timestamp => {",
											"        pm.expect(timestamp).to.be.a('number');",
											"        // Basic timestamp validation (assuming it's Unix timestamp in seconds)",
											"        pm.expect(timestamp).to.be.above(1600000000);",
											"    });",
											"});",
											"",
											"// Validate price arrays (o, h, l, c)",
											"['o', 'h', 'l', 'c'].forEach(field => {",
											"    pm.test(`Price array ${field} has valid values`, function () {",
											"        pm.expect(stats[field]).to.be.an('array').that.is.not.empty;",
											"        stats[field].forEach(price => {",
											"            pm.expect(price).to.be.a('number');",
											"            pm.expect(price).to.be.above(0);",
											"        });",
											"    });",
											"});",
											"",
											"// Validate volume array (v)",
											"pm.test(\"Volume array has valid values\", function () {",
											"    pm.expect(stats.v).to.be.an('array').that.is.not.empty;",
											"    stats.v.forEach(volume => {",
											"        pm.expect(volume).to.be.a('number');",
											"        pm.expect(volume).to.be.above(0);",
											"    });",
											"});",
											"",
											"// Validate total_growth object",
											"pm.test(\"Total growth has correct structure\", function () {",
											"    const growth = stats.total_growth;",
											"    pm.expect(growth).to.have.property('growth_amount');",
											"    pm.expect(growth).to.have.property('growth_rate');",
											"    ",
											"    pm.expect(growth.growth_amount).to.be.a('number');",
											"    pm.expect(growth.growth_rate).to.be.a('number');",
											"});",
											"",
											"// Validate array lengths consistency (optional - depends on your API contract)",
											"pm.test(\"Arrays have consistent lengths\", function () {",
											"    // t array is typically longer as it contains all timestamps",
											"    const timestampCount = stats.t.length;",
											"    ",
											"    // o, h, l, c should have same length (or 1 if same for all intervals)",
											"    pm.expect(stats.o.length).to.be.oneOf([1, timestampCount]);",
											"    pm.expect(stats.h.length).to.be.oneOf([1, timestampCount]);",
											"    pm.expect(stats.l.length).to.be.oneOf([1, timestampCount]);",
											"    pm.expect(stats.c.length).to.be.oneOf([1, timestampCount]);",
											"    ",
											"    // v should match timestamp count",
											"    pm.expect(stats.v.length).to.equal(timestampCount);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"GetStockIntradayStats\",\n    \"variables\": {\n        \"stock_code\": \"HPG\",\n        \"type\": \"D\"\n    },\n    \"query\": \"query GetStockIntradayStats($stock_code: String!, $group_by: String, $type: String) {\\n  get_stock_intraday_stats(\\n    input: {stock_code: $stock_code, group_by: $group_by, type: $type}\\n  ) {\\n    t\\n    o\\n    h\\n    l\\n    c\\n    v\\n    s\\n    total_growth {\\n      growth_amount\\n      growth_rate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_stock_details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData).to.have.property('extensions');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"    pm.expect(jsonData.extensions).to.be.an('object');",
											"});",
											"",
											"// 5. Validate extensions timing",
											"pm.test(\"Extensions timing is valid\", function() {",
											"    pm.expect(jsonData.extensions.timing).to.be.a('number');",
											"    pm.expect(jsonData.extensions.timing).to.be.at.least(0);",
											"});",
											"",
											"// 6. Validate stock details object exists",
											"pm.test(\"Stock details object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('get_stock_details');",
											"    const stockDetails = jsonData.data.get_stock_details;",
											"    pm.expect(stockDetails).to.be.an('object');",
											"});",
											"",
											"const stockDetails = jsonData.data.get_stock_details;",
											"",
											"// 7. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    pm.expect(stockDetails).to.have.property('sector');",
											"    pm.expect(stockDetails).to.have.property('__typename');",
											"});",
											"",
											"// 8. Validate __typename values",
											"pm.test(\"Correct __typename values\", function() {",
											"    pm.expect(stockDetails.__typename).to.equal('StockDetailsResult');",
											"    pm.expect(stockDetails.sector.__typename).to.equal('StockIndustry');",
											"    pm.expect(stockDetails.sector.metrics.__typename).to.equal('StockIndustryMetrics');",
											"});",
											"",
											"// 9. Validate sector metrics structure",
											"pm.test(\"Sector metrics has correct structure\", function() {",
											"    const metrics = stockDetails.sector.metrics;",
											"    pm.expect(metrics).to.be.an('object');",
											"    ",
											"    // Validate ID",
											"    pm.expect(metrics).to.have.property('id');",
											"    pm.expect(metrics.id).to.be.a('string');",
											"    pm.expect(metrics.id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"    ",
											"    // Validate valuation metrics",
											"    const valuationMetrics = ['avg_pb', 'avg_pe', 'max_pb', 'max_pe', 'min_pb', 'min_pe'];",
											"    valuationMetrics.forEach(metric => {",
											"        pm.expect(metrics).to.have.property(metric);",
											"        pm.expect(metrics[metric]).to.be.a('number');",
											"    });",
											"    ",
											"    // Validate timestamps",
											"    pm.expect(metrics).to.have.property('created_at');",
											"    pm.expect(new Date(metrics.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(metrics).to.have.property('updated_at');",
											"    pm.expect(new Date(metrics.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate created_at equals updated_at (assuming no updates)",
											"    pm.expect(metrics.created_at).to.equal(metrics.updated_at);",
											"});",
											"",
											"// 10. Validate metric value relationships",
											"pm.test(\"Metric values have correct relationships\", function() {",
											"    const m = stockDetails.sector.metrics;",
											"    ",
											"    // Validate min <= avg <= max for PB",
											"    pm.expect(m.min_pb).to.be.at.most(m.avg_pb);",
											"    pm.expect(m.avg_pb).to.be.at.most(m.max_pb);",
											"    ",
											"    // Validate min <= avg <= max for PE (handling negative PE)",
											"    pm.expect(m.min_pe).to.be.at.most(m.avg_pe);",
											"    pm.expect(m.avg_pe).to.be.at.most(m.max_pe);",
											"    ",
											"    // Validate PB ratios are positive",
											"    pm.expect(m.min_pb).to.be.above(0);",
											"    pm.expect(m.avg_pb).to.be.above(0);",
											"    pm.expect(m.max_pb).to.be.above(0);",
											"});",
											"",
											"// 11. Validate no unexpected fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    // Top level",
											"    const expectedTopFields = ['data', 'extensions'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(expectedTopFields);",
											"    ",
											"    // Stock details level",
											"    const expectedStockFields = ['sector', '__typename'];",
											"    pm.expect(Object.keys(stockDetails)).to.eql(expectedStockFields);",
											"    ",
											"    // Sector level",
											"    const expectedSectorFields = ['metrics', '__typename'];",
											"    pm.expect(Object.keys(stockDetails.sector)).to.eql(expectedSectorFields);",
											"});",
											"",
											"// 12. Store metrics for future tests",
											"pm.environment.set(\"sector_avg_pb\", stockDetails.sector.metrics.avg_pb);",
											"pm.environment.set(\"sector_avg_pe\", stockDetails.sector.metrics.avg_pe);",
											"pm.environment.set(\"metrics_updated_at\", stockDetails.sector.metrics.updated_at);",
											"",
											"// 13. Additional validation for negative PE",
											"pm.test(\"Negative PE values are valid\", function() {",
											"    const peValues = [",
											"        stockDetails.sector.metrics.avg_pe,",
											"        stockDetails.sector.metrics.min_pe",
											"    ];",
											"    ",
											"    peValues.forEach(pe => {",
											"        if (pe < 0) {",
											"            pm.expect(pe).to.be.below(0);",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"GetStockDetails\",\n    \"variables\": {\n        \"stock_code\": \"HPG\"\n    },\n    \"query\": \"query GetStockDetails($stock_code: String!) {\\n  get_stock_details(input: {stock_code: $stock_code}) {\\n    sector {\\n      metrics {\\n        id\\n        avg_pb\\n        avg_pe\\n        max_pb\\n        max_pe\\n        min_pb\\n        min_pe\\n        created_at\\n        updated_at\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "stock_evaluation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 3. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 4. Validate stock evaluation object exists",
											"pm.test(\"Stock evaluation object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('stock_evaluation');",
											"    const evaluation = jsonData.data.stock_evaluation;",
											"    pm.expect(evaluation).to.be.an('object');",
											"});",
											"",
											"const evaluation = jsonData.data.stock_evaluation;",
											"",
											"// 5. Validate required fields",
											"pm.test(\"Contains all required fields\", function() {",
											"    const requiredFields = [",
											"        'id',",
											"        'created_at',",
											"        'updated_at',",
											"        'stock_asset_id',",
											"        'evaluation_score',",
											"        'eval_valuation',",
											"        'eval_growth_potential',",
											"        'eval_performance',",
											"        'eval_financial_health',",
											"        'eval_dividend',",
											"        'advantage_1',",
											"        'advantage_2',",
											"        'advantage_3',",
											"        'disadvantage_1',",
											"        'disadvantage_2',",
											"        'disadvantage_3',",
											"        '__typename'",
											"    ];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(evaluation).to.have.property(field);",
											"    });",
											"});",
											"",
											"// 6. Validate ID formats",
											"pm.test(\"IDs have correct format\", function() {",
											"    pm.expect(evaluation.id).to.be.a('string');",
											"    pm.expect(evaluation.id).to.match(/^[a-z0-9]{20,25}$/); // UUID-like format",
											"    ",
											"    pm.expect(evaluation.stock_asset_id).to.be.a('string');",
											"    pm.expect(evaluation.stock_asset_id).to.match(/^[a-f0-9]{24}$/); // MongoDB ObjectId format",
											"});",
											"",
											"// 7. Validate timestamps",
											"pm.test(\"Timestamps are valid\", function() {",
											"    pm.expect(evaluation.created_at).to.be.a('string');",
											"    pm.expect(new Date(evaluation.created_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    pm.expect(evaluation.updated_at).to.be.a('string');",
											"    pm.expect(new Date(evaluation.updated_at).toString()).to.not.equal('Invalid Date');",
											"    ",
											"    // Validate updated_at is after created_at",
											"    const createdAt = new Date(evaluation.created_at);",
											"    const updatedAt = new Date(evaluation.updated_at);",
											"    pm.expect(updatedAt.getTime()).to.be.greaterThan(createdAt.getTime());",
											"});",
											"",
											"// 8. Validate evaluation scores",
											"pm.test(\"Evaluation scores are valid\", function() {",
											"    const scoreFields = [",
											"        'evaluation_score',",
											"        'eval_valuation',",
											"        'eval_growth_potential',",
											"        'eval_performance',",
											"        'eval_financial_health',",
											"        'eval_dividend'",
											"    ];",
											"    ",
											"    scoreFields.forEach(field => {",
											"        pm.expect(evaluation[field]).to.be.a('number');",
											"        pm.expect(evaluation[field]).to.be.at.least(1);",
											"        pm.expect(evaluation[field]).to.be.at.most(5);",
											"    });",
											"});",
											"",
											"// 9. Validate advantages and disadvantages",
											"pm.test(\"Advantages and disadvantages are valid\", function() {",
											"    for (let i = 1; i <= 3; i++) {",
											"        pm.expect(evaluation[`advantage_${i}`]).to.be.a('string');",
											"        pm.expect(evaluation[`advantage_${i}`].length).to.be.at.least(20);",
											"        ",
											"        pm.expect(evaluation[`disadvantage_${i}`]).to.be.a('string');",
											"        pm.expect(evaluation[`disadvantage_${i}`].length).to.be.at.least(20);",
											"    }",
											"});",
											"",
											"// 10. Validate __typename",
											"pm.test(\"Correct __typename\", function() {",
											"    pm.expect(evaluation.__typename).to.equal('StockEvaluation');",
											"});",
											"",
											"// 11. Validate score consistency",
											"pm.test(\"Evaluation score is consistent with category scores\", function() {",
											"    const categoryScores = [",
											"        evaluation.eval_valuation,",
											"        evaluation.eval_growth_potential,",
											"        evaluation.eval_performance,",
											"        evaluation.eval_financial_health,",
											"        evaluation.eval_dividend",
											"    ];",
											"    ",
											"    const averageScore = categoryScores.reduce((a, b) => a + b, 0) / categoryScores.length;",
											"    pm.expect(evaluation.evaluation_score).to.be.closeTo(averageScore, 0.5);",
											"});",
											"",
											"// 12. Store evaluation data for future tests",
											"pm.environment.set(\"stock_evaluation_id\", evaluation.id);",
											"pm.environment.set(\"stock_asset_id\", evaluation.stock_asset_id);",
											"pm.environment.set(\"evaluation_score\", evaluation.evaluation_score);",
											"",
											"// 13. Validate text content contains key terms",
											"pm.test(\"Disadvantages contain financial metrics\", function() {",
											"    const financialTerms = ['%', 'LNST', 'doanh thu', 'Nợ vay'];",
											"    financialTerms.forEach(term => {",
											"        pm.expect(evaluation.disadvantage_1 + evaluation.disadvantage_2 + evaluation.disadvantage_3)",
											"          .to.include(term);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"stock_evaluation\",\n    \"variables\": {\n        \"stock_asset_id\": \"621de88fd734d70009edb5a6\"\n    },\n    \"query\": \"query stock_evaluation($stock_asset_id: ID) {\\n  stock_evaluation(stock_asset_id: $stock_asset_id) {\\n    ... on StockEvaluation {\\n      id\\n      created_at\\n      updated_at\\n      stock_asset_id\\n      evaluation_score\\n      eval_valuation\\n      eval_growth_potential\\n      eval_performance\\n      eval_financial_health\\n      eval_dividend\\n      advantage_1\\n      advantage_2\\n      advantage_3\\n      disadvantage_1\\n      disadvantage_2\\n      disadvantage_3\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "stock_contents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Basic Response Validation",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has JSON content type\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 2. Structure Validation",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has correct structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data.stock_contents).to.exist;",
											"});",
											"",
											"// 3. Validate Stock Contents Connection",
											"const stockContents = jsonData.data.stock_contents;",
											"",
											"pm.test(\"StockContents has correct typename\", function() {",
											"    pm.expect(stockContents.__typename).to.equal(\"StockContentConnection\");",
											"});",
											"",
											"pm.test(\"Nodes array exists and has items\", function() {",
											"    pm.expect(stockContents.nodes).to.be.an('array');",
											"    pm.expect(stockContents.nodes.length).to.be.at.least(1);",
											"});",
											"",
											"// 4. Validate Individual Stock Content Items",
											"stockContents.nodes.forEach((content, index) => {",
											"    const itemPrefix = `Content Item ${index + 1}`;",
											"    ",
											"    // 4.1 Validate basic fields",
											"    pm.test(`${itemPrefix} has required fields`, function() {",
											"        pm.expect(content).to.have.property('id');",
											"        pm.expect(content).to.have.property('code');",
											"        pm.expect(content).to.have.property('status');",
											"        pm.expect(content).to.have.property('content');",
											"        pm.expect(content).to.have.property('parsed_content');",
											"        pm.expect(content.__typename).to.equal(\"StockContent\");",
											"    });",
											"",
											"    // 4.2 Validate ID format",
											"    pm.test(`${itemPrefix} has valid ID format`, function() {",
											"        pm.expect(content.id).to.match(/^[a-z0-9]{20,25}$/);",
											"    });",
											"",
											"    // 4.3 Validate timestamps",
											"    pm.test(`${itemPrefix} has valid timestamps`, function() {",
											"        const dateFields = ['created_at', 'updated_at', 'published_at'];",
											"        dateFields.forEach(field => {",
											"            pm.expect(content[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
											"            pm.expect(new Date(content[field])).to.not.equal('Invalid Date');",
											"        });",
											"        ",
											"        // Validate chronology",
											"        pm.expect(new Date(content.updated_at) >= new Date(content.created_at)).to.be.true;",
											"    });",
											"",
											"    // 4.4 Validate code format",
											"    pm.test(`${itemPrefix} has valid code format`, function() {",
											"        pm.expect(content.code).to.match(/^[A-Z0-9_]+$/);",
											"    });",
											"",
											"    // 4.5 Validate status",
											"    pm.test(`${itemPrefix} has valid status`, function() {",
											"        pm.expect(content.status).to.be.oneOf(['ACTIVE', 'INACTIVE', 'DRAFT']);",
											"    });",
											"",
											"    // 4.6 Validate icon URL",
											"    pm.test(`${itemPrefix} has valid icon URL`, function() {",
											"        pm.expect(content.icon).to.include('https://');",
											"        pm.expect(content.icon).to.include(content.code.toLowerCase().replace('_', '-'));",
											"        pm.expect(content.icon).to.include('.svg');",
											"    });",
											"",
											"    // 4.7 Validate content templates",
											"    pm.test(`${itemPrefix} has valid content template`, function() {",
											"        pm.expect(content.content).to.be.a('string');",
											"        pm.expect(content.content).to.include('%s'); // Contains template placeholders",
											"    });",
											"",
											"    // 4.8 Validate parsed content",
											"    pm.test(`${itemPrefix} has valid parsed content`, function() {",
											"        pm.expect(content.parsed_content).to.be.a('string');",
											"        pm.expect(content.parsed_content.length).to.be.at.least(10);",
											"        ",
											"        // Check if parsed content matches template type",
											"        if (content.code === 'PB_1') {",
											"            pm.expect(content.parsed_content).to.include('P/B');",
											"            pm.expect(content.parsed_content).to.match(/\\(\\d+\\.\\d\\)/);",
											"        }",
											"        if (content.code === 'PE_1') {",
											"            pm.expect(content.parsed_content).to.include('P/E');",
											"            pm.expect(content.parsed_content).to.match(/\\(\\d+\\.\\d\\)/);",
											"        }",
											"    });",
											"});",
											"",
											"",
											"// 6. Validate No Unexpected Fields",
											"pm.test(\"No extra fields in response\", function() {",
											"    const allowedTopLevel = ['data'];",
											"    pm.expect(Object.keys(jsonData)).to.eql(allowedTopLevel);",
											"    ",
											"    const allowedContentFields = ['nodes', '__typename'];",
											"    pm.expect(Object.keys(stockContents)).to.eql(allowedContentFields);",
											"    ",
											"    const allowedItemFields = [",
											"        'id', 'created_at', 'updated_at', 'code', 'icon',",
											"        'status', 'content', 'published_at', 'parsed_content', '__typename'",
											"    ];",
											"    ",
											"    stockContents.nodes.forEach(item => {",
											"        pm.expect(Object.keys(item)).to.eql(allowedItemFields);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"stock_contents\",\n    \"variables\": {\n        \"sort_keys\": \"PUBLISHED_AT\",\n        \"stock_asset_id\": \"621de88fd734d70009edb5a6\",\n        \"query\": \"code:PE_1,PB_1 stockAssetId:62261d6c2de804000953f596 status:ACTIVE publishedAt:2025-06-25T08:39:11.192Z\"\n    },\n    \"query\": \"query stock_contents($after: String, $before: String, $first: Int, $last: Int, $reverse: Boolean, $sort_keys: StockContentSortKeys, $query: String, $stock_asset_id: ID!) {\\n  stock_contents(\\n    after: $after\\n    before: $before\\n    first: $first\\n    last: $last\\n    reverse: $reverse\\n    sort_keys: $sort_keys\\n    query: $query\\n  ) {\\n    nodes {\\n      id\\n      created_at\\n      updated_at\\n      code\\n      icon\\n      status\\n      content\\n      published_at\\n      parsed_content(stock_asset_id: $stock_asset_id)\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_stock_details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response structure valid\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.data.get_stock_details.categories).to.be.an('array').with.lengthOf(5);",
											"    pm.expect(response.extensions.timing).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Category validation\", () => {",
											"    const categories = pm.response.json().data.get_stock_details.categories;",
											"    ",
											"    categories.forEach(category => {",
											"        // Required fields",
											"        pm.expect(category).to.have.all.keys([",
											"            'is_highlighted', 'count', 'description',",
											"            'name', 'updated_at', 'icon', 'id', '__typename'",
											"        ]);",
											"        ",
											"        // Data types",
											"        pm.expect(category.count).to.be.a('number').above(0);",
											"        pm.expect(new Date(category.updated_at)).to.be.a('date');",
											"        pm.expect(category.icon).to.match(/\\.svg$/);",
											"    });",
											"});",
											"",
											"pm.test(\"Highlighted categories\", () => {",
											"    const highlighted = pm.response.json().data.get_stock_details.categories",
											"        .filter(c => c.is_highlighted);",
											"    pm.expect(highlighted.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"VN100 category check\", () => {",
											"    const vn30 = pm.response.json().data.get_stock_details.categories",
											"        .find(c => c.name === \"VN100\");",
											"    pm.expect(vn30.count).to.equal(100);",
											"});",
											"",
											"pm.test(\"VN30 category check\", () => {",
											"    const vn30 = pm.response.json().data.get_stock_details.categories",
											"        .find(c => c.name === \"VN30\");",
											"    pm.expect(vn30.count).to.equal(30);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"operationName\": \"GetStockDetails\",\n    \"variables\": {\n        \"stock_code\": \"HPG\"\n    },\n    \"query\": \"query GetStockDetails($stock_code: String!) {\\n  get_stock_details(input: {stock_code: $stock_code}) {\\n    categories {\\n      is_highlighted\\n      count\\n      description\\n      name\\n      updated_at\\n      icon\\n      id\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/alpha/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"alpha",
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Webview Finavi",
					"item": [
						{
							"name": "st_partner_login_webview",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Validate response status code",
											"pm.test(\"Status code is 200 (OK)\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// 2. Validate response headers",
											"pm.test(\"Content-Type is application/json\", function() {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// 3. Validate response time is reasonable",
											"pm.test(\"Response time is under 500ms\", function() {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"// 4. Parse and validate JSON structure",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response has valid JSON structure\", function() {",
											"    pm.expect(jsonData).to.be.an('object');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});",
											"",
											"// 5. Validate webview object exists",
											"pm.test(\"Login webview object exists\", function() {",
											"    pm.expect(jsonData.data).to.have.property('st_partner_login_webview');",
											"    pm.expect(jsonData.data.st_partner_login_webview).to.be.an('object');",
											"});",
											"",
											"const webview = jsonData.data.st_partner_login_webview;",
											"",
											"// 6. Validate webview URL field",
											"pm.test(\"Webview URL exists and is valid\", function() {",
											"    pm.expect(webview).to.have.property('webview_url');",
											"    pm.expect(webview.webview_url).to.be.a('string');",
											"    ",
											"    // Validate URL format",
											"    pm.expect(webview.webview_url).to.match(/^https?:\\/\\/.+/);",
											"    ",
											"    // Validate it's a secure HTTPS URL",
											"    pm.expect(webview.webview_url).to.include('https://');",
											"    ",
											"    // Validate domain matches expected pattern",
											"    pm.expect(webview.webview_url).to.include('jbsv.com.vn');",
											"    ",
											"    // Validate path contains 'login'",
											"    pm.expect(webview.webview_url).to.include('/login');",
											"});",
											"",
											"// 7. Store the webview URL for future use",
											"pm.environment.set(\"login_webview_url\", webview.webview_url);",
											"",
											"// 8. Additional validation for UAT environment",
											"pm.test(\"Webview URL points to UAT environment\", function() {",
											"    pm.expect(webview.webview_url).to.include('uat-');",
											"});",
											"",
											"// 9. Validate URL is accessible (optional - can be commented out for performance)",
											"pm.test(\"Webview URL is reachable (HTTP 200)\", function() {",
											"    const url = webview.webview_url;",
											"    pm.sendRequest(url, function(err, res) {",
											"        pm.expect(err).to.be.null;",
											"        pm.expect(res.code).to.be.oneOf([200, 302]); // Allow redirects",
											"    });",
											"});",
											"",
											"// 10. Validate no unexpected fields exist",
											"pm.test(\"No extra fields in response\", function() {",
											"    const expectedFields = ['webview_url'];",
											"    const actualFields = Object.keys(webview);",
											"    pm.expect(actualFields).to.eql(expectedFields);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": \"query{st_partner_login_webview{webview_url}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stock-api-v2.infina.dev/graphql",
									"protocol": "https",
									"host": [
										"stock-api-v2",
										"infina",
										"dev"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SignOut",
					"item": [
						{
							"name": "signout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// 1. Validate status 200OK and the response structure",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"✅ Validate Signout Response\", function () {",
											"    let response = pm.response.json();",
											"",
											"    // Validate top-level structure",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
											"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
											"",
											"    // Validate \"signout\" property in the \"data\" object",
											"    pm.expect(response.data).to.have.property(\"signout\").that.is.a(\"string\").and.equals(\"success\");",
											"",
											"    // Validate \"extensions\"",
											"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
											"",
											"    console.log(\"✅ Signout Response is valid!\");",
											"});",
											"",
											"",
											"// 2. Clear collection variables",
											"pm.test(\"Clear all collection variables after signout\", function() {",
											"    // Get current variables",
											"    const vars = pm.collectionVariables.toObject();",
											"    const varCount = Object.keys(vars).length;",
											"    ",
											"    if (varCount > 0) {",
											"        // Log which variables are being cleared",
											"        console.log(`Clearing ${varCount} collection variables:`, Object.keys(vars));",
											"        ",
											"        // Clear all variables",
											"        pm.collectionVariables.clear();",
											"        ",
											"        // Verify they're gone",
											"        pm.expect(Object.keys(pm.collectionVariables.toObject()).length).to.equal(0);",
											"    } else {",
											"        console.log(\"No collection variables to clear\");",
											"        pm.expect(true).to.be.true; // dummy assertion so test doesn't fail",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-infina-app-version",
										"value": "{{x-infina-app-version}}",
										"type": "text"
									},
									{
										"key": "x-infina-api-key",
										"value": "{{x-infina-api-key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"variables\": {\n        \"onesignal_id\": \"d94a83aa-4a3c-4c1a-9171-ac36900e0523\"\n    },\n    \"query\": \"mutation ($onesignal_id: String) {\\n  signout(input: {onesignal_id: $onesignal_id})\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.realstake.co/api/graphiql",
									"protocol": "https",
									"host": [
										"staging",
										"realstake",
										"co"
									],
									"path": [
										"api",
										"graphiql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set('baseUrl', \"https://staging.realstake.co/api\");",
					"pm.collectionVariables.set('x-infina-api-key', \"zTW9S4LF5qGQfCAJzOiKGAR0Y2dTuAKs\");",
					"pm.collectionVariables.set('x-infina-app-version', \"9.26.13\");",
					"pm.collectionVariables.set('requestSecret', \"476f85ba2d4bc9a3caea55813e14dac9\");",
					"",
					"",
					"// // Set the maximum number of retries",
					"// pm.collectionVariables.set(\"maxRetries\", 3);",
					"",
					"// // Set the delay between retries (in milliseconds)",
					"// pm.collectionVariables.set(\"retryDelay\", 2000); // 2 seconds"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "x-infina-api-key",
			"value": ""
		},
		{
			"key": "x-infina-app-version",
			"value": ""
		},
		{
			"key": "requestSecret",
			"value": ""
		},
		{
			"key": "phoneNumber",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "pinCode",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "userid",
			"value": ""
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "MapId",
			"value": ""
		}
	]
}