{
	"info": {
		"_postman_id": "acced7d5-78b0-402e-9217-a2cd4feb056a",
		"name": "Infina-B2C_Realstake_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3169862",
		"_collection_link": "https://dark-equinox-267507.postman.co/workspace/258e2ddd-0762-413b-b252-4b5ee6799f06/collection/3169862-acced7d5-78b0-402e-9217-a2cd4feb056a?action=share&source=collection_link&creator=3169862"
	},
	"item": [
		{
			"name": "SignUp",
			"item": [
				{
					"name": "send_phone_verification_token (registerUser)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Register first_name, last_name adn phone randomly",
									"pm.test(\"Generate random user data\", function () {",
									"    function getRandomElement(arr) {",
									"        return arr[Math.floor(Math.random() * arr.length)];",
									"    }",
									"    ",
									"    let randomPhone = \"0152000\" + (100 + Math.floor(Math.random() * 701)); // phone random 0150000100 ~ 0150000800",
									"    pm.collectionVariables.set(\"randomPhone\", randomPhone);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Send Phone Verification Token Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"send_phone_verification_token\" object in \"data\"",
									"    pm.expect(response.data).to.have.property(\"send_phone_verification_token\").that.is.an(\"object\");",
									"",
									"    // Validate status in \"send_phone_verification_token\"",
									"    pm.expect(response.data.send_phone_verification_token).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Send Phone Verification Token Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"check_exist\": false,\n        \"phone\": \"{{randomPhone}}\",\n        \"otp_length\": 6\n    },\n    \"query\": \"mutation ($phone: String, $check_exist: Boolean, $otp_length: Int) {\\n  send_phone_verification_token(\\n    input: {phone: $phone, check_exist: $check_exist, otp_length: $otp_length}\\n  ) {\\n    status\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "signup_v4 (register)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"var refresh_token = jsonData.data.signup_v4.api_client.refresh_token;",
									"pm.collectionVariables.set('refresh_token', refresh_token);",
									"console.log('refresh_token : ' + refresh_token);",
									"",
									"var access_token = jsonData.data.signup_v4.api_client.access_token;",
									"pm.collectionVariables.set('access_token', access_token);",
									"console.log('access_token : ' + access_token);",
									"",
									"var phone = jsonData.data.signup_v4.api_client.user.phone;",
									"pm.collectionVariables.set('phone', phone);",
									"console.log('phone : ' + phone);",
									"",
									"var id = jsonData.data.signup_v4.api_client.user.id;",
									"pm.collectionVariables.set('id', id);",
									"console.log('userid : ' + id);",
									"",
									"var uid = jsonData.data.signup_v4.api_client.user.uid;",
									"pm.collectionVariables.set('uid', uid);",
									"console.log('UID : ' + uid);",
									"",
									"",
									"",
									"",
									"pm.test(\"✅ Validate signup_v4 response\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Top-level validation",
									"    pm.expect(jsonData).to.have.nested.property(\"data.signup_v4.api_client\");",
									"    pm.expect(jsonData).to.have.nested.property(\"data.signup_v4.flow\", \"sign_up\");",
									"",
									"    const client = jsonData.data.signup_v4.api_client;",
									"    const user = client.user;",
									"",
									"    // Token and metadata",
									"    pm.expect(client).to.have.property(\"access_token\").that.is.a(\"string\");",
									"    pm.expect(client).to.have.property(\"refresh_token\").that.is.a(\"string\");",
									"    pm.expect(client).to.have.property(\"ip_address\").that.is.a(\"string\");",
									"",
									"    // User basic info",
									"    pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");",
									"    pm.expect(user).to.have.property(\"phone\").that.is.a(\"string\");",
									"    pm.expect(user).to.have.property(\"uid\").that.is.a(\"string\");",
									"    pm.expect(user).to.have.property(\"status\", \"registered\");",
									"    pm.expect(user).to.have.property(\"verified_phone\", true);",
									"",
									"    // KYC validation",
									"    pm.expect(user).to.have.nested.property(\"kyc.status\").that.is.a(\"string\");",
									"",
									"    // User credit",
									"    pm.expect(user.user_credits).to.be.an(\"array\").that.is.not.empty;",
									"    pm.expect(user.user_credits[0]).to.have.property(\"reward_balance\");",
									"",
									"    // Validate extensions.timing",
									"    pm.expect(jsonData).to.have.nested.property(\"extensions.timing\").that.is.a(\"number\");",
									"",
									"    console.log(\"✅ Signup v4 Response is valid!\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"not_allow_signup\": true,\n        \"email\": \"\",\n        \"phone\": \"{{randomPhone}}\",\n        \"pin_code\": \"686868\", //hardcode OTP 686868\n        \"platform\": \"ios\",\n        \"device\": \"$guid\",\n        \"fcm_token\": \"{{$guid}}:APA91bFVsdSihx4iIvzKHqkmnSg15GpP2QyQwvMx6-Zrj-A3b9OGozt1Sg2NNdr0mfqBGENGhDyt8Dh0P_XEi6gjrDP0D-yyOjErOUtY8KNZ__gu0LP3rHs\",\n        \"device_id\": \"\",\n        \"app_instance_id\": \"$guid\"\n    },\n    \"query\": \"mutation ($email: String!, $phone: String!, $pin_code: String!, $platform: String, $source: String, $not_allow_signup: Boolean, $device: String, $device_id: String, $app_instance_id: String, $fcm_token: String) {\\n  signup_v4(\\n    input: {email: $email, phone: $phone, pin_code: $pin_code, platform: $platform, source: $source, not_allow_signup: $not_allow_signup, device: $device, device_id: $device_id, app_instance_id: $app_instance_id, fcm_token: $fcm_token}\\n  ) {\\n    api_client {\\n      access_token\\n      ip_address\\n      refresh_token\\n      user {\\n        id\\n        ip_address\\n        uid\\n        email\\n        phone\\n        first_name\\n        last_name\\n        status\\n        has_pin_code\\n        pin_type\\n        pin_blocking_duration\\n        pin_allowed_attempts\\n        freshchat_restore_id\\n        avatar\\n        source\\n        confirm_contract\\n        contract_signed_at\\n        kyc {\\n          status\\n          address\\n          level_two_status\\n          passport_issue_date\\n          passport_issue_place\\n          document_type\\n          document_number\\n          idcard_issue_date\\n          idcard_issue_place\\n          idcard_type\\n          cmnd\\n          first_name\\n          manual_review\\n          last_name\\n          full_name\\n          idcard_back_page\\n          idcard_front_page\\n          __typename\\n        }\\n        user_credits {\\n          id\\n          reward_balance\\n          expired_at\\n          __typename\\n        }\\n        documents {\\n          url\\n          created_at\\n          __typename\\n        }\\n        verified_phone\\n        verified_email\\n        referral_code\\n        referral_url\\n        custom_referral_code\\n        bank_info {\\n          bank_name\\n          bank_city\\n          bank_branch\\n          account_number\\n          account_owner\\n          bank_support\\n          verified\\n          __typename\\n        }\\n        referred_code\\n        created_at\\n        discourse {\\n          is_sign_up\\n          sign_up_at\\n          __typename\\n        }\\n        completed_challenge\\n        synced_ii_at\\n        pin_unblock_at\\n        pin_enable_manual_unblock\\n        __typename\\n      }\\n      __typename\\n    }\\n    flow\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_pin_code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('pinCode', '111111');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Create Pin Code Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"create_pin_code\" in \"data\"",
									"    pm.expect(response.data).to.have.property(\"create_pin_code\").that.is.a(\"string\").and.not.empty;",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Create Pin Code Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"pin_code\": \"{{pinCode}}\"\n    },\n    \"query\": \"mutation ($pin_code: String) {\\n  create_pin_code(input: {pin_code: $pin_code})\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset Password",
			"item": [
				{
					"name": "send_phone_verification_token (resetPassword)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Send Phone Verification Token Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"send_phone_verification_token\" object in \"data\"",
									"    pm.expect(response.data).to.have.property(\"send_phone_verification_token\").that.is.an(\"object\");",
									"",
									"    // Validate status in \"send_phone_verification_token\"",
									"    pm.expect(response.data.send_phone_verification_token).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Send Phone Verification Token Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"check_exist\": false,\n        \"phone\": \"{{phone}}\",\n        \"otp_length\": 6\n    },\n    \"query\": \"mutation ($phone: String, $check_exist: Boolean, $otp_length: Int) {\\n  send_phone_verification_token(\\n    input: {phone: $phone, check_exist: $check_exist, otp_length: $otp_length}\\n  ) {\\n    status\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify_phone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate Verify Phone Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"verify_phone\" object",
									"    pm.expect(response.data).to.have.property(\"verify_phone\").that.is.an(\"object\");",
									"",
									"    // Validate \"status\" in \"verify_phone\"",
									"    pm.expect(response.data.verify_phone).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Verify Phone Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"phone\": \"{{phone}}\",\n        \"token\": \"686868\"\n    },\n    \"query\": \"mutation ($phone: String!, $token: String!) {\\n  verify_phone(input: {phone: $phone, token: $token}) {\\n    status\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset_pw_by_phone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('password', \"12345678\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Reset Password by Phone Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"reset_pw_by_phone\" object",
									"    pm.expect(response.data).to.have.property(\"reset_pw_by_phone\").that.is.an(\"object\");",
									"",
									"    // Validate \"id\" in \"reset_pw_by_phone\"",
									"    pm.expect(response.data.reset_pw_by_phone).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Reset Password by Phone Response is valid!\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"phone\": \"{{phone}}\",\n        \"pin_code\": \"686868\",\n        \"new_password\": \"{{password}}\",\n        \"confirm_password\": \"{{password}}\"\n    },\n    \"query\": \"mutation ($phone: String, $pin_code: String, $new_password: String, $confirm_password: String) {\\n  reset_pw_by_phone(\\n    input: {phone: $phone, pin_code: $pin_code, new_password: $new_password, confirm_password: $confirm_password}\\n  ) {\\n    id\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify UserInfo and VA Account (not eKYC)",
			"item": [
				{
					"name": "SignIn & Relogin (1st)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Handle login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.errors && jsonData.errors.length > 0) {",
									"        var error = jsonData.errors[0];",
									"        ",
									"        if (error.key === \"multiple_active_sessions\" && error.details && error.details.reLoginToken) {",
									"            pm.environment.set(\"reLoginToken\", error.details.reLoginToken);",
									"            ",
									"            // Call API re_login after login multi session",
									"            pm.sendRequest({",
									"                url: pm.collectionVariables.get(\"baseUrl\"),",
									"                method: \"POST\",",
									"                header: {",
									"                    \"Content-Type\": \"application/json\",",
									"                    \"x-infina-app-version\": pm.collectionVariables.get(\"x-infina-app-version\"),",
									"                    \"x-infina-api-key\": pm.collectionVariables.get(\"x-infina-api-key\")",
									"                },",
									"                body: {",
									"                    mode: \"raw\",",
									"                    raw: JSON.stringify({",
									"                        variables: {",
									"                            input: {",
									"                                re_login_token: error.details.reLoginToken",
									"                            }",
									"                        },",
									"                        query: \"mutation ($input: ReLoginInput) {\\n  re_login(input: $input) {\\n    api_client {\\n      access_token\\n      ip_address\\n      refresh_token\\n      user {\\n        id\\n        ip_address\\n        uid\\n        email\\n        phone\\n        first_name\\n        last_name\\n        status\\n        has_pin_code\\n        pin_type\\n        pin_blocking_duration\\n        pin_allowed_attempts\\n        freshchat_restore_id\\n        avatar\\n        confirm_contract\\n        contract_signed_at\\n        kyc {\\n          status\\n          address\\n          passport_issue_date\\n          passport_issue_place\\n          document_type\\n          document_number\\n          idcard_issue_date\\n          idcard_issue_place\\n          idcard_type\\n          cmnd\\n          first_name\\n          manual_review\\n          last_name\\n          full_name\\n          idcard_back_page\\n          idcard_front_page\\n          __typename\\n        }\\n        user_credits {\\n          id\\n          reward_balance\\n          expired_at\\n          __typename\\n        }\\n        documents {\\n          url\\n          created_at\\n          __typename\\n        }\\n        verified_phone\\n        verified_email\\n        referral_code\\n        referral_url\\n        custom_referral_code\\n        bank_info {\\n          bank_name\\n          bank_city\\n          bank_branch\\n          account_number\\n          account_owner\\n          bank_support\\n          verified\\n          __typename\\n        }\\n        referred_code\\n        created_at\\n        discourse {\\n          is_sign_up\\n          sign_up_at\\n          __typename\\n        }\\n        completed_challenge\\n        synced_ii_at\\n        pin_unblock_at\\n        pin_enable_manual_unblock\\n        __typename\\n      }\\n      __typename\\n    }\\n    flow\\n    __typename\\n  }\\n}\"",
									"                    })",
									"                }",
									"            }, function (err, res) {",
									"                if (!err && res.json().data && res.json().data.re_login.api_client) {",
									"                    let reLoginData = res.json().data.re_login.api_client;",
									"                    pm.collectionVariables.set(\"access_token\", reLoginData.access_token);",
									"                    pm.collectionVariables.set(\"refresh_token\", reLoginData.refresh_token);",
									"                    pm.collectionVariables.set(\"userid\", reLoginData.user.id);",
									"                    pm.collectionVariables.set(\"uid\", reLoginData.user.uid);",
									"                    pm.collectionVariables.set(\"MapId\", reLoginData.user.uid + '_SAV');",
									"                }",
									"                ",
									"            });",
									"        }",
									"    } else if (jsonData.data && jsonData.data.signin_v2) {",
									"        let loginData = jsonData.data.signin_v2;",
									"        pm.collectionVariables.set(\"access_token\", loginData.access_token);",
									"        pm.collectionVariables.set(\"refresh_token\", loginData.refresh_token);",
									"        pm.collectionVariables.set(\"userid\", loginData.user.id);",
									"        pm.collectionVariables.set(\"uid\", loginData.user.uid);",
									"        pm.collectionVariables.set(\"MapId\", loginData.user.uid + '_SAV');",
									"    }",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches signin_v2\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"signin_v2\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}",
								"type": "text"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"signin_v2\",\n    \"variables\": {\n        \"email\": \"{{phone}}\",\n        \"password\": \"{{password}}\",\n        \"fcm_token\": \"{{$guid}}:APA91bFVsdSihx4iIvzKHqkmnSg15GpP2QyQwvMx6-Zrj-A3b9OGozt1Sg2NNdr0mfqBGENGhDyt8Dh0P_XEi6gjrDP0D-yyOjErOUtY8KNZ__gu0LP3rHs\",\n        \"app_instance_id\": \"{{$guid}}\",\n        \"platform\":\"PostmanTest\"\n    },\n    \"query\":\"mutation signin_v2($email: String, $password: String, $app_instance_id: String, $fcm_token: String, $platform: String) {\\n  signin_v2(\\n    input: {email: $email, password: $password, app_instance_id: $app_instance_id, fcm_token: $fcm_token, platform: $platform}\\n  ) {\\n    access_token\\n    ip_address\\n    refresh_token\\n    user {\\n      id\\n      ip_address\\n      uid\\n      email\\n      phone\\n      first_name\\n      last_name\\n      status\\n      has_pin_code\\n      pin_type\\n      pin_blocking_duration\\n      pin_allowed_attempts\\n      freshchat_restore_id\\n      avatar\\n      confirm_contract\\n      contract_signed_at\\n      kyc {\\n        status\\n        address\\n        passport_issue_date\\n        passport_issue_place\\n        document_type\\n        document_number\\n        idcard_issue_date\\n        idcard_issue_place\\n        idcard_type\\n        cmnd\\n        first_name\\n        manual_review\\n        last_name\\n        full_name\\n        idcard_back_page\\n        idcard_front_page\\n        __typename\\n      }\\n      user_credits {\\n        id\\n        reward_balance\\n        expired_at\\n        __typename\\n      }\\n      documents {\\n        url\\n        created_at\\n        __typename\\n      }\\n      verified_phone\\n      verified_email\\n      referral_code\\n      referral_url\\n      custom_referral_code\\n      bank_info {\\n        bank_name\\n        bank_city\\n        bank_branch\\n        account_number\\n        account_owner\\n        bank_support\\n        verified\\n        __typename\\n      }\\n      referred_code\\n      created_at\\n      discourse {\\n        is_sign_up\\n        sign_up_at\\n        __typename\\n      }\\n      completed_challenge\\n      synced_ii_at\\n      pin_unblock_at\\n      pin_enable_manual_unblock\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "payment_bank_info (VA phoneNumber)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 20000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate payment_bank_info response\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Check that data.payment_bank_info exists and is a non-empty array",
									"    pm.expect(jsonData).to.have.nested.property(\"data.payment_bank_info\").that.is.an(\"array\").with.length.greaterThan(0);",
									"",
									"    const bankInfo = jsonData.data.payment_bank_info[0];",
									"",
									"    // Validate required fields",
									"    pm.expect(bankInfo).to.have.property(\"bank_code\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"bank_url\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"bank_name\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"account_name\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"account_number\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"bank_id_no\").that.is.a(\"string\");",
									"    pm.expect(bankInfo).to.have.property(\"type\", \"virtual_account\");",
									"    pm.expect(bankInfo).to.have.property(\"__typename\", \"PaymentBankInfoResult\");",
									"",
									"    // Optional: Validate extensions.timing exists and is a number",
									"    pm.expect(jsonData).to.have.nested.property(\"extensions.timing\").that.is.a(\"number\");",
									"",
									"    console.log(\"✅ Payment Bank Info Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"payment_bank_info\",\n    \"variables\": {},\n    \"query\": \"query payment_bank_info($origin: String, $receiver_id: String) {\\n  payment_bank_info(\\n    input: {product_type: \\\"flexible_savings\\\", origin: $origin, receiver_id: $receiver_id}\\n  ) {\\n    bank_code\\n    bank_url\\n    bank_name\\n    bank_branch\\n    account_name\\n    account_number\\n    bank_id_no\\n    type\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "me (new eKYC & not signContract)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your synced_ii_at is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.me.synced_ii_at).to.not.eql(null);",
									"});",
									"",
									"var jsonData = pm.response.json(); ",
									"var userId = jsonData.data.me.id; ",
									"pm.collectionVariables.set('userId', userId);",
									"console.log('userId', userId);",
									"",
									"var jsonData = pm.response.json(); ",
									"var uid = jsonData.data.me.uid; ",
									"pm.collectionVariables.set('MapId', uid + '_SAV');",
									"console.log('MapId', uid + '_SAV');",
									"",
									"",
									"",
									"",
									"pm.test(\"✅ Validate Me Data Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"me\" object",
									"    pm.expect(response.data).to.have.property(\"me\").that.is.an(\"object\");",
									"    let me = response.data.me;",
									"",
									"    // Validate properties within \"me\"",
									"    pm.expect(me).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(me).to.have.property(\"ip_address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(me).to.have.property(\"uid\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(me).to.have.property(\"email\").that.is.a(\"string\");  // Email could be empty",
									"    pm.expect(me).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(me).to.have.property(\"first_name\").that.is.a(\"string\").and.is.empty;",
									"    pm.expect(me).to.have.property(\"last_name\").that.is.a(\"string\").and.is.empty;",
									"    pm.expect(me).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"registered\");",
									"    pm.expect(me).to.have.property(\"has_pin_code\").that.is.a(\"boolean\");",
									"    pm.expect(me).to.have.property(\"avatar\").that.is.a(\"string\").and.match(/^https:\\/\\/.*\\.svg$/);  // Check for valid URL format",
									"",
									"",
									"    // Validate \"user_credits\" array",
									"    pm.expect(me).to.have.property(\"user_credits\").that.is.an(\"array\").with.lengthOf(1);",
									"    pm.expect(me.user_credits[0]).to.have.property(\"reward_balance\").that.is.a(\"number\").and.equals(0);",
									"",
									"    // Validate \"verified_phone\" and \"verified_email\" properties",
									"    pm.expect(me).to.have.property(\"verified_phone\").that.is.a(\"boolean\").and.equals(true);",
									"    pm.expect(me).to.have.property(\"verified_email\").that.is.a(\"boolean\").and.equals(false);",
									"",
									"    // Validate \"referral_code\" and \"referral_url\"",
									"    pm.expect(me).to.have.property(\"referral_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(me).to.have.property(\"referral_url\").that.is.a(\"string\").and.match(/^https:\\/\\/.*$/);  // Check for valid URL format",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Me Data Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"\\n  query me {\\n    me {\\n      \\n  id\\n  ip_address\\n  uid\\n  email\\n  phone\\n  first_name\\n  last_name\\n  status\\n  has_pin_code\\n  pin_type\\n  pin_blocking_duration\\n  pin_allowed_attempts\\n  freshchat_restore_id\\n  avatar\\n  confirm_contract\\n  contract_signed_at\\n  kyc {\\n    status\\n    address\\n    passport_issue_date\\n    passport_issue_place\\n    document_type\\n    document_number\\n    idcard_issue_date\\n    idcard_issue_place\\n    idcard_type\\n    cmnd\\n    first_name\\n    manual_review\\n    last_name\\n    full_name\\n    idcard_back_page\\n    idcard_front_page\\n  }\\n  user_credits {\\n    id\\n    reward_balance\\n    expired_at\\n  }\\n  documents {\\n    url\\n    created_at\\n  }\\n  verified_phone\\n  verified_email\\n  referral_code\\n  referral_url\\n  custom_referral_code\\n  bank_info {\\n    bank_name\\n    bank_city\\n    bank_branch\\n    account_number\\n    account_owner\\n    bank_support\\n    verified\\n  }\\n  referred_code\\n  created_at\\n  discourse {\\n    is_sign_up\\n    sign_up_at\\n  }\\n  completed_challenge\\n  synced_ii_at\\n  pin_unblock_at\\n  pin_enable_manual_unblock\\n\\n    }\\n  }\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "eKYC auto & signContract & updateBank",
			"item": [
				{
					"name": "eKYC - ma-giao-dich",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Check response structure and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Check that response contains required properties",
									"    pm.expect(response).to.have.property(\"data\").that.is.a(\"string\");",
									"    pm.expect(response).to.have.property(\"status\", 200);",
									"    pm.expect(response).to.have.property(\"message\", \"Thành công\");",
									"",
									"    // Log the data value for debugging",
									"    console.log(\"Data received:\", response.data);",
									"",
									"    // Example: Check if 'data' follows a specific pattern (UUID-like format)",
									"    pm.expect(response.data).to.match(/^[a-z0-9-]+$/);",
									"",
									"    console.log(\"✅ JSON response validation passed!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Code",
								"value": "REALSTAKE",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "a2eee4f5-730c-4721-b30c-1c2ba21e0293",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/proxy/fpt/api/public/all/ma-giao-dich",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"proxy",
								"fpt",
								"api",
								"public",
								"all",
								"ma-giao-dich"
							]
						}
					},
					"response": []
				},
				{
					"name": "eKYC - giay-to-xac-thuc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Check document data and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure the response contains the necessary properties",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");",
									"    pm.expect(response).to.have.property(\"status\", 200);",
									"    pm.expect(response).to.have.property(\"message\", \"Thành công\");",
									"",
									"    let data = response.data;",
									"",
									"    // Expected document types",
									"    let expectedDocuments = [",
									"        { ma: \"cmtnd\", ten: \"Chứng minh thư nhân dân\", place: \"1\" },",
									"        { ma: \"cccd\", ten: \"Căn cước công dân\", place: \"2\" },",
									"        { ma: \"hc\", ten: \"Hộ chiếu\", place: \"3\" }",
									"    ];",
									"",
									"    // Check each item in the data array",
									"    data.forEach((doc, index) => {",
									"        pm.expect(doc).to.have.property(\"oid\").that.is.a(\"string\");",
									"        pm.expect(doc).to.have.property(\"ma\").that.is.a(\"string\");",
									"        pm.expect(doc).to.have.property(\"ten\").that.is.a(\"string\");",
									"        pm.expect(doc).to.have.property(\"place\").that.is.a(\"string\");",
									"",
									"        // Verify expected values",
									"        let expected = expectedDocuments[index];",
									"        pm.expect(doc.ma).to.equal(expected.ma);",
									"        pm.expect(doc.ten).to.equal(expected.ten);",
									"        pm.expect(doc.place).to.equal(expected.place);",
									"    });",
									"",
									"    console.log(\"✅ Document data validation passed!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Code",
								"value": "REALSTAKE",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "a2eee4f5-730c-4721-b30c-1c2ba21e0293",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/proxy/fpt/api/public/giay-to-xac-thuc?noiDungFileMaHoa=''",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"proxy",
								"fpt",
								"api",
								"public",
								"giay-to-xac-thuc"
							],
							"query": [
								{
									"key": "noiDungFileMaHoa",
									"value": "''"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "kyc_upload_url (ID_FRONT)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Check response structure and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'extensions'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response).to.have.property(\"extensions\");",
									"",
									"    // Ensure 'data' has 'kyc_upload_url'",
									"    pm.expect(response.data).to.have.property(\"kyc_upload_url\");",
									"",
									"    let kycUploadUrl = response.data.kyc_upload_url;",
									"",
									"    // Validate 'kyc_upload_url' properties",
									"    pm.expect(kycUploadUrl).to.have.property(\"path\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"url\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"__typename\", \"KycUploadUrl\");",
									"",
									"    // Log values for debugging",
									"    console.log(\"KYC Upload Path:\", kycUploadUrl.path);",
									"    console.log(\"KYC Upload URL:\", kycUploadUrl.url);",
									"",
									"    // Validate URL format (basic check)",
									"    pm.expect(kycUploadUrl.url).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/);",
									"",
									"    console.log(\"✅ API response validation passed!\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"kyc_upload_url\",\n    \"variables\": {\n        \"type\": \"ID_FRONT\"\n    },\n    \"query\": \"query kyc_upload_url($type: KycImageType!) {\\n  kyc_upload_url(type: $type) {\\n    path\\n    url\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"alpha",
								"frs",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "kyc_upload_url (ID_BACK)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Check response structure and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'extensions'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response).to.have.property(\"extensions\");",
									"",
									"    // Ensure 'data' has 'kyc_upload_url'",
									"    pm.expect(response.data).to.have.property(\"kyc_upload_url\");",
									"",
									"    let kycUploadUrl = response.data.kyc_upload_url;",
									"",
									"    // Validate 'kyc_upload_url' properties",
									"    pm.expect(kycUploadUrl).to.have.property(\"path\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"url\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"__typename\", \"KycUploadUrl\");",
									"",
									"    // Log values for debugging",
									"    console.log(\"KYC Upload Path:\", kycUploadUrl.path);",
									"    console.log(\"KYC Upload URL:\", kycUploadUrl.url);",
									"",
									"    // Validate URL format (basic check)",
									"    pm.expect(kycUploadUrl.url).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/);",
									"",
									"    console.log(\"✅ API response validation passed!\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"kyc_upload_url\",\n    \"variables\": {\n        \"type\": \"ID_BACK\"\n    },\n    \"query\": \"query kyc_upload_url($type: KycImageType!) {\\n  kyc_upload_url(type: $type) {\\n    path\\n    url\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"alpha",
								"frs",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "eKYC - doc-noi-dung-ocr",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Replace this with your image URL with real IdCard",
									"const anhMatTruoc = 'https://djemclypbm8gi.cloudfront.net/tmp/kyc/601e4ecf0ed86c2e019c0cc3/1729584686938-id-front';",
									"const anhMatSau = 'https://djemclypbm8gi.cloudfront.net/tmp/kyc/601e4ecf0ed86c2e019c0cc3/1729584707150-id-back';",
									"const anh = 'https://d1b9m82b7i6paa.cloudfront.net/tmp/kyc/67c0186a20886eb1eddd1fb7/1740734277904-face-id';",
									"",
									"//Fake IdCard Image",
									"// const anhMatTruoc = 'https://d1b9m82b7i6paa.cloudfront.net/tmp/kyc/67c0186a20886eb1eddd1fb7/1740734184516-id-front';",
									"// const anhMatSau = 'https://d1b9m82b7i6paa.cloudfront.net/tmp/kyc/67c0186a20886eb1eddd1fb7/1740734186135-id-back';",
									"",
									"",
									"",
									"// Send a request to get the image IdCardFront data",
									"pm.sendRequest({",
									"    url: anhMatTruoc, ",
									"    method: 'GET',",
									"    responseType: 'arraybuffer' // This ensures we get binary data",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.log('Error fetching the image:', err);",
									"    } else {",
									"        // Convert binary data to Base64",
									"        const buffer = response.stream;",
									"        const base64Image = btoa(",
									"            new Uint8Array(buffer)",
									"                .reduce((data, byte) => data + String.fromCharCode(byte), '')",
									"        );",
									"        ",
									"        // Log the Base64 encoded image to the console",
									"        console.log('anhMatTruoc:', base64Image);",
									"        ",
									"        // Optionally, save it as a collection variable",
									"        pm.collectionVariables.set('anhMatTruoc', base64Image);",
									"    }",
									"});",
									"",
									"// Send a request to get the image IdCardBack data",
									"pm.sendRequest({",
									"    url: anhMatSau, ",
									"    method: 'GET',",
									"    responseType: 'arraybuffer' // This ensures we get binary data",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.log('Error fetching the image:', err);",
									"    } else {",
									"        // Convert binary data to Base64",
									"        const buffer = response.stream;",
									"        const base64Image = btoa(",
									"            new Uint8Array(buffer)",
									"                .reduce((data, byte) => data + String.fromCharCode(byte), '')",
									"        );",
									"        ",
									"        // Log the Base64 encoded image to the console",
									"        console.log('anhMatSau:', base64Image);",
									"        ",
									"        // Optionally, save it as a collection variable",
									"        pm.collectionVariables.set('anhMatSau',  base64Image);",
									"    }",
									"});",
									"",
									"",
									"// Send a request to get the image faceId data",
									"pm.sendRequest({",
									"    url: anh, ",
									"    method: 'GET',",
									"    responseType: 'arraybuffer' // This ensures we get binary data",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.log('Error fetching the image:', err);",
									"    } else {",
									"        // Convert binary data to Base64",
									"        const buffer = response.stream;",
									"        const base64Image = btoa(",
									"            new Uint8Array(buffer)",
									"                .reduce((data, byte) => data + String.fromCharCode(byte), '')",
									"        );",
									"        ",
									"        // Log the Base64 encoded image to the console",
									"        console.log('anh:', base64Image);",
									"        ",
									"        // Optionally, save it as a collection variable",
									"        pm.collectionVariables.set('anh',  base64Image);",
									"    }",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Check API response structure and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure top-level structure",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response).to.have.property(\"status\", 200);",
									"    pm.expect(response).to.have.property(\"message\", \"Thành công\");",
									"",
									"    let data = response.data;",
									"",
									"    // Check required properties in 'data'",
									"    let requiredFields = [",
									"        \"soCmt\", \"hoVaTen\", \"namSinh\", \"queQuan\", \"noiTru\", \"gioiTinh\", \"quocTich\",",
									"        \"ngayCap\", \"noiCap\", \"ngayHetHan\", \"loaiCmt\", \"loaiCmtMatTruoc\", \"loaiCmtKhacMatTruoc\",",
									"        \"chiTietNoiTru\", \"kiemTraMatTruoc\", \"kiemTraMatSau\", \"maHoa\"",
									"    ];",
									"    ",
									"    requiredFields.forEach(field => {",
									"        pm.expect(data).to.have.property(field);",
									"    });",
									"",
									"    // Check sub-properties of 'chiTietNoiTru'",
									"    pm.expect(data.chiTietNoiTru).to.have.property(\"province\").that.is.a(\"string\");",
									"    pm.expect(data.chiTietNoiTru).to.have.property(\"district\").that.is.a(\"string\");",
									"    pm.expect(data.chiTietNoiTru).to.have.property(\"ward\").that.is.a(\"string\");",
									"    pm.expect(data.chiTietNoiTru).to.have.property(\"street\").that.is.a(\"string\");",
									"",
									"    // Check scores (should be numeric and between 0 and 1)",
									"    let scoreFields = [",
									"        \"soCmtScore\", \"hoVaTenScore\", \"namSinhScore\", \"ngayHetHanScore\", ",
									"        \"queQuanScore\", \"noiTruScore\", \"ngayCapScore\", \"noiCapScore\", ",
									"        \"gioiTinhScore\", \"quocTichScore\"",
									"    ];",
									"",
									"    scoreFields.forEach(field => {",
									"        pm.expect(data).to.have.property(field).that.is.a(\"string\");",
									"        let score = parseFloat(data[field]);",
									"        pm.expect(score).to.be.within(0, 1);",
									"    });",
									"",
									"    // Validate gender",
									"    pm.expect([\"NAM\", \"NỮ\"]).to.include(data.gioiTinh);",
									"",
									"    // Validate date formats (basic check)",
									"    let dateFields = [\"namSinh\", \"ngayCap\", \"ngayHetHan\"];",
									"    dateFields.forEach(field => {",
									"        pm.expect(data[field]).to.match(/^\\d{2}\\/\\d{2}\\/\\d{4}$/);",
									"    });",
									"",
									"    console.log(\"✅ API response validation passed!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Code",
								"value": "REALSTAKE",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "a2eee4f5-730c-4721-b30c-1c2ba21e0293",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anhMatTruoc\": \"{{anhMatTruoc}}\",\n    \"anhMatSau\": \"{{anhMatSau}}\",\n    \"maGiayTo\": \"cccd\",\n    \"anhMatTruocPath\": \"tmp/kyc/66ce9eef05c08bf460c99544/1724818363116-id-front\",\n    \"anhMatSauPath\": \"tmp/kyc/66ce9eef05c08bf460c99544/1724818364416-id-back\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/proxy/fpt/api/public/doc-noi-dung-ocr",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"proxy",
								"fpt",
								"api",
								"public",
								"doc-noi-dung-ocr"
							]
						}
					},
					"response": []
				},
				{
					"name": "kyc_upload_url (FACE_ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Check response structure and values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'extensions'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response).to.have.property(\"extensions\");",
									"",
									"    // Ensure 'data' has 'kyc_upload_url'",
									"    pm.expect(response.data).to.have.property(\"kyc_upload_url\");",
									"",
									"    let kycUploadUrl = response.data.kyc_upload_url;",
									"",
									"    // Validate 'kyc_upload_url' properties",
									"    pm.expect(kycUploadUrl).to.have.property(\"path\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"url\").that.is.a(\"string\");",
									"    pm.expect(kycUploadUrl).to.have.property(\"__typename\", \"KycUploadUrl\");",
									"",
									"    // Log values for debugging",
									"    console.log(\"KYC Upload Path:\", kycUploadUrl.path);",
									"    console.log(\"KYC Upload URL:\", kycUploadUrl.url);",
									"",
									"    // Validate URL format (basic check)",
									"    pm.expect(kycUploadUrl.url).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/);",
									"",
									"    console.log(\"✅ API response validation passed!\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"kyc_upload_url\",\n    \"variables\": {\n        \"type\": \"FACE_ID\"\n    },\n    \"query\": \"query kyc_upload_url($type: KycImageType!) {\\n  kyc_upload_url(type: $type) {\\n    path\\n    url\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/alpha/frs/graphql",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"alpha",
								"frs",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "eKYC - xac-thuc-faceid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Your IdCardNumber is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.eql(pm.collectionVariables.get(\"phone\"));",
									"});",
									"",
									"pm.test(\"✅ Your message is 403--Không có chuyển động\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('403--Không có chuyển động');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Code",
								"value": "REALSTAKE",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "a2eee4f5-730c-4721-b30c-1c2ba21e0293",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"soCmt\": \"{{phone}}\",\n    \"hoVaTen\": \"{{fullName}}\",\n    \"namSinh\": \"01/01/1991\",\n    \"anhMatTruoc\": \"{{anhMatTruoc}}\",\n    \"anhMatSau\": \"{{anhMatSau}}\",\n    \"anhMatTruocPath\": \"tmp/kyc/67c0186a20886eb1eddd1fb7/1740734184516-id-front\",\n    \"anhMatSauPath\": \"tmp/kyc/67c0186a20886eb1eddd1fb7/1740734186135-id-back\",\n    \"maGiayTo\": \"cccd\",\n    \"anhVideo\": [\n        {\n            \"anh\": \"{{anh}}\",\n            \"thoiGian\": \"2000.0\"\n        }\n    ],\n    \"selfiePath\": \"\",\n    \"uploadedFaceIdPaths\": [\n        \"tmp/kyc/67c0186a20886eb1eddd1fb7/1724819812659-face-id\",\n        \"tmp/kyc/67c0186a20886eb1eddd1fb7/1724819814392-face-id\",\n        \"tmp/kyc/67c0186a20886eb1eddd1fb7/1724819815826-face-id\"\n    ],\n    \"hanhDong\": {\n        \"thoiGianQuayVideo\": \"4\",\n        \"soAnhGuiLenTrong1s\": \"1\",\n        \"noiDungHanhDongs\": [\n            {\n                \"maHanhDong\": \"dichuyenmat\",\n                \"tenHanhDong\": \"Nghiêng từ từ qua trái hoặc qua phải\",\n                \"thoiGianHanhDong\": \"1\"\n            }\n        ]\n    },\n    \"noiDungFileMaHoa\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stock-api-v2.infina.dev/proxy/fpt/api/public/xac-thuc-faceid",
							"protocol": "https",
							"host": [
								"stock-api-v2",
								"infina",
								"dev"
							],
							"path": [
								"proxy",
								"fpt",
								"api",
								"public",
								"xac-thuc-faceid"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit_kyc_result (FE auto approve)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set variables",
									"const timestamp = Date.now();",
									"const userId = pm.collectionVariables.get(\"userId\") || \"defaultUserId\"; // set default or from env",
									"const signatureStr = `${timestamp}.${JSON.stringify({ userId, source: 'infina-app' })}`;",
									"",
									"// Hash using HMAC-SHA256",
									"const secret = \"rxygedxNnT0jsK6em94DjlLICyIf5uvp\";",
									"const hash = CryptoJS.HmacSHA256(signatureStr, secret).toString();",
									"",
									"// Final signature format",
									"const signature = `ts=${timestamp},msg=${hash}`;",
									"",
									"// Set signature to Postman environment or header",
									"pm.collectionVariables.set(\"signature\", signature);",
									"pm.request.headers.add({ key: \"Signature\", value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate submit_kyc_result response\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Root and nested structure checks",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"submit_kyc_result\");",
									"",
									"    const result = jsonData.data.submit_kyc_result;",
									"",
									"    // Field-level validation",
									"    pm.expect(result).to.have.property(\"status\").that.is.a(\"boolean\");",
									"    pm.expect(result).to.have.property(\"__typename\", \"SubmitKycResult\");",
									"",
									"    // Extensions validation",
									"    pm.expect(jsonData).to.have.nested.property(\"extensions.timing\").that.is.a(\"number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// 1.Time expired! -> signature hết hạn\n// 2.Invalid Signature! -> sai signature\n// 3.user_must_not_be_under_18\n// 4.invalid_idcard_issue_date\n// 5.full_name_kyc_must_be_matched_last_approved\n// 6.invalid_kyc_support -> trùng cmnd\n// 7.invalid_id_card_type -> fpt raw response k có id card type\n// 8.manual_review_required -> app navigate sang CS review\n// 9.idcard_was_expired\n// 10.birthday_is_required\n\n\n{\n    \"operationName\": \"submit_kyc_result\",\n    \"variables\": {\n        \"input\": {\n            \"full_name\": \"HUỲNH NGỌC A\",\n            \"gender\": \"male\",\n            \"birthday\": \"01/19/1990\",\n            \"address\": \"TP. HỒ CHÍ MINH\",\n            \"country_origin\": \"VIỆT NAM\",\n            \"document_type\": \"idcard\",\n            \"document_number\": \"111{{phone}}\",\n            \"idcard_issue_date\": \"01/16/2022\",\n            \"idcard_issue_place\": \"CỤC TRƯỞNG CỤC CẢNH SÁT QUẢN LÝ HÀNH CHÍNH VỀ TRẬT TỰ XÃ HỘI\",\n            \"result\": \"success\",\n            \"portrait\": \"tmp/kyc/6512423ea411070013e5edd3/1741251957198-face-id\",\n            \"selfie\": \"tmp/kyc/6512423ea411070013e5edd3/1741251957198-face-id\",\n            \"selfie_left\": \"tmp/kyc/6512423ea411070013e5edd3/1741251953731-face-id\",\n            \"selfie_right\": \"tmp/kyc/6512423ea411070013e5edd3/1741251960203-face-id\",\n            \"idcard_front_page\": \"tmp/kyc/67c0186a20886eb1eddd1fb7/1740734184516-id-front\",\n            \"idcard_back_page\": \"tmp/kyc/67c0186a20886eb1eddd1fb7/1740734186135-id-back\",\n            \"signature\": \"{{signature}}\",\n            \"idcard_expire_date\": \"01/19/2029\",\n            \"raw_response_ocr\": {\n                \"soCmt\": \"111{{phone}}\",\n                \"hoVaTen\": \"HUỲNH NGỌC A\",\n                \"namSinh\": \"19/01/1990\",\n                \"queQuan\": \"TP. HỒ CHÍ MINH\",\n                \"noiTru\": \"TP. HỒ CHÍ MINH\",\n                \"dacDiemNhanDang\": \"SẸO CHẤM C: 1CM TRÊN SAU CÁNH MŨI PHẢI\",\n                \"ngayCap\": \"16/01/2022\",\n                \"noiCap\": \"CỤC TRƯỞNG CỤC CẢNH SÁT QUẢN LÝ HÀNH CHÍNH VỀ TRẬT TỰ XÃ HỘI\",\n                \"loaiCmt\": \"cccd_chip_ms\",\n                \"loaiCmtMatTruoc\": \"cccd_chip_mt\",\n                \"loaiCmtKhacMatTruoc\": \"cccd_chip_mt\",\n                \"quocTich\": \"VIỆT NAM\",\n                \"ngayHetHan\": \"19/01/2029\",\n                \"gioiTinh\": \"NAM\",\n                \"chiTietNoiTru\": {\n                    \"province\": \"Hồ Chí Minh\",\n                    \"district\": \"Bình Chánh\",\n                    \"ward\": \"Đa Phước\",\n                    \"street\": \"B6/146 ẤP 2  T\",\n                    \"country\": \"\"\n                },\n                \"kiemTraMatTruoc\": {\n                    \"chupLaiTuManHinh\": \"0\",\n                    \"denTrang\": \"0\",\n                    \"denTrangScore\": \"3.912781557091627e-11\",\n                    \"catGoc\": \"0\",\n                    \"catGocScore\": [\n                        \"0.0\",\n                        \"0.0\",\n                        \"0.0\",\n                        \"0.0\"\n                    ],\n                    \"suaDoi\": \"0\",\n                    \"suaDoiScore\": \"0.0\",\n                    \"dauNoi\": \"N/A\",\n                    \"dauQuocHuy\": \"0\",\n                    \"dauQuocHuyScore\": \"0.03606361150741577\",\n                    \"anhBiLoa\": \"0\",\n                    \"anhBiLoaScore\": \"0.0\",\n                    \"kiemTraAnh\": \"0\",\n                    \"kiemTraAnhScore\": \"0.03193753957748413\",\n                    \"thayTheAnh\": \"0\",\n                    \"thayTheAnhScore\": \"0.6706353425979614\",\n                    \"khungHinh\": \"0\",\n                    \"khungHinhScore\": \"0.040508052060602706\",\n                    \"ngayHetHan\": \"0\",\n                    \"quyLuatSo\": \"0\"\n                },\n                \"kiemTraMatSau\": {\n                    \"denTrang\": \"0\",\n                    \"denTrangScore\": \"0.00010942098015220836\",\n                    \"suaDoi\": \"1\",\n                    \"suaDoiScore\": \"0.9\",\n                    \"dauDo\": \"0\",\n                    \"dauDoScore\": \"0.04601472616195679\",\n                    \"anhBiLoa\": \"0\",\n                    \"anhBiLoaScore\": \"0.0\",\n                    \"vanTayPhai\": \"0\",\n                    \"vanTayPhaiScore\": \"0.0\",\n                    \"vanTayTrai\": \"0\",\n                    \"vanTayTraiScore\": \"0.0\",\n                    \"khungHinh\": \"0\",\n                    \"khungHinhScore\": \"0.023118888823989048\"\n                },\n                \"soCmtScore\": \"0.9232091289536344\",\n                \"hoVaTenScore\": \"0.9083625833193462\",\n                \"namSinhScore\": \"0.9108421258239621\",\n                \"ngayHetHanScore\": \"0.9013190223190194\",\n                \"queQuanScore\": \"0.891992239650649\",\n                \"noiTruScore\": \"0.9042992297595422\",\n                \"ngayCapScore\": \"0.9055157748865496\",\n                \"noiCapScore\": \"0.9916351864805651\",\n                \"gioiTinhScore\": \"0.908226985409605\",\n                \"quocTichScore\": \"0.9209571763317903\",\n                \"maHoa\": {\n                    \"noiDung\": \"IDVNM089013872807908901300<<8\\n8901192M2901190VNM<<<<<<<<<<<4\\nHUYNH<<NGOC<A<<<<<<<<<<<<<<\",\n                    \"soCmt\": \"111{{phone}}\",\n                    \"hoVaTen\": \"HUYNH NGOC A\",\n                    \"namSinh\": \"890119\",\n                    \"ngayHetHan\": \"290119\",\n                    \"gioiTinh\": \"M\"\n                },\n                \"maTinhQueQuan\": \"079\",\n                \"maTinhDiaChi\": \"079\",\n                \"maTinhNoiCap\": \"\"\n            },\n            \"raw_response\": {\n                \"res\": {\n                    \"data\": \"111{{phone}}\",\n                    \"status\": 200,\n                    \"message\": \"Thành công\"\n                }\n            }\n        }\n    },\n    \"query\": \"mutation submit_kyc_result($input: SubmitKycResultInput) {\\n  submit_kyc_result(input: $input) {\\n    status\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "si_preview_contract",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate Preview Contract Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"si_preview_contract\" object in \"data\"",
									"    pm.expect(response.data).to.have.property(\"si_preview_contract\").that.is.an(\"object\");",
									"",
									"    // Validate URL in \"si_preview_contract\"",
									"    pm.expect(response.data.si_preview_contract).to.have.property(\"url\").that.is.a(\"string\").and.contains(\"http\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Preview Contract Response is valid!\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {},\n    \"query\": \"mutation {\\n  si_preview_contract {\\n    url\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "send_phone_verification_token (signContract)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Register first_name, last_name adn phone randomly",
									"pm.test(\"Generate random user data\", function () {",
									"    function getRandomElement(arr) {",
									"        return arr[Math.floor(Math.random() * arr.length)];",
									"    }",
									"    ",
									"    let randomPhone = \"0150000\" + (100 + Math.floor(Math.random() * 701)); // phone random 0150000100 ~ 0150000800",
									"    pm.collectionVariables.set(\"randomPhone\", randomPhone);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Send Phone Verification Token Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"send_phone_verification_token\" object in \"data\"",
									"    pm.expect(response.data).to.have.property(\"send_phone_verification_token\").that.is.an(\"object\");",
									"",
									"    // Validate status in \"send_phone_verification_token\"",
									"    pm.expect(response.data.send_phone_verification_token).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Send Phone Verification Token Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"check_exist\": false,\n        \"phone\": \"{{phone}}\",\n        \"otp_length\": 6\n    },\n    \"query\": \"mutation ($phone: String, $check_exist: Boolean, $otp_length: Int) {\\n  send_phone_verification_token(\\n    input: {phone: $phone, check_exist: $check_exist, otp_length: $otp_length}\\n  ) {\\n    status\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "check_otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate Check OTP Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"check_otp\" object in \"data\"",
									"    pm.expect(response.data).to.have.property(\"check_otp\").that.is.a(\"boolean\");",
									"",
									"    // Validate the value of \"check_otp\"",
									"    pm.expect(response.data.check_otp).to.be.true;",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Check OTP Response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"email\": \"\",\n            \"phone\": \"{{phone}}\",\n            \"otp_code\": \"686868\"\n        }\n    },\n    \"query\": \"query ($input: CheckOTPInput) {\\n  check_otp(input: $input)\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_user (confirm_contract)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate update_user response\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    // Ensure 'data.update_user' exists",
									"    pm.expect(jsonData).to.have.nested.property(\"data.update_user\");",
									"",
									"    const result = jsonData.data.update_user;",
									"",
									"    // Validate fields inside update_user",
									"    pm.expect(result).to.have.property(\"id\").that.is.a(\"string\");",
									"    pm.expect(result).to.have.property(\"__typename\", \"MeResult\");",
									"",
									"    // Validate extensions.timing exists and is a number",
									"    pm.expect(jsonData).to.have.nested.property(\"extensions.timing\").that.is.a(\"number\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"update_user\",\n    \"variables\": {\n        \"confirm_contract\": true\n    },\n    \"query\": \"mutation update_user($confirm_contract: Boolean) {\\n  update_user(input: {confirm_contract: $confirm_contract}) {\\n    id\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_my_bank_info (for withdraw)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate update_my_bank_info response\", function () {",
									"    const response = pm.response.json();",
									"",
									"    // Validate main structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response.data).to.have.property(\"update_my_bank_info\").that.is.an(\"object\");",
									"",
									"    const bankInfo = response.data.update_my_bank_info.bank_info;",
									"",
									"    // Validate bank_info fields",
									"    pm.expect(bankInfo).to.have.property(\"bank_support\").that.is.a(\"boolean\");",
									"    pm.expect(bankInfo).to.have.property(\"verified\").that.is.a(\"boolean\");",
									"    pm.expect(bankInfo).to.have.property(\"__typename\", \"BankInfoResult\");",
									"",
									"    // Optional: Validate __typename on update_my_bank_info",
									"    pm.expect(response.data.update_my_bank_info).to.have.property(\"__typename\", \"MeResult\");",
									"",
									"    // Validate timing",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ update_my_bank_info response validated successfully.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"accountNumber\": \"{{phone}}\",\n        \"bankBranch\": \"CN_{{phone}}\",\n        \"bankCity\": \"Hồ Chí Minh\",\n        \"accountOwner\": \"HUYNH NGOC A\",\n        \"bankName\": \"Vietcombank\",\n        \"bankTransferCode\": \"NGOAI THUONG VN (VCB)-203\"\n    },\n    \"query\": \"mutation ($bankName: String, $bankCity: String, $bankBranch: String, $accountNumber: String, $accountOwner: String, $bankTransferCode: String) {\\n  update_my_bank_info(\\n    input: {bank_name: $bankName, bank_city: $bankCity, bank_branch: $bankBranch, account_number: $accountNumber, account_owner: $accountOwner, bank_transfer_code: $bankTransferCode}\\n  ) {\\n    bank_info {\\n      bank_support\\n      verified\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "signout (clearToken)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate Signout Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"signout\" property in the \"data\" object",
									"    pm.expect(response.data).to.have.property(\"signout\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Signout Response is valid!\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}",
								"type": "text"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"onesignal_id\": \"d94a83aa-4a3c-4c1a-9171-ac36900e0523\"\n    },\n    \"query\": \"mutation ($onesignal_id: String) {\\n  signout(input: {onesignal_id: $onesignal_id})\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SignIn (User eKYC approved and signContract)",
			"item": [
				{
					"name": "SignIn & Relogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('phoneNumber', \"0150000491\"); //Users ekyc approved and signed Contract",
									"pm.collectionVariables.set('password', \"12345678\");",
									"pm.collectionVariables.set('pinCode', 111111);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Handle login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.errors && jsonData.errors.length > 0) {",
									"        var error = jsonData.errors[0];",
									"        ",
									"        if (error.key === \"multiple_active_sessions\" && error.details && error.details.reLoginToken) {",
									"            pm.environment.set(\"reLoginToken\", error.details.reLoginToken);",
									"            ",
									"            // Call API re_login after login multi session",
									"            pm.sendRequest({",
									"                url: pm.collectionVariables.get(\"baseUrl\"),",
									"                method: \"POST\",",
									"                header: {",
									"                    \"Content-Type\": \"application/json\",",
									"                    \"x-infina-app-version\": pm.collectionVariables.get(\"x-infina-app-version\"),",
									"                    \"x-infina-api-key\": pm.collectionVariables.get(\"x-infina-api-key\")",
									"                },",
									"                body: {",
									"                    mode: \"raw\",",
									"                    raw: JSON.stringify({",
									"                        variables: {",
									"                            input: {",
									"                                re_login_token: error.details.reLoginToken",
									"                            }",
									"                        },",
									"                        query: \"mutation ($input: ReLoginInput) {\\n  re_login(input: $input) {\\n    api_client {\\n      access_token\\n      ip_address\\n      refresh_token\\n      user {\\n        id\\n        ip_address\\n        uid\\n        email\\n        phone\\n        first_name\\n        last_name\\n        status\\n        has_pin_code\\n        pin_type\\n        pin_blocking_duration\\n        pin_allowed_attempts\\n        freshchat_restore_id\\n        avatar\\n        confirm_contract\\n        contract_signed_at\\n        kyc {\\n          status\\n          address\\n          passport_issue_date\\n          passport_issue_place\\n          document_type\\n          document_number\\n          idcard_issue_date\\n          idcard_issue_place\\n          idcard_type\\n          cmnd\\n          first_name\\n          manual_review\\n          last_name\\n          full_name\\n          idcard_back_page\\n          idcard_front_page\\n          __typename\\n        }\\n        user_credits {\\n          id\\n          reward_balance\\n          expired_at\\n          __typename\\n        }\\n        documents {\\n          url\\n          created_at\\n          __typename\\n        }\\n        verified_phone\\n        verified_email\\n        referral_code\\n        referral_url\\n        custom_referral_code\\n        bank_info {\\n          bank_name\\n          bank_city\\n          bank_branch\\n          account_number\\n          account_owner\\n          bank_support\\n          verified\\n          __typename\\n        }\\n        referred_code\\n        created_at\\n        discourse {\\n          is_sign_up\\n          sign_up_at\\n          __typename\\n        }\\n        completed_challenge\\n        synced_ii_at\\n        pin_unblock_at\\n        pin_enable_manual_unblock\\n        __typename\\n      }\\n      __typename\\n    }\\n    flow\\n    __typename\\n  }\\n}\"",
									"                    })",
									"                }",
									"            }, function (err, res) {",
									"                if (!err && res.json().data && res.json().data.re_login.api_client) {",
									"                    let reLoginData = res.json().data.re_login.api_client;",
									"                    pm.collectionVariables.set(\"access_token\", reLoginData.access_token);",
									"                    pm.collectionVariables.set(\"refresh_token\", reLoginData.refresh_token);",
									"                    pm.collectionVariables.set(\"userid\", reLoginData.user.id);",
									"                    pm.collectionVariables.set(\"uid\", reLoginData.user.uid);",
									"                    pm.collectionVariables.set(\"MapId\", reLoginData.user.uid + '_SAV');",
									"                }",
									"                ",
									"            });",
									"        }",
									"    } else if (jsonData.data && jsonData.data.signin_v2) {",
									"        let loginData = jsonData.data.signin_v2;",
									"        pm.collectionVariables.set(\"access_token\", loginData.access_token);",
									"        pm.collectionVariables.set(\"refresh_token\", loginData.refresh_token);",
									"        pm.collectionVariables.set(\"userid\", loginData.user.id);",
									"        pm.collectionVariables.set(\"uid\", loginData.user.uid);",
									"        pm.collectionVariables.set(\"MapId\", loginData.user.uid + '_SAV');",
									"    }",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches signin_v2\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"signin_v2\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}",
								"type": "text"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"signin_v2\",\n    \"variables\": {\n        \"email\": \"{{phone}}\",\n        \"password\": \"{{password}}\",\n        \"fcm_token\": \"{{$guid}}:APA91bFVsdSihx4iIvzKHqkmnSg15GpP2QyQwvMx6-Zrj-A3b9OGozt1Sg2NNdr0mfqBGENGhDyt8Dh0P_XEi6gjrDP0D-yyOjErOUtY8KNZ__gu0LP3rHs\",\n        \"app_instance_id\": \"{{$guid}}\",\n        \"platform\":\"PostmanTest\"\n    },\n    \"query\":\"mutation signin_v2($email: String, $password: String, $app_instance_id: String, $fcm_token: String, $platform: String) {\\n  signin_v2(\\n    input: {email: $email, password: $password, app_instance_id: $app_instance_id, fcm_token: $fcm_token, platform: $platform}\\n  ) {\\n    access_token\\n    ip_address\\n    refresh_token\\n    user {\\n      id\\n      ip_address\\n      uid\\n      email\\n      phone\\n      first_name\\n      last_name\\n      status\\n      has_pin_code\\n      pin_type\\n      pin_blocking_duration\\n      pin_allowed_attempts\\n      freshchat_restore_id\\n      avatar\\n      confirm_contract\\n      contract_signed_at\\n      kyc {\\n        status\\n        address\\n        passport_issue_date\\n        passport_issue_place\\n        document_type\\n        document_number\\n        idcard_issue_date\\n        idcard_issue_place\\n        idcard_type\\n        cmnd\\n        first_name\\n        manual_review\\n        last_name\\n        full_name\\n        idcard_back_page\\n        idcard_front_page\\n        __typename\\n      }\\n      user_credits {\\n        id\\n        reward_balance\\n        expired_at\\n        __typename\\n      }\\n      documents {\\n        url\\n        created_at\\n        __typename\\n      }\\n      verified_phone\\n      verified_email\\n      referral_code\\n      referral_url\\n      custom_referral_code\\n      bank_info {\\n        bank_name\\n        bank_city\\n        bank_branch\\n        account_number\\n        account_owner\\n        bank_support\\n        verified\\n        __typename\\n      }\\n      referred_code\\n      created_at\\n      discourse {\\n        is_sign_up\\n        sign_up_at\\n        __typename\\n      }\\n      completed_challenge\\n      synced_ii_at\\n      pin_unblock_at\\n      pin_enable_manual_unblock\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "me (approved eKYC & signContract)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Defined jsonData before using it in the test script",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json(); // Define jsonData before using it in the test script",
									"",
									"",
									"pm.test(\"Your contract_signed_at is not null\", function () {",
									"    pm.expect(jsonData.data.me.contract_signed_at).to.not.empty;",
									"});",
									"",
									"pm.test(\"Your confirm_contract is true\", function () {",
									"    pm.expect(jsonData.data.me.confirm_contract).to.eql(true);",
									"});",
									"",
									"pm.test(\"Your kyc status is approved\", function () {",
									"    pm.expect(jsonData.data.me.kyc.status).to.eql('approved');",
									"});",
									"",
									"pm.test(\"Your synced_ii_at is not null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.me.synced_ii_at).to.not.eql(null);",
									"});",
									"",
									"var jsonData = pm.response.json(); ",
									"var uid = jsonData.data.me.uid; ",
									"pm.collectionVariables.set('MapId', uid + '_SAV');",
									"console.log('MapId', uid + '_SAV');",
									"",
									"var jsonData = pm.response.json(); ",
									"var bankAccountOwner = jsonData.data.me.bank_info.account_owner; ",
									"pm.collectionVariables.set('bankAccountOwner', bankAccountOwner);",
									"console.log('bankAccountOwner', bankAccountOwner);",
									"",
									"var jsonData = pm.response.json(); ",
									"var myEmail = jsonData.data.me.email; ",
									"pm.collectionVariables.set('myEmail', myEmail);",
									"console.log('myEmail', myEmail);",
									"",
									"var jsonData = pm.response.json(); ",
									"var myPhone = jsonData.data.me.phone; ",
									"pm.collectionVariables.set('myPhone', myPhone);",
									"console.log('myPhone', myPhone);",
									"",
									"",
									"pm.test(\"✅ Validate UserInfo API Response Structure and Values\", function () {",
									"    let response = pm.response.json();",
									"    ",
									"    // Ensure response contains 'data' and 'me'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"me\");",
									"",
									"    let userData = response.data.me;",
									"",
									"    // Required fields validation",
									"    let requiredFields = [",
									"        \"id\", \"ip_address\", \"uid\", \"email\", \"phone\", \"first_name\", ",
									"        \"last_name\", \"status\", \"has_pin_code\", \"freshchat_restore_id\",",
									"        \"avatar\", \"contract_signed_at\", \"confirm_contract\", \"verified_phone\", ",
									"        \"verified_email\", \"referral_code\", \"referred_code\", \"referral_url\", ",
									"        \"custom_referral_code\", \"created_at\"",
									"    ];",
									"",
									"    requiredFields.forEach(field => {",
									"        pm.expect(userData).to.have.property(field);",
									"    });",
									"",
									"    // Validate expected data types",
									"    pm.expect(userData.id).to.be.a(\"string\");",
									"    //pm.expect(userData.email).to.match(/^\\S+@\\S+\\.\\S+$/);",
									"    pm.expect(userData.phone).to.be.a(\"string\");",
									"    pm.expect(userData.status).to.be.oneOf([\"active\", \"invested\", \"pending\" , \"registered\"]);",
									"    pm.expect(userData.has_pin_code).to.be.a(\"boolean\");",
									"    pm.expect(userData.contract_signed_at).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\+\\d{4}$/);",
									"",
									"    // Validate KYC object",
									"    if (userData.kyc) {",
									"        pm.expect(userData.kyc).to.have.property(\"status\");",
									"        pm.expect(userData.kyc).to.have.property(\"document_number\");",
									"        pm.expect(userData.kyc.status).to.be.oneOf([\"approved\", \"pending\", \"rejected\"]);",
									"        pm.expect(userData.kyc.document_number).to.be.a(\"string\");",
									"    }",
									"",
									"    // Validate User Credits",
									"    if (userData.user_credits) {",
									"        userData.user_credits.forEach(credit => {",
									"            pm.expect(credit).to.have.property(\"id\");",
									"            pm.expect(credit).to.have.property(\"reward_balance\");",
									"            pm.expect(credit.reward_balance).to.be.a(\"number\");",
									"        });",
									"    }",
									"",
									"    // Validate Documents",
									"    if (userData.documents) {",
									"        userData.documents.forEach(doc => {",
									"            pm.expect(doc).to.have.property(\"url\");",
									"            pm.expect(doc).to.have.property(\"created_at\");",
									"            pm.expect(doc.url).to.match(/^https?:\\/\\/.+/);",
									"        });",
									"    }",
									"",
									"    // Validate Bank Info",
									"    if (userData.bank_info) {",
									"        pm.expect(userData.bank_info).to.have.property(\"bank_name\");",
									"        pm.expect(userData.bank_info).to.have.property(\"account_number\");",
									"        pm.expect(userData.bank_info.account_number).to.match(/^\\d+$/);",
									"    }",
									"",
									"    console.log(\"✅ UserInfo API Response Passed Validation!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"\\n  query me {\\n    me {\\n      \\n  id\\n  ip_address\\n  uid\\n  email\\n  phone\\n  first_name\\n  last_name\\n  status\\n  has_pin_code\\n  pin_type\\n  pin_blocking_duration\\n  pin_allowed_attempts\\n  freshchat_restore_id\\n  avatar\\n  confirm_contract\\n  contract_signed_at\\n  kyc {\\n    status\\n    address\\n    passport_issue_date\\n    passport_issue_place\\n    document_type\\n    document_number\\n    idcard_issue_date\\n    idcard_issue_place\\n    idcard_type\\n    cmnd\\n    first_name\\n    manual_review\\n    last_name\\n    full_name\\n    idcard_back_page\\n    idcard_front_page\\n  }\\n  user_credits {\\n    id\\n    reward_balance\\n    expired_at\\n  }\\n  documents {\\n    url\\n    created_at\\n  }\\n  verified_phone\\n  verified_email\\n  referral_code\\n  referral_url\\n  custom_referral_code\\n  bank_info {\\n    bank_name\\n    bank_city\\n    bank_branch\\n    account_number\\n    account_owner\\n    bank_support\\n    verified\\n  }\\n  referred_code\\n  created_at\\n  discourse {\\n    is_sign_up\\n    sign_up_at\\n  }\\n  completed_challenge\\n  synced_ii_at\\n  pin_unblock_at\\n  pin_enable_manual_unblock\\n\\n    }\\n  }\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "payment_bank_info (exist VA)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// // Set the maximum number of retries",
									"// pm.collectionVariables.set(\"maxRetries\", 3);",
									"",
									"// // Set the delay between retries (in milliseconds)",
									"// pm.collectionVariables.set(\"retryDelay\", 2000); // 2 seconds"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // Get the maximum number of retries and delay from collection variables",
									"// const maxRetries = parseInt(pm.collectionVariables.get(\"maxRetries\"));",
									"// const retryDelay = parseInt(pm.collectionVariables.get(\"retryDelay\"));",
									"",
									"// // Function to retry the request",
									"// const retryRequest = (retryCount) => {",
									"//     if (retryCount >= maxRetries) {",
									"//         console.log(\"❌ Max retries reached. Stopping retries.\");",
									"//         return;",
									"//     }",
									"",
									"//     // Check if the response is not HTTP 200 OK",
									"//     if (pm.response.code !== 200) {",
									"//         console.log(`❌ Attempt ${retryCount + 1}: Received ${pm.response.code}. Retrying in ${retryDelay / 1000} seconds...`);",
									"",
									"//         // Retry the request after a delay",
									"//         setTimeout(() => {",
									"//             pm.execution.setNextRequest(pm.info.requestName); // Retry the same request",
									"//         }, retryDelay);",
									"//     } else {",
									"//         console.log(\"✅ Request succeeded with HTTP 200 OK.\");",
									"//         pm.execution.setNextRequest(null); // Stop further retries",
									"//     }",
									"// };",
									"",
									"// // Start the retry logic",
									"// retryRequest(0);",
									"",
									"",
									"//Set VA Info",
									"var jsonData = pm.response.json();",
									"var accountBankName = jsonData.data.payment_bank_info[0].account_name;",
									"pm.collectionVariables.set('VaName', accountBankName);",
									"console.log('VaName : ' + accountBankName);",
									"",
									"var accountBankNumber = jsonData.data.payment_bank_info[0].account_number;",
									"pm.collectionVariables.set('VaAcc', accountBankNumber);",
									"console.log('VaAcc : ' + accountBankNumber);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches Woori Bank\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Woori Bank\");",
									"});",
									"",
									"pm.test(\"Your VA Account Name is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.payment_bank_info[0].account_name).to.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"✅ Validate VA API Response Structure and Values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'payment_bank_info'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"payment_bank_info\");",
									"",
									"    let bankInfoList = response.data.payment_bank_info;",
									"",
									"    // Ensure bankInfoList is an array",
									"    pm.expect(bankInfoList).to.be.an(\"array\");",
									"    pm.expect(bankInfoList.length).to.be.above(0);",
									"",
									"    // Validate each bank info entry",
									"    bankInfoList.forEach(bankInfo => {",
									"        let requiredFields = [",
									"            \"bank_code\", \"bank_url\", \"bank_name\", \"account_name\",",
									"            \"account_number\", \"bank_id_no\", \"type\", \"__typename\"",
									"        ];",
									"",
									"        requiredFields.forEach(field => {",
									"            pm.expect(bankInfo).to.have.property(field);",
									"        });",
									"",
									"        // Validate expected data types and formats",
									"        pm.expect(bankInfo.bank_code).to.be.a(\"string\");",
									"        pm.expect(bankInfo.bank_name).to.be.a(\"string\");",
									"        pm.expect(bankInfo.bank_url).to.match(/^https?:\\/\\/.+/);",
									"        pm.expect(bankInfo.account_name).to.be.a(\"string\");",
									"        pm.expect(bankInfo.account_number).to.match(/^\\d+$/);",
									"        pm.expect(bankInfo.bank_id_no).to.match(/^\\d+$/);",
									"        pm.expect(bankInfo.type).to.be.oneOf([\"virtual_account\", \"savings\", \"checking\"]);",
									"",
									"        console.log(`✅ Bank info validated: ${bankInfo.bank_name}`);",
									"    });",
									"",
									"    console.log(\"✅ VA API Response Passed Validation!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"payment_bank_info\",\n    \"variables\": {\n        \"product_type\": \"nfs\"\n    },\n    \"query\": \"query payment_bank_info($origin: String, $receiver_id: String, $product_type: String) {\\n  payment_bank_info(\\n    input: {product_type: $product_type, origin: $origin, receiver_id: $receiver_id}\\n  ) {\\n    bank_code\\n    bank_url\\n    bank_name\\n    bank_branch\\n    account_name\\n    account_number\\n    bank_id_no\\n    type\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "validate_pin_code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate pinCode is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.validate_pin_code.valid).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"validate_pin_code\",\n    \"variables\": {\n        \"pin_code\": \"{{pinCode}}\"\n    },\n    \"query\": \"mutation validate_pin_code($pin_code: String) {\\n  validate_pin_code(input: {pin_code: $pin_code}) {\\n    valid\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "offers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('fsOffersId', \"65f02e1cbb3387001378e1fd\");",
									"pm.collectionVariables.set('fsInterestRate', 0.043);",
									"pm.collectionVariables.set('managementFee', 0);",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed SyntaxError by removing incomplete test and redundant console.log",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your fsOffersId is correct \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.offers.docs[0].id).to.eql(pm.collectionVariables.get('fsOffersId'));",
									"});",
									"",
									"pm.test(\"Your fsInterestRate is correct \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.offers.docs[0].interest_rate).to.eql(pm.collectionVariables.get(\"fsInterestRate\"));",
									"});",
									"",
									"pm.test(\"Your managementFee is correct \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.offers.docs[0].management_fee).to.eql(pm.collectionVariables.get(\"managementFee\"));",
									"});",
									"",
									"pm.test(\"✅ Validate FS Offers API Response Structure and Values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    ",
									"    // Validate 'offers' object",
									"    pm.expect(response.data).to.have.property(\"offers\");",
									"    pm.expect(response.data.offers).to.have.property(\"docs\");",
									"    pm.expect(response.data.offers.docs).to.be.an(\"array\");",
									"",
									"    let offersList = response.data.offers.docs;",
									"",
									"    // Validate each offer in the list",
									"    offersList.forEach(offer => {",
									"        let requiredFields = [\"id\", \"interest_rate\", \"management_fee\", \"start_date\", \"property\", \"__typename\"];",
									"",
									"        requiredFields.forEach(field => {",
									"            pm.expect(offer).to.have.property(field);",
									"        });",
									"",
									"        pm.expect(offer.id).to.be.a(\"string\");",
									"        pm.expect(offer.interest_rate).to.be.a(\"number\");",
									"        pm.expect(offer.management_fee).to.be.a(\"number\");",
									"        pm.expect(offer.start_date).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\+\\d{4}$/); // YYYY-MM-DD HH:mm:ss+0000",
									"",
									"        // Validate 'property' inside each offer",
									"        pm.expect(offer.property).to.have.property(\"name\");",
									"        pm.expect(offer.property).to.have.property(\"featured_image\");",
									"        pm.expect(offer.property.featured_image).to.match(/^https?:\\/\\/.+/);",
									"    });",
									"",
									"    console.log(\"✅ FS Offers validated successfully!\");",
									"",
									"    // Validate 'savings_remaining_amount' object",
									"    pm.expect(response.data).to.have.property(\"savings_remaining_amount\");",
									"    let savings = response.data.savings_remaining_amount;",
									"",
									"    pm.expect(savings).to.have.property(\"remaining_amount\");",
									"    pm.expect(savings).to.have.property(\"limit_savings_amount\");",
									"    ",
									"    pm.expect(savings.remaining_amount).to.be.a(\"number\");",
									"    pm.expect(savings.limit_savings_amount).to.be.a(\"number\");",
									"    ",
									"    console.log(\"✅ FS Savings remaining amount validated successfully!\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"offers\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 1,\n            \"filter\": {\n                \"offer_types\": [\n                    \"savings\"\n                ],\n                \"soldout\": false\n            }\n        }\n    },\n    \"query\": \"query offers($input: GetOffersInput) {\\n  offers(input: $input) {\\n    docs {\\n      id\\n      interest_rate\\n      management_fee\\n      start_date\\n      property {\\n        name\\n        featured_image\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  savings_remaining_amount {\\n    remaining_amount\\n    limit_savings_amount\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "ts_products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//TS 1 month",
									"pm.collectionVariables.set('productPid_1M', \"f9871ac0-7490-4545-ab5f-86a82cc6ddc1\");",
									"pm.collectionVariables.set('productName_1M', \"Sinh lời 1 tháng\");",
									"pm.collectionVariables.set('productMatureInterestRateInterestRate_1M', 0.051);",
									"pm.collectionVariables.set('productDuration_1M', 30);",
									"",
									"//TS 2 month",
									"pm.collectionVariables.set('productPid_2M', \"b2820125-79fa-475d-a02b-7ae5c68717f3\");",
									"pm.collectionVariables.set('productName_2M', \"Sinh lời 2 tháng\");",
									"pm.collectionVariables.set('productMatureInterestRateInterestRate_2M', 0.051);",
									"pm.collectionVariables.set('productDuration_2M', 60);",
									"",
									"//TS 6 month",
									"pm.collectionVariables.set('productPid_6M', \"57ad3be2-44cf-4916-a024-bb5dd09e10a9\");",
									"pm.collectionVariables.set('productName_6M', \"Sinh lời 6 tháng\");",
									"pm.collectionVariables.set('productMatureInterestRateInterestRate_6M', 0.056);",
									"pm.collectionVariables.set('productDuration_6M', 180);",
									"",
									"//TS 9 month",
									"pm.collectionVariables.set('productPid_9M', \"caabeb83-1cdf-48dc-9569-c3317ce9e259\");",
									"pm.collectionVariables.set('productName_9M', \"Sinh lời 9 tháng\");",
									"pm.collectionVariables.set('productMatureInterestRateInterestRate_9M', 0.056);",
									"pm.collectionVariables.set('productDuration_9M', 270);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Define the products to test and their expected collection variables",
									"const productsToTest = [",
									"    { index: 2, suffix: \"1M\", properties: [\"pid\", \"name\", \"matureInterestRate.interestRate\", \"duration\"] },",
									"    { index: 11, suffix: \"2M\", properties: [\"pid\", \"name\", \"matureInterestRate.interestRate\", \"duration\"] },",
									"    { index: 34, suffix: \"6M\", properties: [\"pid\", \"name\", \"matureInterestRate.interestRate\", \"duration\"] },",
									"    { index: 44, suffix: \"9M\", properties: [\"pid\", \"name\", \"matureInterestRate.interestRate\", \"duration\"] }",
									"];",
									"",
									"// Loop through each product and validate its properties",
									"productsToTest.forEach(product => {",
									"    const productData = jsonData.data.ts_products.docs[product.index];",
									"",
									"    // Log the extracted product data for debugging",
									"    console.log(`Product ${product.suffix} Data:`, {",
									"        pid: productData.pid,",
									"        name: productData.name,",
									"        interestRate: productData.matureInterestRate.interestRate,",
									"        duration: productData.duration",
									"    });",
									"",
									"    // Validate each property",
									"    product.properties.forEach(property => {",
									"        const collectionVariableName = `product${property.split('.').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join('')}_${product.suffix}`;",
									"        const actualValue = property.split('.').reduce((obj, key) => obj[key], productData);",
									"        const expectedValue = pm.collectionVariables.get(collectionVariableName);",
									"",
									"        pm.test(`Your ${collectionVariableName} is correct`, function () {",
									"            pm.expect(actualValue).to.eql(expectedValue);",
									"        });",
									"    });",
									"});",
									"",
									"console.log(\"✅ All product validations completed successfully!\");",
									"",
									"",
									"pm.test(\"✅ Validate API Response Structure and Values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'ts_products'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"ts_products\");",
									"    ",
									"    let tsProducts = response.data.ts_products;",
									"",
									"    // Validate 'total' field",
									"    pm.expect(tsProducts).to.have.property(\"total\");",
									"    pm.expect(tsProducts.total).to.be.a(\"number\");",
									"",
									"    // Validate 'docs' array",
									"    pm.expect(tsProducts).to.have.property(\"docs\");",
									"    pm.expect(tsProducts.docs).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    tsProducts.docs.forEach(product => {",
									"        let requiredFields = [",
									"            \"id\", \"pid\", \"code\", \"name\", \"minAmount\", \"maxAmount\",",
									"            \"startDate\", \"endDate\", \"minDepositAmount\", \"maxDepositAmount\",",
									"            \"duration\", \"matureInterestRate\", \"prematureInterestRates\",",
									"            \"managementFeeRate\", \"status\", \"image\", \"interestRates\",",
									"            \"specialProduct\", \"tag\", \"priorityWeight\",",
									"            \"externalRemainingAmount\", \"internalRemainingAmount\", \"__typename\"",
									"        ];",
									"",
									"        requiredFields.forEach(field => {",
									"            pm.expect(product).to.have.property(field);",
									"        });",
									"",
									"        pm.expect(product.id).to.be.a(\"number\");",
									"        pm.expect(product.pid).to.be.a(\"string\");",
									"        pm.expect(product.code).to.be.a(\"string\");",
									"        pm.expect(product.name).to.be.a(\"string\");",
									"        pm.expect(product.minAmount).to.be.a(\"number\");",
									"        pm.expect(product.maxAmount).to.be.a(\"number\");",
									"        pm.expect(product.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\+\\d{4}$/); // Validate date format",
									"        pm.expect(product.endDate).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\+\\d{4}$/); ",
									"        pm.expect(product.minDepositAmount).to.be.a(\"number\");",
									"        pm.expect(product.maxDepositAmount).to.be.a(\"number\");",
									"        pm.expect(product.duration).to.be.a(\"number\");",
									"        pm.expect(product.managementFeeRate).to.match(/^(\\d+(\\.\\d+)?)$/); // Validate numeric string",
									"        pm.expect(product.status).to.be.oneOf([\"started\", \"ended\", \"upcoming\"]); // Expected statuses",
									"        pm.expect(product.specialProduct).to.be.a(\"boolean\");",
									"        pm.expect(product.priorityWeight).to.be.a(\"number\");",
									"        pm.expect(product.externalRemainingAmount).to.be.a(\"number\");",
									"        pm.expect(product.internalRemainingAmount).to.be.a(\"number\");",
									"",
									"        // Validate 'matureInterestRate' object",
									"        let matureInterestRate = product.matureInterestRate;",
									"        pm.expect(matureInterestRate).to.have.property(\"duration\");",
									"        pm.expect(matureInterestRate).to.have.property(\"interestRate\");",
									"        pm.expect(matureInterestRate).to.have.property(\"description\");",
									"        pm.expect(matureInterestRate).to.have.property(\"type\");",
									"        pm.expect(matureInterestRate).to.have.property(\"durationKey\");",
									"        pm.expect(matureInterestRate.interestRate).to.be.a(\"number\");",
									"",
									"        // Validate 'prematureInterestRates' array",
									"        pm.expect(product.prematureInterestRates).to.be.an(\"array\");",
									"        product.prematureInterestRates.forEach(rate => {",
									"            pm.expect(rate).to.have.property(\"duration\");",
									"            pm.expect(rate).to.have.property(\"interestRate\");",
									"            pm.expect(rate.interestRate).to.be.a(\"number\");",
									"        });",
									"",
									"        // Validate 'interestRates' array",
									"        pm.expect(product.interestRates).to.be.an(\"array\");",
									"        product.interestRates.forEach(rate => {",
									"            pm.expect(rate).to.have.property(\"duration\");",
									"            pm.expect(rate).to.have.property(\"interestRate\");",
									"            pm.expect(rate.interestRate).to.be.a(\"number\");",
									"        });",
									"",
									"        // Validate 'image' field (nullable)",
									"        if (product.image !== null) {",
									"            pm.expect(product.image).to.match(/^https?:\\/\\/.+/);",
									"        }",
									"    });",
									"",
									"    console.log(\"✅ TS Products validated successfully!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"sortBy\": \"duration\"\n        }\n    },\n    \"query\": \"query ($input: TermSavingProductsInput) {\\n  ts_products(input: $input) {\\n    total\\n    docs {\\n      id\\n      pid\\n      code\\n      name\\n      minAmount\\n      maxAmount\\n      startDate\\n      endDate\\n      minDepositAmount\\n      maxDepositAmount\\n      duration\\n      matureInterestRate {\\n        duration\\n        interestRate\\n        description\\n        type\\n        durationKey\\n        __typename\\n      }\\n      prematureInterestRates {\\n        duration\\n        interestRate\\n        description\\n        type\\n        durationKey\\n        __typename\\n      }\\n      managementFeeRate\\n      status\\n      image\\n      interestRates {\\n        duration\\n        interestRate\\n        description\\n        type\\n        durationKey\\n        __typename\\n      }\\n      specialProduct\\n      tag\\n      priorityWeight\\n      externalRemainingAmount\\n      internalRemainingAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_ts_rollover_products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches ts_rollover_products\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ts_rollover_products\");",
									"});",
									"",
									"pm.test(\"✅ Validate API Response Structure and Values\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'ts_rollover_products'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"ts_rollover_products\");",
									"    ",
									"    let tsRolloverProducts = response.data.ts_rollover_products;",
									"",
									"    // Validate 'ts_rollover_products' array",
									"    pm.expect(tsRolloverProducts).to.be.an(\"array\").that.is.not.empty;",
									"",
									"    tsRolloverProducts.forEach(product => {",
									"        let requiredFields = [",
									"            \"id\", \"pid\", \"name\", \"code\", \"status\", \"issuerId\", \"priorityWeight\",",
									"            \"image\", \"duration\", \"minDepositAmount\", \"maxDepositAmount\", \"minAmount\",",
									"            \"maxAmount\", \"externalRemainingAmount\", \"internalRemainingAmount\",",
									"            \"description\", \"tag\", \"managementFeeRate\", \"specialProduct\",",
									"            \"startDate\", \"endDate\", \"createdAt\", \"updatedAt\",",
									"            \"prematureInterestRates\", \"matureInterestRate\", \"interestRates\",",
									"            \"isRollover\", \"__typename\"",
									"        ];",
									"",
									"        requiredFields.forEach(field => {",
									"            pm.expect(product).to.have.property(field);",
									"        });",
									"",
									"        pm.expect(product.id).to.be.a(\"number\");",
									"        pm.expect(product.pid).to.be.a(\"string\");",
									"        pm.expect(product.name).to.be.a(\"string\");",
									"        pm.expect(product.code).to.be.a(\"string\");",
									"        pm.expect(product.status).to.be.oneOf([\"started\", \"ended\", \"upcoming\"]); // Expected statuses",
									"        pm.expect(product.issuerId).to.be.a(\"number\");",
									"        pm.expect(product.priorityWeight).to.be.a(\"number\");",
									"        pm.expect(product.duration).to.be.a(\"number\");",
									"        pm.expect(product.minDepositAmount).to.be.a(\"number\");",
									"        pm.expect(product.maxDepositAmount).to.be.a(\"number\");",
									"        pm.expect(product.minAmount).to.be.a(\"number\");",
									"        pm.expect(product.maxAmount).to.be.a(\"number\");",
									"        pm.expect(product.managementFeeRate).to.match(/^(\\d+(\\.\\d+)?)$/); // Validate numeric string",
									"        pm.expect(product.specialProduct).to.be.a(\"boolean\");",
									"        pm.expect(product.isRollover).to.be.a(\"boolean\");",
									"",
									"        // Validate nullable fields",
									"        [\"image\", \"tag\", \"externalRemainingAmount\", \"internalRemainingAmount\"].forEach(field => {",
									"            if (product[field] !== null) {",
									"                pm.expect(product[field]).to.be.a(\"string\");",
									"            }",
									"        });",
									"",
									"        // Validate date fields",
									"        [\"startDate\", \"endDate\", \"createdAt\", \"updatedAt\"].forEach(field => {",
									"            pm.expect(product[field]).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\+\\d{4}$/); // Validate date format",
									"        });",
									"",
									"        // Validate 'matureInterestRate' object",
									"        let matureInterestRate = product.matureInterestRate;",
									"        pm.expect(matureInterestRate).to.have.property(\"id\");",
									"        pm.expect(matureInterestRate).to.have.property(\"pid\");",
									"        pm.expect(matureInterestRate).to.have.property(\"type\");",
									"        pm.expect(matureInterestRate).to.have.property(\"duration\");",
									"        pm.expect(matureInterestRate).to.have.property(\"durationKey\");",
									"        pm.expect(matureInterestRate).to.have.property(\"interestRate\");",
									"        pm.expect(matureInterestRate.interestRate).to.be.a(\"number\");",
									"",
									"        // Validate 'prematureInterestRates' array",
									"        pm.expect(product.prematureInterestRates).to.be.an(\"array\");",
									"        product.prematureInterestRates.forEach(rate => {",
									"            pm.expect(rate).to.have.property(\"id\");",
									"            pm.expect(rate).to.have.property(\"pid\");",
									"            pm.expect(rate).to.have.property(\"type\");",
									"            pm.expect(rate).to.have.property(\"duration\");",
									"            pm.expect(rate).to.have.property(\"durationKey\");",
									"            pm.expect(rate).to.have.property(\"interestRate\");",
									"            pm.expect(rate.interestRate).to.be.a(\"number\");",
									"        });",
									"",
									"        // Validate 'interestRates' array",
									"        pm.expect(product.interestRates).to.be.an(\"array\");",
									"        product.interestRates.forEach(rate => {",
									"            pm.expect(rate).to.have.property(\"id\");",
									"            pm.expect(rate).to.have.property(\"pid\");",
									"            pm.expect(rate).to.have.property(\"type\");",
									"            pm.expect(rate).to.have.property(\"duration\");",
									"            pm.expect(rate).to.have.property(\"durationKey\");",
									"            pm.expect(rate).to.have.property(\"interestRate\");",
									"            pm.expect(rate.interestRate).to.be.a(\"number\");",
									"        });",
									"",
									"        console.log(`✅ Product ID ${product.id} validated successfully!`);",
									"    });",
									"",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operationName\": \"get_ts_rollover_products\",\n    \"variables\": {\n        \"input\": {\n            \"productPid\": \"{{productPid_1M}}\"\n        }\n    },\n    \"query\": \"query get_ts_rollover_products($input: TermSavingRolloverProductsInput) {\\n  ts_rollover_products(input: $input) {\\n    id\\n    pid\\n    name\\n    code\\n    status\\n    issuerId\\n    priorityWeight\\n    image\\n    duration\\n    minDepositAmount\\n    maxDepositAmount\\n    minAmount\\n    maxAmount\\n    externalRemainingAmount\\n    internalRemainingAmount\\n    description\\n    tag\\n    managementFeeRate\\n    specialProduct\\n    startDate\\n    endDate\\n    createdAt\\n    updatedAt\\n    prematureInterestRates {\\n      id\\n      pid\\n      type\\n      duration\\n      durationKey\\n      interestRate\\n      description\\n      __typename\\n    }\\n    matureInterestRate {\\n      id\\n      pid\\n      type\\n      duration\\n      durationKey\\n      interestRate\\n      description\\n      __typename\\n    }\\n    interestRates {\\n      id\\n      pid\\n      type\\n      duration\\n      durationKey\\n      interestRate\\n      description\\n      __typename\\n    }\\n    isRollover\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "portfolio (V1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches portfolio\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"portfolio\");",
									"});",
									"",
									"pm.test(\"✅ Validate Portfolio V1 API Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'portfolio'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"portfolio\");",
									"",
									"    let portfolio = response.data.portfolio;",
									"",
									"    // Define required numeric fields",
									"    let requiredFields = [",
									"        \"certificate_of_deposit_balance\",",
									"        \"certificate_of_deposit_temp_interest\",",
									"        \"real_estate_balance\",",
									"        \"real_estate_interest\",",
									"        \"mf_balance\",",
									"        \"mf_profit\",",
									"        \"stock_total_balance\",",
									"        \"stock_total_growth\",",
									"        \"__typename\"",
									"    ];",
									"",
									"    // Check if all required fields exist and have valid types",
									"    requiredFields.forEach(field => {",
									"        pm.expect(portfolio).to.have.property(field);",
									"        ",
									"        if (field !== \"__typename\") {",
									"            pm.expect(portfolio[field]).to.be.a(\"number\"); // Ensure numeric fields",
									"        } else {",
									"            pm.expect(portfolio[field]).to.be.a(\"string\"); // Ensure __typename is a string",
									"        }",
									"    });",
									"",
									"    // Validate values are non-negative (assuming no negative balances allowed)",
									"    let numericFields = requiredFields.filter(field => field !== \"__typename\");",
									"    numericFields.forEach(field => {",
									"        pm.expect(portfolio[field]).to.be.at.least(0);",
									"    });",
									"",
									"    console.log(\"✅ Portfolio V1 API response is valid!\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolio(input: {get_performance: false}) {\\n    certificate_of_deposit_balance\\n    certificate_of_deposit_temp_interest\\n    real_estate_balance\\n    real_estate_interest\\n    mf_balance\\n    mf_profit\\n    stock_total_balance\\n    stock_total_growth\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "portfolioSavingsV2 (V2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed ReferenceError by declaring fsTotalBalance, tsTotalBalance, and gsTotalBalance",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches portfolioSavingsV2\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"portfolioSavingsV2\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set('fsTotalBalance_1', jsonData.data.portfolioSavingsV2.savings.totalBalance);",
									"pm.collectionVariables.set('tsTotalBalance_1', jsonData.data.portfolioSavingsV2.termSavings.totalBalance);",
									"pm.collectionVariables.set('gsTotalBalance_1', jsonData.data.portfolioSavingsV2.groupSavings.totalBalance);",
									"",
									"var fsTotalBalance_1 = pm.collectionVariables.get('fsTotalBalance_1');",
									"var tsTotalBalance_1 = pm.collectionVariables.get('tsTotalBalance_1');",
									"var gsTotalBalance_1 = pm.collectionVariables.get('gsTotalBalance_1');",
									"",
									"console.log('fsTotalBalance_1', fsTotalBalance_1);",
									"console.log('tsTotalBalance_1', tsTotalBalance_1);",
									"console.log('gsTotalBalance_1', gsTotalBalance_1);",
									"",
									"",
									"pm.test(\"✅ Validate Portfolio Savings V2 API Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'portfolioSavingsV2'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"portfolioSavingsV2\");",
									"",
									"    let portfolioSavingsV2 = response.data.portfolioSavingsV2;",
									"",
									"    // Ensure 'portfolioSavingsV2' contains required sections",
									"    let requiredSections = [\"savings\", \"termSavings\", \"groupSavings\"];",
									"    requiredSections.forEach(section => {",
									"        pm.expect(portfolioSavingsV2).to.have.property(section);",
									"    });",
									"",
									"    // Validate each savings section",
									"    requiredSections.forEach(section => {",
									"        let savingsGroup = portfolioSavingsV2[section];",
									"",
									"        // Check for required properties",
									"        pm.expect(savingsGroup).to.have.property(\"totalBalance\").that.is.a(\"number\");",
									"        pm.expect(savingsGroup).to.have.property(\"interestAmount\").that.is.a(\"number\");",
									"        pm.expect(savingsGroup).to.have.property(\"__typename\").that.is.a(\"string\");",
									"",
									"        // Validate values are non-negative",
									"        pm.expect(savingsGroup.totalBalance).to.be.at.least(0);",
									"        pm.expect(savingsGroup.interestAmount).to.be.at.least(0);",
									"    });",
									"",
									"    // Validate __typename at the top level",
									"    pm.expect(portfolioSavingsV2).to.have.property(\"__typename\").that.is.a(\"string\");",
									"",
									"    console.log(\"✅ Portfolio Savings V2 API response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolioSavingsV2(input: {}) {\\n    savings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    termSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    groupSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				},
				{
					"name": "fs_withdrawable_amount (#1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches fs_withdrawable_amount\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fs_withdrawable_amount\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var amount = jsonData.data.fs_withdrawable_amount.amount;",
									"pm.collectionVariables.set('fs_withdrawable_amount', amount);",
									"console.log('fsRemainingAmount', amount)",
									"",
									"",
									"pm.test(\"✅ Validate FS Withdrawable Amount API Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Ensure response contains 'data' and 'fs_withdrawable_amount'",
									"    pm.expect(response).to.have.property(\"data\");",
									"    pm.expect(response.data).to.have.property(\"fs_withdrawable_amount\");",
									"",
									"    let withdrawableAmount = response.data.fs_withdrawable_amount;",
									"",
									"    // Validate 'fs_withdrawable_amount' contains 'amount'",
									"    pm.expect(withdrawableAmount).to.have.property(\"amount\").that.is.a(\"number\");",
									"",
									"    // Ensure 'amount' is non-negative",
									"    pm.expect(withdrawableAmount.amount).to.be.at.least(0);",
									"",
									"    console.log(\"✅ FS Withdrawable Amount API response is valid!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"query{\\n    fs_withdrawable_amount {\\n    amount\\n  }\\n}\",\n    \"variables\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Savings CoverV1",
			"item": [
				{
					"name": "FS",
					"item": [
						{
							"name": "FS Deposit",
							"item": [
								{
									"name": "FS Profit (total_fs_profit_received)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches total_fs_profit_received\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"total_fs_profit_received\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": \"query total_fs_profit_received {\\n  total_fs_profit_received\\n}\",\n    \"variables\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "FS CreatePackageInput (500M)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('depositSavingAmount', 500000000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var investmentPackageId = jsonData.data.create_package.id;",
													"pm.collectionVariables.set('investmentPackageId', investmentPackageId);",
													"console.log('investmentPackageId', investmentPackageId);",
													"",
													"pm.test(\"✅ Validate Create Package Response\", function () {",
													"    let response = pm.response.json();",
													"    ",
													"    // Ensure 'data' exists",
													"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    // Ensure 'create_package' exists inside 'data'",
													"    pm.expect(response.data).to.have.property(\"create_package\").that.is.an(\"object\");",
													"",
													"    let package = response.data.create_package;",
													"",
													"    // Validate 'id' and '__typename'",
													"    pm.expect(package).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(package).to.have.property(\"__typename\", \"InvestmentPackageResult\");",
													"",
													"    // Validate 'extensions' and timing",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
													"",
													"    console.log(\"✅ Create Package Response is valid.\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"offer\": \"{{fsOffersId}}\",\n            \"saving_amount\": {{depositSavingAmount}},\n            \"is_multiple_savings\": true,\n            \"use_reward\": false,\n            \"use_reward_amount\": 0\n        }\n    },\n    \"query\": \"mutation ($input: CreatePackageInput) {\\n  create_package(input: $input) {\\n    id\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "FS investment_package",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your status is PENDING\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.investment_package.status).to.eql('PENDING');",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var prefixPackageId = jsonData.data.investment_package.prefix_package_id;",
													"pm.collectionVariables.set('prefixPackageId', prefixPackageId);",
													"console.log('prefixPackageId', prefixPackageId);",
													"",
													"var packageId = jsonData.data.investment_package.package_id;",
													"pm.collectionVariables.set('packageId', packageId);",
													"console.log('packageId', packageId);",
													"",
													"var status = jsonData.data.investment_package.status;",
													"pm.collectionVariables.set('status', status);",
													"console.log('status', status);",
													"",
													"var transactionsId = jsonData.data.investment_package.transactions[0].id;",
													"pm.collectionVariables.set('transactionsId', transactionsId);",
													"console.log('transactionsId', transactionsId);",
													"",
													"var transactionsAmount = jsonData.data.investment_package.transactions[0].amount;",
													"pm.collectionVariables.set('transactionsAmount', transactionsAmount);",
													"console.log('transactionsAmount', transactionsAmount);",
													"",
													"",
													"pm.test(\"Your depositSavingAmount is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.investment_package.transactions[0].amount).to.eql(pm.collectionVariables.get(\"depositSavingAmount\"));",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate Investment Package Response\", function () {",
													"    let response = pm.response.json();",
													"    ",
													"    // Ensure 'data' exists",
													"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    // Ensure 'investment_package' exists inside 'data'",
													"    pm.expect(response.data).to.have.property(\"investment_package\").that.is.an(\"object\");",
													"",
													"    let package = response.data.investment_package;",
													"",
													"    // Validate main investment package properties",
													"    pm.expect(package).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(package).to.have.property(\"prefix_package_id\").that.is.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(package).to.have.property(\"package_id\").that.is.a(\"string\").and.to.not.be.empty;",
													"    pm.expect(package).to.have.property(\"status\").that.is.a(\"string\").and.to.match(/PENDING|ACTIVE|CANCELLED|NEW/);",
													"",
													"    // Validate offer property",
													"    pm.expect(package).to.have.property(\"offer\").that.is.an(\"object\");",
													"    pm.expect(package.offer).to.have.property(\"property\").that.is.an(\"object\");",
													"    pm.expect(package.offer.property).to.have.property(\"name\").that.is.a(\"string\").and.to.not.be.empty;",
													"",
													"    // Validate transactions array",
													"    pm.expect(package).to.have.property(\"transactions\").that.is.an(\"array\").and.to.not.be.empty;",
													"    ",
													"    package.transactions.forEach((txn) => {",
													"        pm.expect(txn).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(txn).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
													"        pm.expect(txn).to.have.property(\"reward_amount\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(txn).to.have.property(\"created_at\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(txn).to.have.property(\"confirmed_payment\").that.is.oneOf([null, \"CONFIRMED\"]);",
													"    });",
													"",
													"    // Validate 'extensions' and timing",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
													"",
													"    console.log(\"✅ Investment Package Response is valid.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"investment_package\",\n    \"variables\": {\n        \"id\": \"{{investmentPackageId}}\"\n    },\n    \"query\": \"query investment_package($id: ID) {\\n  investment_package(input: {id: $id}) {\\n    id\\n    prefix_package_id\\n    package_id\\n    status\\n    offer {\\n      property {\\n        name\\n        __typename\\n      }\\n      __typename\\n    }\\n    transactions {\\n      id\\n      amount\\n      reward_amount\\n      created_at\\n      confirmed_payment\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "VA Deposit Trigger (FS)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate UUID (similar to uuid.v4())",
													"function generateUUID() {",
													"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
													"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
													"        return v.toString(16);",
													"    });",
													"}",
													"",
													"",
													"// Get current time (similar to dayjs().format())",
													"function getCurrentTime() {",
													"    var date = new Date();",
													"    return date.getFullYear() + '-' +",
													"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
													"        ('0' + date.getDate()).slice(-2) + ' ' +",
													"        ('0' + date.getHours()).slice(-2) + ':' +",
													"        ('0' + date.getMinutes()).slice(-2) + ':' +",
													"        ('0' + date.getSeconds()).slice(-2);",
													"}",
													"",
													"// Get VA Payload from Deposit Payment",
													"const Amount = pm.collectionVariables.get('transactionsAmount')",
													"const Fee = 4400;",
													"const VaAcc = pm.collectionVariables.get('VaAcc')",
													"const VaName = pm.collectionVariables.get('VaName')",
													"const MapId = pm.collectionVariables.get('MapId')",
													"const Remark = pm.collectionVariables.get('prefixPackageId')",
													"",
													"",
													"",
													"// Generate the payload",
													"const payload = {",
													"    RequestId: generateUUID(),",
													"    ReferenceId: generateUUID(),",
													"    RequestTime: getCurrentTime(),",
													"    BankTranTime: getCurrentTime(),",
													"    Amount: Amount, ",
													"    Fee: Fee,",
													"    VaAcc: VaAcc,",
													"    MapId: MapId,",
													"    VaName: VaName,",
													"    MerchantCode: 'VAP001',",
													"    BankCode: 'WOORIBANK',",
													"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
													"    Remark: Remark",
													"};",
													"",
													"// Concatenate fields for signature",
													"const textToSign = [",
													"    payload.RequestId,",
													"    payload.ReferenceId,",
													"    payload.RequestTime,",
													"    payload.Amount,",
													"    payload.Fee,",
													"    payload.VaAcc,",
													"    payload.MapId",
													"].join('|');",
													"",
													"// Send request to external API to sign the payload",
													"pm.sendRequest({",
													"    url: 'http://localhost:3000/sign',",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({ textToSign })",
													"    }",
													"}, function (err, res) {",
													"    if (err) {",
													"        console.log(\"Error generating signature: \", err);",
													"    } else {",
													"        // Assume the service returns a JSON with the signature",
													"        const signature = res.json().signature;",
													"        ",
													"        // Add the signature to the payload",
													"        payload.Signature = signature;",
													"",
													"        // Store the full payload in the environment variable",
													"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
													"        console.log(\"payload\", payload)",
													"",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your ResponseCode is 200\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Your ResponseMessage is Success\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestPayload}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
											"protocol": "https",
											"host": [
												"cash-in-api",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"webhook",
												"va",
												"epay",
												"deposit"
											]
										}
									},
									"response": []
								},
								{
									"name": "FS ConfirmPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.confirm_payment).to.eql(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"ConfirmPayment\",\n    \"variables\": {\n        \"input\": {\n            \"transaction_id\": \"{{transactionsId}}\"\n        }\n    },\n    \"query\": \"mutation ConfirmPayment($input: ConfirmPaymentInput) {\\n  confirm_payment(input: $input)\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "FS History (groupTransactions - list)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 10000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ids = jsonData.data.groupTransactions.docs[0].ids[0];",
													"pm.globals.set('ids', ids);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Body matches groupTransactions\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"groupTransactions\");",
													"});",
													"",
													"pm.test(\"Body matches transaction_id\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"transaction_id\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variables\": {\n        \"page\": 1,\n        \"limit\": 100\n    },\n    \"query\": \"query ($page: Int, $limit: Int) {\\n  groupTransactions(\\n    input: {page: $page, limit: $limit, filter: {types: [\\\"income\\\", \\\"outcome\\\"], statuses: [\\\"success\\\", \\\"failed\\\"], description: [\\\"saving_withdraw_to_insurance\\\", \\\"savings\\\", \\\"savings_withdrawal\\\", \\\"saving_withdraw_to_mutual_fund\\\", \\\"savings_interest\\\", \\\"savings_management_fee\\\", \\\"saving_withdraw_to_stock\\\", \\\"saving_withdraw_to_term_savings\\\", \\\"saving_settlement\\\", \\\"convert_from_mf\\\", \\\"saving_reinvest\\\", \\\"ts_reinvest\\\", \\\"ts_invest\\\", \\\"adjusted_balance\\\", \\\"saving_withdraw_to_group_savings\\\", \\\"savings_deposit_from_group_savings_deactivate_at_cp_start\\\", \\\"savings_deposit_from_group_savings_withdraw_early\\\", \\\"savings_deposit_from_group_savings_user_triggered\\\", \\\"savings_deposit_from_group_savings_settle_group\\\", \\\"cd_reinvest\\\", \\\"saving_withdraw_to_gap_deduction\\\", \\\"convert_from_st\\\"]}}\\n  ) {\\n    total\\n    docs {\\n      ids\\n      transaction_id\\n      created_at\\n      amount\\n      description\\n      gross_interest_amount\\n      tax_amount\\n      fee_amount\\n      status\\n      investment_package {\\n        id\\n        __typename\\n      }\\n      deposit_withdraw {\\n        id\\n        amount\\n        __typename\\n      }\\n      buy_request {\\n        id\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "FS History Detail [0]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, 10000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your status SUCCESS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.transactions.docs[0].status).to.eql('SUCCESS');",
													"});",
													"",
													"pm.test(\"Your amount is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.transactions.docs[0].amount).to.eql(pm.collectionVariables.get(\"transactionsAmount\"));",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var netAmount = jsonData.data.transactions.docs[0].amount;",
													"pm.collectionVariables.set('netAmount', netAmount);",
													"console.log('netAmount : ' + netAmount);",
													"",
													"",
													"pm.test(\"✅ Validate FS Transaction Detail Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Ensure 'data' exists",
													"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
													"",
													"    // Ensure 'transactions' exists inside 'data'",
													"    pm.expect(response.data).to.have.property(\"transactions\").that.is.an(\"object\");",
													"",
													"    let transactions = response.data.transactions;",
													"",
													"    // Ensure 'docs' array exists and is not empty",
													"    pm.expect(transactions).to.have.property(\"docs\").that.is.an(\"array\").and.to.not.be.empty;",
													"",
													"    transactions.docs.forEach((txn) => {",
													"        pm.expect(txn).to.have.property(\"transaction_id\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(txn).to.have.property(\"description\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(txn).to.have.property(\"fee_amount\").that.satisfy(val => val === null || typeof val === \"number\");",
													"        pm.expect(txn).to.have.property(\"early_withdrawal_fee_amount\").that.satisfy(val => val === null || typeof val === \"number\");",
													"        pm.expect(txn).to.have.property(\"gross_interest_amount\").that.satisfy(val => val === null || typeof val === \"number\");",
													"        pm.expect(txn).to.have.property(\"reward_amount\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(txn).to.have.property(\"fee\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(txn).to.have.property(\"status\").that.is.oneOf([\"SUCCESS\", \"PENDING\", \"FAILED\"]);",
													"        pm.expect(txn).to.have.property(\"tax_amount\").that.satisfy(val => val === null || typeof val === \"number\");",
													"        pm.expect(txn).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
													"        pm.expect(txn).to.have.property(\"net_amount\").that.is.a(\"number\").and.to.be.above(0);",
													"    });",
													"",
													"    // Validate 'extensions' and timing",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
													"",
													"    console.log(\"✅ FS Transaction Detail Response is valid.\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"transactions\",\n    \"variables\": {\n        \"input\": {\n            \"limit\": 1,\n            \"page\": 1,\n            \"filter\": {\n                \"transactionIds\": [\n                    \"{{ids}}\"\n                ]\n            }\n        }\n    },\n    \"query\": \"query transactions($input: GetTransactionsInput) {\\n  transactions(input: $input) {\\n    docs {\\n      transaction_id\\n      description\\n      fee_amount\\n      early_withdrawal_fee_amount\\n      gross_interest_amount\\n      reward_amount\\n      fee\\n      fee_amount\\n      status\\n      tax_amount\\n      amount\\n      net_amount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "portfolioSavingsV2 (verify FS balance)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 10000);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set('fsTotalBalance', jsonData.data.portfolioSavingsV2.savings.totalBalance);",
													"pm.collectionVariables.set('tsTotalBalance', jsonData.data.portfolioSavingsV2.termSavings.totalBalance);",
													"pm.collectionVariables.set('gsTotalBalance', jsonData.data.portfolioSavingsV2.groupSavings.totalBalance);",
													"",
													"var fsTotalBalance = pm.collectionVariables.get('fsTotalBalance');",
													"var tsTotalBalance = pm.collectionVariables.get('tsTotalBalance');",
													"var gsTotalBalance = pm.collectionVariables.get('gsTotalBalance');",
													"",
													"console.log('fsTotalBalance', fsTotalBalance);",
													"console.log('tsTotalBalance', tsTotalBalance);",
													"console.log('gsTotalBalance', gsTotalBalance);",
													"",
													"",
													"pm.test(\"✅ Validate Portfolio Savings V2 API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Ensure response contains 'data' and 'portfolioSavingsV2'",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"portfolioSavingsV2\");",
													"",
													"    let portfolioSavingsV2 = response.data.portfolioSavingsV2;",
													"",
													"    // Ensure 'portfolioSavingsV2' contains required sections",
													"    let requiredSections = [\"savings\", \"termSavings\", \"groupSavings\"];",
													"    requiredSections.forEach(section => {",
													"        pm.expect(portfolioSavingsV2).to.have.property(section);",
													"    });",
													"",
													"    // Validate each savings section",
													"    requiredSections.forEach(section => {",
													"        let savingsGroup = portfolioSavingsV2[section];",
													"",
													"        // Check for required properties",
													"        pm.expect(savingsGroup).to.have.property(\"totalBalance\").that.is.a(\"number\");",
													"        pm.expect(savingsGroup).to.have.property(\"interestAmount\").that.is.a(\"number\");",
													"        pm.expect(savingsGroup).to.have.property(\"__typename\").that.is.a(\"string\");",
													"",
													"        // Validate values are non-negative",
													"        pm.expect(savingsGroup.totalBalance).to.be.at.least(0);",
													"        pm.expect(savingsGroup.interestAmount).to.be.at.least(0);",
													"    });",
													"",
													"    // Validate __typename at the top level",
													"    pm.expect(portfolioSavingsV2).to.have.property(\"__typename\").that.is.a(\"string\");",
													"",
													"    console.log(\"✅ Portfolio Savings V2 API response is valid!\");",
													"});",
													"",
													"",
													"pm.test(\"✅ FS totalBalance is >= 500,000,000\", function () {",
													"    const balance = pm.response.json().data.portfolioSavingsV2.savings.totalBalance;",
													"    pm.expect(balance).to.be.at.least(500000000);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolioSavingsV2(input: {}) {\\n    savings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    termSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    groupSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FS Withdraw",
							"item": [
								{
									"name": "FS Withdraw 1M - approved",
									"item": [
										{
											"name": "3a.FS Withdraw (create_withdrawal = 1M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 1000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"var idDepositWithdraw = jsonData.data.create_withdrawal[0].deposit_withdraw.id;",
															"pm.collectionVariables.set('idDepositWithdraw', idDepositWithdraw);",
															"console.log('idDepositWithdraw : '  + idDepositWithdraw)",
															"",
															"var fsWithdrawAmount = jsonData.data.create_withdrawal[0].amount;",
															"pm.collectionVariables.set('fsWithdrawAmount', fsWithdrawAmount);",
															"console.log('fsWithdrawAmount : '  + fsWithdrawAmount)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is pending\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_withdrawal[0].deposit_withdraw.status).to.eql('pending');",
															"});",
															"",
															"pm.test(\"✅ Validate FS Create Withdrawal Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"",
															"    // Ensure 'create_withdrawal' array exists and is not empty",
															"    pm.expect(response.data).to.have.property(\"create_withdrawal\").that.is.an(\"array\").and.to.not.be.empty;",
															"",
															"    let withdrawals = response.data.create_withdrawal;",
															"",
															"    withdrawals.forEach((withdrawal) => {",
															"        pm.expect(withdrawal).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
															"        pm.expect(withdrawal).to.have.property(\"transaction_id\").that.is.a(\"string\").and.to.not.be.empty;",
															"        pm.expect(withdrawal).to.have.property(\"reward_amount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(withdrawal).to.have.property(\"transaction_type\").that.is.oneOf([\"income\", \"expense\"]);",
															"        pm.expect(withdrawal).to.have.property(\"description\").that.equals(\"savings_withdrawal\");",
															"        pm.expect(withdrawal).to.have.property(\"interest_amount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(withdrawal).to.have.property(\"early_withdrawal_fee_amount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(withdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(withdrawal).to.have.property(\"fee\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(withdrawal).to.have.property(\"creator\").that.is.a(\"string\").and.to.not.be.empty;",
															"        pm.expect(withdrawal).to.have.property(\"status\").that.is.oneOf([\"NEW\", \"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"",
															"        // Validate 'deposit_withdraw' object",
															"        pm.expect(withdrawal).to.have.property(\"deposit_withdraw\").that.is.an(\"object\");",
															"        pm.expect(withdrawal.deposit_withdraw).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
															"        pm.expect(withdrawal.deposit_withdraw).to.have.property(\"description\").that.equals(\"savings_withdrawal\");",
															"        pm.expect(withdrawal.deposit_withdraw).to.have.property(\"status\").that.is.oneOf([\"pending\", \"completed\", \"failed\"]);",
															"",
															"        // Validate 'investment_package' object",
															"        pm.expect(withdrawal).to.have.property(\"investment_package\").that.is.an(\"object\");",
															"        pm.expect(withdrawal.investment_package).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
															"        pm.expect(withdrawal.investment_package).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(withdrawal.investment_package).to.have.property(\"status\").that.is.oneOf([\"ACTIVE\", \"CLOSED\"]);",
															"    });",
															"",
															"    // Validate 'extensions' and timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Create FS Withdrawal Response is valid.\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"query\": \"mutation{\\n    create_withdrawal(input:{withdrawal_amount:{{withdrawalAmount}},withdrawal_reason:\\\"QA_test\\\",pin_code:\\\"{{pinCode}}\\\"}){\\n        id\\n    transaction_id\\n    reward_amount\\n    transaction_type\\n    description\\n    interest_amount\\n    early_withdrawal_fee_amount\\n    amount\\n    fee\\n    creator\\n    status\\n    deposit_withdraw{\\n      id\\n      description\\n      status\\n    }\\n    investment_package{\\n      id\\n      balance\\n      status\\n    }\\n    description\\n    interest_amount\\n    early_withdrawal_fee_amount\\n    }\\n}\",\n    \"variables\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "3b.FS Withdaw Detail (deposit_withdraw 1M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"var deposit_token = jsonData.data.deposit_withdraw.deposit_token;",
															"pm.collectionVariables.set('referenceId', 'SA_' + deposit_token);",
															"console.log('referenceId : ' + 'SA_' + deposit_token)",
															"",
															"var status = jsonData.data.deposit_withdraw.status;",
															"console.log('status : ' + status)",
															"",
															"var amount = jsonData.data.deposit_withdraw.amount;",
															"console.log('amount : ' + amount)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your amount is 1M\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.deposit_withdraw.amount).to.eql(1000000);",
															"});",
															"",
															"pm.test(\"Your status is approved\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.deposit_withdraw.status).to.eql('pending');",
															"});",
															"",
															"pm.test(\"Your payment method is bank_transfer_manual\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.deposit_withdraw.fiat_payment_method).to.eql('bank_transfer_manual');",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate FS Withdraw Detail Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"",
															"    // Ensure 'deposit_withdraw' object exists",
															"    pm.expect(response.data).to.have.property(\"deposit_withdraw\").that.is.an(\"object\");",
															"",
															"    let withdraw = response.data.deposit_withdraw;",
															"",
															"    pm.expect(withdraw).to.have.property(\"id\").that.is.a(\"string\").and.to.not.be.empty;",
															"    pm.expect(withdraw).to.have.property(\"deposit_token\").that.is.a(\"string\").and.to.not.be.empty;",
															"    pm.expect(withdraw).to.have.property(\"type\").that.is.oneOf([\"withdraw\", \"deposit\"]);",
															"    pm.expect(withdraw).to.have.property(\"status\").that.is.oneOf([\"pending\", \"completed\", \"failed\",\"approved\"]);",
															"    pm.expect(withdraw).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(withdraw).to.have.property(\"fiat_payment_method\").that.is.a(\"string\").and.to.not.be.empty;",
															"    pm.expect(withdraw).to.have.property(\"description\").that.equals(\"savings_withdrawal\");",
															"",
															"    // Validate 'extensions' and timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ FS Withdraw Detail Response is valid.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"query\": \"query deposit_withdraw($input: DepositWithdrawInput!) {\\n    deposit_withdraw(input: $input) {\\n      id\\n      updated_at\\n      deposit_token\\n      type\\n      status\\n      amount\\n      fiat_payment_method\\n      description\\n      created_at\\n    }\\n  }\",\n    \"variables\": {\n        \"input\": {\n            \"id\": \"{{idDepositWithdraw}}\" \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "FS Withdraw 49K - errors",
									"item": [
										{
											"name": "6a.FS Withdraw (create_withdrawal < 50k = 49k)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 49000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate Withdrawal Amount Error\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'errors' exist",
															"    pm.expect(response).to.have.property(\"errors\").that.is.an(\"array\").with.length.above(0);",
															"",
															"    let error = response.errors[0];",
															"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\").and.to.include(\"Withdrawal amount must be larger than or equal to 50000\");",
															"",
															"    // Ensure 'data.create_withdrawal' is null",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_withdrawal\").that.is.null;",
															"",
															"    // Validate 'extensions' and timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Withdrawal failed due to low amount.\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"query\": \"mutation{\\n    create_withdrawal(input:{withdrawal_amount:{{withdrawalAmount}},withdrawal_reason:\\\"QA_test\\\",pin_code:\\\"{{pinCode}}\\\"}){\\n        id\\n    transaction_id\\n    reward_amount\\n    transaction_type\\n    description\\n    interest_amount\\n    early_withdrawal_fee_amount\\n    amount\\n    fee\\n    creator\\n    status\\n    deposit_withdraw{\\n      id\\n      description\\n      status\\n    }\\n    investment_package{\\n      id\\n      balance\\n      status\\n    }\\n    description\\n    interest_amount\\n    early_withdrawal_fee_amount\\n    }\\n}\",\n    \"variables\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "TS",
					"item": [
						{
							"name": "TS Deposit",
							"item": [
								{
									"name": "TS deposit from FS (100M)",
									"item": [
										{
											"name": "TS create_ts_account (convert from FS 100M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositSavingAmount', 100000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Your sattus is success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_account.status).to.eql(\"success\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var tsAccountPid = jsonData.data.create_ts_account.pid;",
															"pm.collectionVariables.set('tsAccountPid', tsAccountPid);",
															"console.log('tsAccountPid', tsAccountPid);",
															"",
															"var tsAmount = jsonData.data.create_ts_account.amount;",
															"pm.collectionVariables.set('tsAmount', tsAmount);",
															"console.log('tsAmount', tsAmount);",
															"",
															"var status = jsonData.data.create_ts_account.status;",
															"pm.collectionVariables.set('status', status);",
															"console.log('status', status);",
															"",
															"var paymentMethod = jsonData.data.create_ts_account.paymentMethod;",
															"pm.collectionVariables.set('paymentMethod', paymentMethod);",
															"console.log('paymentMethod', paymentMethod);",
															"",
															"var memo = jsonData.data.create_ts_account.account.memo;",
															"pm.collectionVariables.set('memo', memo);",
															"console.log('memo', memo);",
															"",
															"var account_pid = jsonData.data.create_ts_account.account.pid;",
															"pm.collectionVariables.set('account_pid', account_pid);",
															"console.log('account_pid', account_pid);",
															"",
															"pm.test(\"Your depositSavingAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_account.amount).to.eql(pm.variables.get('depositSavingAmount'));",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Creation Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.create_ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.create_ts_account;",
															"",
															"    // Validate basic transaction properties",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(tsAccount).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"status\").that.equals(\"success\");",
															"    pm.expect(tsAccount).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"paymentMethod\").that.is.a(\"string\").and.to.not.be.empty;",
															"",
															"    // Validate account properties",
															"    pm.expect(tsAccount).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsAccount.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.to.not.be.empty;",
															"",
															"    // Validate product details",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.not.be.empty;",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"    let interestRate = product.matureInterestRate;",
															"    pm.expect(interestRate).to.have.property(\"interestRate\").that.equals(0.051);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account created successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{depositSavingAmount}},\n            \"paymentMethod\": \"flexible_savings\",\n            \"platform\": \"PostmanTest\",\n            \"productPid\": \"{{productPid_1M}}\",\n            \"rewardAmount\": 0,\n            \"settlementType\": \"term_savings\",\n            \"settlementProductPid\": \"{{productPid_1M}}\"\n        }\n    },\n    \"query\": \"mutation ($input: CreateTSAccountInput) {\\n  create_ts_account(input: $input) {\\n    pid\\n    amount\\n    rewardAmount\\n    status\\n    createdAt\\n    paymentMethod\\n    account {\\n      pid\\n      memo\\n      product {\\n        pid\\n        name\\n        matureInterestRate {\\n          duration\\n          durationKey\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS update_ts_account (update_ts_rollover_products)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositSavingAmount', 50000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your sattus is success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.update_ts_account.message).to.eql(\"success\");",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Update Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.update_ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"update_ts_account\").that.is.an(\"object\");",
															"",
															"    let updateAccount = response.data.update_ts_account;",
															"",
															"    // Validate response properties",
															"    pm.expect(updateAccount).to.have.property(\"message\").that.equals(\"success\");",
															"    pm.expect(updateAccount).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(updateAccount).to.have.property(\"id\").that.is.null; // Ensure ID is null if expected",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account updated successfully.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationName\": \"update_ts_rollover_products\",\n  \"variables\": {\n    \"input\": {\n      \"accountPid\": \"{{account_pid}}\",\n      \"settlementType\": \"flexible_savings\",\n      \"settlementProductPid\": \"{{productPid_1M}}\" //Rollover to TS 1 month\n    }\n  },\n  \"query\": \"mutation update_ts_rollover_products($input: UpdateTSAccountInput) {\\n  update_ts_account(input: $input) {\\n    message\\n    id\\n    pid\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS ts_transaction (convert from FS)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your sattus is success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_transaction.status).to.eql(\"success\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount);",
															"",
															"var bankMemo = jsonData.data.ts_transaction.account.memo;",
															"pm.collectionVariables.set('bankMemo', bankMemo);",
															"console.log('bankMemo', bankMemo);",
															"",
															"",
															"pm.test(\"Your tsAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_transaction.amount).to.eql(pm.collectionVariables.get('tsAmount'));",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_transaction' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.ts_transaction;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\").and.to.have.length.above(0);",
															"    pm.expect(transaction).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"rewardAmount\").that.is.a(\"number\");",
															"    pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"status\").that.equals(\"success\");",
															"",
															"    // Validate account properties",
															"    pm.expect(transaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = transaction.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.to.have.length.above(0);",
															"    pm.expect(account).to.have.property(\"code\").that.is.a(\"string\").and.to.have.length.above(0);",
															"",
															"    // Validate product properties",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{tsAccountPid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    amount\\n    rewardAmount\\n    createdAt\\n    paymentConfirmed\\n    status\\n    account {\\n      pid\\n      memo\\n      code\\n      product {\\n        name\\n        pid\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS deposit from bank transfer (500M)",
									"item": [
										{
											"name": "TS CreateTSAccountInput (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositSavingAmount', 500000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var tsAccountPid = jsonData.data.create_ts_account.pid;",
															"pm.collectionVariables.set('tsAccountPid', tsAccountPid);",
															"console.log('tsAccountPid', tsAccountPid);",
															"",
															"var tsAmount = jsonData.data.create_ts_account.amount;",
															"pm.collectionVariables.set('tsAmount', tsAmount);",
															"console.log('tsAmount', tsAmount);",
															"",
															"var status = jsonData.data.create_ts_account.status;",
															"pm.collectionVariables.set('status', status);",
															"console.log('status', status);",
															"",
															"var paymentMethod = jsonData.data.create_ts_account.paymentMethod;",
															"pm.collectionVariables.set('paymentMethod', paymentMethod);",
															"console.log('paymentMethod', paymentMethod);",
															"",
															"var memo = jsonData.data.create_ts_account.account.memo;",
															"pm.collectionVariables.set('memo', memo);",
															"console.log('memo', memo);",
															"",
															"var account_pid = jsonData.data.create_ts_account.account.pid;",
															"pm.collectionVariables.set('account_pid', account_pid);",
															"console.log('account_pid', account_pid);",
															"",
															"",
															"pm.test(\"✅ Validate Create TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the create_ts_account object",
															"    pm.expect(response.data).to.have.property(\"create_ts_account\").that.is.an(\"object\");",
															"    let tsAccount = response.data.create_ts_account;",
															"",
															"    // Validate ts_account properties",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsAccount).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"    pm.expect(tsAccount).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"paymentMethod\").that.is.a(\"string\").and.equals(\"bank_transfer\");",
															"",
															"    // Validate the account object inside the ts_account",
															"    pm.expect(tsAccount).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsAccount.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the matureInterestRate object inside the product",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"    let interestRate = product.matureInterestRate;",
															"",
															"    pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Create TS Account Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{depositSavingAmount}},\n            \"paymentMethod\": \"bank_transfer\",\n            \"platform\": \"PostmanTest\",\n            \"productPid\": \"{{productPid_9M}}\",\n            \"rewardAmount\": 0,\n            \"settlementType\": \"term_savings\",\n            \"settlementProductPid\": \"{{productPid_9M}}\"\n        }\n    },\n    \"query\": \"mutation ($input: CreateTSAccountInput) {\\n  create_ts_account(input: $input) {\\n    pid\\n    amount\\n    rewardAmount\\n    status\\n    createdAt\\n    paymentMethod\\n    account {\\n      pid\\n      memo\\n      product {\\n        pid\\n        name\\n        matureInterestRate {\\n          duration\\n          durationKey\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS ts_transaction (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Set TS Payment Info",
															"var jsonData = pm.response.json();",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount);",
															"",
															"var bankMemo = jsonData.data.ts_transaction.account.memo;",
															"pm.collectionVariables.set('bankMemo', bankMemo);",
															"console.log('bankMemo', bankMemo);",
															"",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the ts_transaction object",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"    let tsTransaction = response.data.ts_transaction;",
															"",
															"    // Validate ts_transaction properties",
															"    pm.expect(tsTransaction).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsTransaction).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsTransaction).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"paymentConfirmed\").that.is.null;",
															"    pm.expect(tsTransaction).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"",
															"    // Validate the account object inside the ts_transaction",
															"    pm.expect(tsTransaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsTransaction.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    //pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.equals(\"Sinh lời 1 tháng\");",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{tsAccountPid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    amount\\n    rewardAmount\\n    createdAt\\n    paymentConfirmed\\n    status\\n    account {\\n      pid\\n      memo\\n      code\\n      product {\\n        name\\n        pid\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger (TS)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 1000000;",
															"const Amount = pm.collectionVariables.get('amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bankMemo')",
															"",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "portfolioSavingsV2 (verify TS balance)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.collectionVariables.set('fsTotalBalance', jsonData.data.portfolioSavingsV2.savings.totalBalance);",
															"pm.collectionVariables.set('tsTotalBalance', jsonData.data.portfolioSavingsV2.termSavings.totalBalance);",
															"pm.collectionVariables.set('gsTotalBalance', jsonData.data.portfolioSavingsV2.groupSavings.totalBalance);",
															"",
															"var fsTotalBalance = pm.collectionVariables.get('fsTotalBalance');",
															"var tsTotalBalance = pm.collectionVariables.get('tsTotalBalance');",
															"var gsTotalBalance = pm.collectionVariables.get('gsTotalBalance');",
															"",
															"console.log('fsTotalBalance', fsTotalBalance);",
															"console.log('tsTotalBalance', tsTotalBalance);",
															"console.log('gsTotalBalance', gsTotalBalance);",
															"",
															"",
															"pm.test(\"✅ Validate Portfolio Savings V2 API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure response contains 'data' and 'portfolioSavingsV2'",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"portfolioSavingsV2\");",
															"",
															"    let portfolioSavingsV2 = response.data.portfolioSavingsV2;",
															"",
															"    // Ensure 'portfolioSavingsV2' contains required sections",
															"    let requiredSections = [\"savings\", \"termSavings\", \"groupSavings\"];",
															"    requiredSections.forEach(section => {",
															"        pm.expect(portfolioSavingsV2).to.have.property(section);",
															"    });",
															"",
															"    // Validate each savings section",
															"    requiredSections.forEach(section => {",
															"        let savingsGroup = portfolioSavingsV2[section];",
															"",
															"        // Check for required properties",
															"        pm.expect(savingsGroup).to.have.property(\"totalBalance\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"interestAmount\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"        // Validate values are non-negative",
															"        pm.expect(savingsGroup.totalBalance).to.be.at.least(0);",
															"        pm.expect(savingsGroup.interestAmount).to.be.at.least(0);",
															"    });",
															"",
															"    // Validate __typename at the top level",
															"    pm.expect(portfolioSavingsV2).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"    console.log(\"✅ Portfolio Savings V2 API response is valid!\");",
															"});",
															"",
															"",
															"pm.test(\"✅ TS totalBalance is >= 500,000,000\", function () {",
															"    const balance = pm.response.json().data.portfolioSavingsV2.termSavings.totalBalance;",
															"    pm.expect(balance).to.be.at.least(500000000);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolioSavingsV2(input: {}) {\\n    savings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    termSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    groupSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS deposit from bank transfer (1B)",
									"item": [
										{
											"name": "TS CreateTSAccountInput (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositSavingAmount', 1000000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var tsAccountPid = jsonData.data.create_ts_account.pid;",
															"pm.collectionVariables.set('tsAccountPid', tsAccountPid);",
															"console.log('tsAccountPid', tsAccountPid);",
															"",
															"var tsAmount = jsonData.data.create_ts_account.amount;",
															"pm.collectionVariables.set('tsAmount', tsAmount);",
															"console.log('tsAmount', tsAmount);",
															"",
															"var status = jsonData.data.create_ts_account.status;",
															"pm.collectionVariables.set('status', status);",
															"console.log('status', status);",
															"",
															"var paymentMethod = jsonData.data.create_ts_account.paymentMethod;",
															"pm.collectionVariables.set('paymentMethod', paymentMethod);",
															"console.log('paymentMethod', paymentMethod);",
															"",
															"var memo = jsonData.data.create_ts_account.account.memo;",
															"pm.collectionVariables.set('memo', memo);",
															"console.log('memo', memo);",
															"",
															"var account_pid = jsonData.data.create_ts_account.account.pid;",
															"pm.collectionVariables.set('account_pid', account_pid);",
															"console.log('account_pid', account_pid);",
															"",
															"",
															"pm.test(\"✅ Validate Create TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the create_ts_account object",
															"    pm.expect(response.data).to.have.property(\"create_ts_account\").that.is.an(\"object\");",
															"    let tsAccount = response.data.create_ts_account;",
															"",
															"    // Validate ts_account properties",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsAccount).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"    pm.expect(tsAccount).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"paymentMethod\").that.is.a(\"string\").and.equals(\"bank_transfer\");",
															"",
															"    // Validate the account object inside the ts_account",
															"    pm.expect(tsAccount).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsAccount.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the matureInterestRate object inside the product",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"    let interestRate = product.matureInterestRate;",
															"",
															"    pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Create TS Account Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{depositSavingAmount}},\n            \"paymentMethod\": \"bank_transfer\",\n            \"platform\": \"PostmanTest\",\n            \"productPid\": \"{{productPid_6M}}\",\n            \"rewardAmount\": 0,\n            \"settlementType\": \"term_savings\",\n            \"settlementProductPid\": \"{{productPid_6M}}\"\n        }\n    },\n    \"query\": \"mutation ($input: CreateTSAccountInput) {\\n  create_ts_account(input: $input) {\\n    pid\\n    amount\\n    rewardAmount\\n    status\\n    createdAt\\n    paymentMethod\\n    account {\\n      pid\\n      memo\\n      product {\\n        pid\\n        name\\n        matureInterestRate {\\n          duration\\n          durationKey\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS ts_transaction (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Set TS Payment Info",
															"var jsonData = pm.response.json();",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount);",
															"",
															"var bankMemo = jsonData.data.ts_transaction.account.memo;",
															"pm.collectionVariables.set('bankMemo', bankMemo);",
															"console.log('bankMemo', bankMemo);",
															"",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the ts_transaction object",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"    let tsTransaction = response.data.ts_transaction;",
															"",
															"    // Validate ts_transaction properties",
															"    pm.expect(tsTransaction).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsTransaction).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsTransaction).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"paymentConfirmed\").that.is.null;",
															"    pm.expect(tsTransaction).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"",
															"    // Validate the account object inside the ts_transaction",
															"    pm.expect(tsTransaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsTransaction.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    //pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.equals(\"Sinh lời 1 tháng\");",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{tsAccountPid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    amount\\n    rewardAmount\\n    createdAt\\n    paymentConfirmed\\n    status\\n    account {\\n      pid\\n      memo\\n      code\\n      product {\\n        name\\n        pid\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger (TS)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 1000000;",
															"const Amount = pm.collectionVariables.get('amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bankMemo')",
															"",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "portfolioSavingsV2 (verify TS balance)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.collectionVariables.set('fsTotalBalance', jsonData.data.portfolioSavingsV2.savings.totalBalance);",
															"pm.collectionVariables.set('tsTotalBalance', jsonData.data.portfolioSavingsV2.termSavings.totalBalance);",
															"pm.collectionVariables.set('gsTotalBalance', jsonData.data.portfolioSavingsV2.groupSavings.totalBalance);",
															"",
															"var fsTotalBalance = pm.collectionVariables.get('fsTotalBalance');",
															"var tsTotalBalance = pm.collectionVariables.get('tsTotalBalance');",
															"var gsTotalBalance = pm.collectionVariables.get('gsTotalBalance');",
															"",
															"console.log('fsTotalBalance', fsTotalBalance);",
															"console.log('tsTotalBalance', tsTotalBalance);",
															"console.log('gsTotalBalance', gsTotalBalance);",
															"",
															"",
															"pm.test(\"✅ Validate Portfolio Savings V2 API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure response contains 'data' and 'portfolioSavingsV2'",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"portfolioSavingsV2\");",
															"",
															"    let portfolioSavingsV2 = response.data.portfolioSavingsV2;",
															"",
															"    // Ensure 'portfolioSavingsV2' contains required sections",
															"    let requiredSections = [\"savings\", \"termSavings\", \"groupSavings\"];",
															"    requiredSections.forEach(section => {",
															"        pm.expect(portfolioSavingsV2).to.have.property(section);",
															"    });",
															"",
															"    // Validate each savings section",
															"    requiredSections.forEach(section => {",
															"        let savingsGroup = portfolioSavingsV2[section];",
															"",
															"        // Check for required properties",
															"        pm.expect(savingsGroup).to.have.property(\"totalBalance\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"interestAmount\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"        // Validate values are non-negative",
															"        pm.expect(savingsGroup.totalBalance).to.be.at.least(0);",
															"        pm.expect(savingsGroup.interestAmount).to.be.at.least(0);",
															"    });",
															"",
															"    // Validate __typename at the top level",
															"    pm.expect(portfolioSavingsV2).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"    console.log(\"✅ Portfolio Savings V2 API response is valid!\");",
															"});",
															"",
															"",
															"pm.test(\"✅ TS totalBalance is >= 1,500,000,000\", function () {",
															"    const balance = pm.response.json().data.portfolioSavingsV2.termSavings.totalBalance;",
															"    pm.expect(balance).to.be.at.least(1500000000);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolioSavingsV2(input: {}) {\\n    savings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    termSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    groupSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS deposit from bank transfer (500K)",
									"item": [
										{
											"name": "TS CreateTSAccountInput (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositSavingAmount', 500000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var tsAccountPid = jsonData.data.create_ts_account.pid;",
															"pm.collectionVariables.set('tsAccountPid', tsAccountPid);",
															"console.log('tsAccountPid', tsAccountPid);",
															"",
															"var tsAmount = jsonData.data.create_ts_account.amount;",
															"pm.collectionVariables.set('tsAmount', tsAmount);",
															"console.log('tsAmount', tsAmount);",
															"",
															"var status = jsonData.data.create_ts_account.status;",
															"pm.collectionVariables.set('status', status);",
															"console.log('status', status);",
															"",
															"var paymentMethod = jsonData.data.create_ts_account.paymentMethod;",
															"pm.collectionVariables.set('paymentMethod', paymentMethod);",
															"console.log('paymentMethod', paymentMethod);",
															"",
															"var memo = jsonData.data.create_ts_account.account.memo;",
															"pm.collectionVariables.set('memo', memo);",
															"console.log('memo', memo);",
															"",
															"var account_pid = jsonData.data.create_ts_account.account.pid;",
															"pm.collectionVariables.set('account_pid', account_pid);",
															"console.log('account_pid', account_pid);",
															"",
															"",
															"pm.test(\"✅ Validate Create TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the create_ts_account object",
															"    pm.expect(response.data).to.have.property(\"create_ts_account\").that.is.an(\"object\");",
															"    let tsAccount = response.data.create_ts_account;",
															"",
															"    // Validate ts_account properties",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsAccount).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"    pm.expect(tsAccount).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsAccount).to.have.property(\"paymentMethod\").that.is.a(\"string\").and.equals(\"bank_transfer\");",
															"",
															"    // Validate the account object inside the ts_account",
															"    pm.expect(tsAccount).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsAccount.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the matureInterestRate object inside the product",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"    let interestRate = product.matureInterestRate;",
															"",
															"    pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Create TS Account Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{depositSavingAmount}},\n            \"paymentMethod\": \"bank_transfer\",\n            \"platform\": \"PostmanTest\",\n            \"productPid\": \"{{productPid_2M}}\",\n            \"rewardAmount\": 0,\n            \"settlementType\": \"term_savings\",\n            \"settlementProductPid\": \"{{productPid_2M}}\"\n        }\n    },\n    \"query\": \"mutation ($input: CreateTSAccountInput) {\\n  create_ts_account(input: $input) {\\n    pid\\n    amount\\n    rewardAmount\\n    status\\n    createdAt\\n    paymentMethod\\n    account {\\n      pid\\n      memo\\n      product {\\n        pid\\n        name\\n        matureInterestRate {\\n          duration\\n          durationKey\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS ts_transaction (bank_transfer)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Set TS Payment Info",
															"var jsonData = pm.response.json();",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount);",
															"",
															"var bankMemo = jsonData.data.ts_transaction.account.memo;",
															"pm.collectionVariables.set('bankMemo', bankMemo);",
															"console.log('bankMemo', bankMemo);",
															"",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the ts_transaction object",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"    let tsTransaction = response.data.ts_transaction;",
															"",
															"    // Validate ts_transaction properties",
															"    pm.expect(tsTransaction).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsTransaction).to.have.property(\"rewardAmount\").that.is.a(\"number\").and.equals(0);",
															"    pm.expect(tsTransaction).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(tsTransaction).to.have.property(\"paymentConfirmed\").that.is.null;",
															"    pm.expect(tsTransaction).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"",
															"    // Validate the account object inside the ts_transaction",
															"    pm.expect(tsTransaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = tsTransaction.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(account).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the product object inside the account",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"",
															"    //pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.equals(\"Sinh lời 1 tháng\");",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"    // Validate the extensions object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{tsAccountPid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    amount\\n    rewardAmount\\n    createdAt\\n    paymentConfirmed\\n    status\\n    account {\\n      pid\\n      memo\\n      code\\n      product {\\n        name\\n        pid\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger (TS)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 1000000;",
															"const Amount = pm.collectionVariables.get('amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bankMemo')",
															"",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "portfolioSavingsV2 (verify TS balance)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.collectionVariables.set('fsTotalBalance', jsonData.data.portfolioSavingsV2.savings.totalBalance);",
															"pm.collectionVariables.set('tsTotalBalance', jsonData.data.portfolioSavingsV2.termSavings.totalBalance);",
															"pm.collectionVariables.set('gsTotalBalance', jsonData.data.portfolioSavingsV2.groupSavings.totalBalance);",
															"",
															"var fsTotalBalance = pm.collectionVariables.get('fsTotalBalance');",
															"var tsTotalBalance = pm.collectionVariables.get('tsTotalBalance');",
															"var gsTotalBalance = pm.collectionVariables.get('gsTotalBalance');",
															"",
															"console.log('fsTotalBalance', fsTotalBalance);",
															"console.log('tsTotalBalance', tsTotalBalance);",
															"console.log('gsTotalBalance', gsTotalBalance);",
															"",
															"",
															"pm.test(\"✅ Validate Portfolio Savings V2 API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure response contains 'data' and 'portfolioSavingsV2'",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"portfolioSavingsV2\");",
															"",
															"    let portfolioSavingsV2 = response.data.portfolioSavingsV2;",
															"",
															"    // Ensure 'portfolioSavingsV2' contains required sections",
															"    let requiredSections = [\"savings\", \"termSavings\", \"groupSavings\"];",
															"    requiredSections.forEach(section => {",
															"        pm.expect(portfolioSavingsV2).to.have.property(section);",
															"    });",
															"",
															"    // Validate each savings section",
															"    requiredSections.forEach(section => {",
															"        let savingsGroup = portfolioSavingsV2[section];",
															"",
															"        // Check for required properties",
															"        pm.expect(savingsGroup).to.have.property(\"totalBalance\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"interestAmount\").that.is.a(\"number\");",
															"        pm.expect(savingsGroup).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"        // Validate values are non-negative",
															"        pm.expect(savingsGroup.totalBalance).to.be.at.least(0);",
															"        pm.expect(savingsGroup.interestAmount).to.be.at.least(0);",
															"    });",
															"",
															"    // Validate __typename at the top level",
															"    pm.expect(portfolioSavingsV2).to.have.property(\"__typename\").that.is.a(\"string\");",
															"",
															"    console.log(\"✅ Portfolio Savings V2 API response is valid!\");",
															"});",
															"",
															"",
															"pm.test(\"✅ TS totalBalance is >= 1,500,000,000\", function () {",
															"    const balance = pm.response.json().data.portfolioSavingsV2.termSavings.totalBalance;",
															"    pm.expect(balance).to.be.at.least(1500000000);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {},\n    \"query\": \"{\\n  portfolioSavingsV2(input: {}) {\\n    savings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    termSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    groupSavings {\\n      totalBalance\\n      interestAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS withdraw to FS",
									"item": [
										{
											"name": "get_ts_accounts_overview [list]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"// Store TS account list, error handling and better logging ",
															"try {",
															"    // Parse response and validate structure",
															"    const jsonData = pm.response.json();",
															"    ",
															"    if (!jsonData || !jsonData.data || !jsonData.data.ts_accounts || !jsonData.data.ts_accounts.docs) {",
															"        throw new Error(\"Invalid response structure - missing required fields\");",
															"    }",
															"",
															"    const accounts = jsonData.data.ts_accounts.docs;",
															"    ",
															"    // Validate we have at least 3 accounts as expected",
															"    if (accounts.length < 3) {",
															"        throw new Error(`Expected at least 3 accounts, found ${accounts.length}`);",
															"    }",
															"",
															"    // Process and log each PID with more detailed information",
															"    accounts.forEach((account, index) => {",
															"        if (!account.pid) {",
															"            console.error(`Account at index ${index} is missing PID`);",
															"            return;",
															"        }",
															"",
															"        const varName = `pid_${index}`;",
															"        const pidValue = account.pid;",
															"        ",
															"        pm.collectionVariables.set(varName, pidValue);",
															"        console.log(`Stored ${varName}: ${pidValue} (Account ${index})`);",
															"        ",
															"        // Add to test results for visibility in Test Results tab",
															"        pm.test(`PID ${index} stored successfully`, function() {",
															"            pm.expect(pidValue).to.be.a('string').and.to.not.be.empty;",
															"        });",
															"    });",
															"",
															"    // Additional validation for the specific PIDs you need",
															"    const requiredPids = [0, 1, 2];",
															"    requiredPids.forEach(index => {",
															"        if (!accounts[index] || !accounts[index].pid) {",
															"            throw new Error(`Account at index ${index} is missing or has no PID`);",
															"        }",
															"    });",
															"",
															"    console.log(\"All PIDs processed successfully\");",
															"} catch (error) {",
															"    console.error(\"Error processing response:\", error.message);",
															"    // Fail the test explicitly if something goes wrong",
															"    pm.test(\"Script execution failed\", function() {",
															"        pm.expect.fail(error.message);",
															"    });",
															"}",
															"",
															"",
															"// Log the total number of TS accounts",
															"pm.test(\"Log total number of TS accounts\", function () {",
															"    console.log(\"Total number of TS accounts: \" + jsonData.data.ts_accounts.total);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Accounts List Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_accounts' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_accounts\").that.is.an(\"object\");",
															"",
															"    let tsAccounts = response.data.ts_accounts;",
															"",
															"    // Validate pagination properties",
															"    pm.expect(tsAccounts).to.have.property(\"total\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"limit\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"page\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"pages\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate 'docs' array",
															"    pm.expect(tsAccounts).to.have.property(\"docs\").that.is.an(\"array\").with.length.above(0);",
															"",
															"    tsAccounts.docs.forEach((account, index) => {",
															"        pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"        pm.expect(account).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(account).to.have.property(\"approvedDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"maturityDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"startDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"managementFeeRate\").that.is.a(\"number\");",
															"",
															"        // Validate product details",
															"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"        let product = account.product;",
															"",
															"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"        pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"        let interestRate = product.matureInterestRate;",
															"        pm.expect(interestRate).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    });",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Accounts List validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_accounts_overview\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 20,\n            \"status\": \"active\"\n        }\n    },\n    \"query\": \"query get_ts_accounts_overview($input: GetTSAccountsInput) {\\n  ts_accounts(input: $input) {\\n    total\\n    limit\\n    page\\n    pages\\n    docs {\\n      pid\\n      balance\\n      approvedDate\\n      maturityDate\\n      managementFeeRate\\n      startDate\\n      product {\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get_ts_account [2]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var pid = jsonData.data.ts_account.pid;",
															"console.log('pid : ' + pid);",
															"",
															"var productId = jsonData.data.ts_account.productId;",
															"console.log('productId : ' + productId);",
															"",
															"var balance = jsonData.data.ts_account.balance;",
															"console.log('balance : ' + balance);",
															"",
															"pm.collectionVariables.set('availableBalance', pm.response.json().data.ts_account.availableBalance);",
															"var availableBalance = jsonData.data.ts_account.availableBalance;",
															"console.log('availableBalance : ' + availableBalance);",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Detail Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.ts_account;",
															"",
															"    // Validate core account details",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(tsAccount).to.have.property(\"productId\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"depositAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"availableBalance\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"isFreeze\").that.is.a(\"boolean\");",
															"    pm.expect(tsAccount).to.have.property(\"platform\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"startDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"approvedDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"maturityDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"withdrawnAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"",
															"    // Validate product details",
															"    pm.expect(tsAccount).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = tsAccount.product;",
															"",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\");",
															"    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"    pm.expect(product).to.have.property(\"minAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(product).to.have.property(\"maxAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(product).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"    ",
															"    // Validate mature interest rate",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"    let matureRate = product.matureInterestRate;",
															"    pm.expect(matureRate).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(matureRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate premature interest rates",
															"    pm.expect(product).to.have.property(\"prematureInterestRates\").that.is.an(\"array\");",
															"    product.prematureInterestRates.forEach(rate => {",
															"        pm.expect(rate).to.have.property(\"duration\").that.is.a(\"number\");",
															"        pm.expect(rate).to.have.property(\"interestRate\").that.is.a(\"number\");",
															"    });",
															"",
															"    // Validate interest rates",
															"    pm.expect(product).to.have.property(\"interestRates\").that.is.an(\"array\");",
															"    product.interestRates.forEach(rate => {",
															"        pm.expect(rate).to.have.property(\"duration\").that.is.a(\"number\");",
															"        pm.expect(rate).to.have.property(\"interestRate\").that.is.a(\"number\");",
															"    });",
															"",
															"    // Validate preview settlement",
															"    pm.expect(tsAccount).to.have.property(\"previewSettlement\").that.is.an(\"object\");",
															"    let settlement = tsAccount.previewSettlement;",
															"    pm.expect(settlement).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"netInterestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account Detail validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_2}}\"\n        }\n    },\n    \"query\": \"query get_ts_account($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    pid\\n    productId\\n    code\\n    depositAmount\\n    balance\\n    availableBalance\\n    source\\n    isFreeze\\n    platform\\n    startDate\\n    approvedDate\\n    maturityDate\\n    managementFeeRate\\n    currentInterestRatePid\\n    settlementProductPid\\n    settlementType\\n    withdrawnAmount\\n    product {\\n      pid\\n      name\\n      minAmount\\n      maxAmount\\n      managementFeeRate\\n      duration\\n      matureInterestRate {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      prematureInterestRates {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      interestRates {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      __typename\\n    }\\n    previewSettlement {\\n      interestAmount\\n      taxAmount\\n      feeAmount\\n      netInterestAmount\\n      __typename\\n    }\\n    settlementProduct {\\n      pid\\n      name\\n      matureInterestRate {\\n        interestRate\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS preview_ts_withdrawal",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 50000000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"if(jsonData.data.preview_ts_withdrawal){",
															"    var totalAmount = jsonData.data.preview_ts_withdrawal.totalAmount;",
															"    pm.collectionVariables.set('totalAmount', totalAmount);",
															"    console.log('totalAmount', totalAmount)",
															"",
															"    var amount = jsonData.data.preview_ts_withdrawal.amount;",
															"    pm.collectionVariables.set('amount', amount);",
															"    console.log('amount', amount)",
															"",
															"    var interestRate = jsonData.data.preview_ts_withdrawal.interestRate;",
															"    pm.collectionVariables.set('interestRate', interestRate);",
															"    console.log('interestRate', interestRate)",
															"}",
															"",
															"",
															"pm.test(\"✅ Validate TS Withdrawal Preview Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.preview_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"preview_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let withdrawal = response.data.preview_ts_withdrawal;",
															"",
															"    // Validate withdrawal details",
															"    pm.expect(withdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(withdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.equal(withdrawal.totalAmount);",
															"    pm.expect(withdrawal).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawal).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(withdrawal).to.have.property(\"notes\").that.is.a(\"string\").and.to.include(\"Withdraw from\");",
															"    pm.expect(withdrawal).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawal).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.at.least(0);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Withdrawal Preview validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_2}}\",\n            \"withdrawalAmount\": {{withdrawalAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS create_ts_withdrawal (convert to FS 50M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your tsAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_withdrawal.amount).to.eql(pm.collectionVariables.get('withdrawalAmount'));",
															"});",
															"",
															"pm.test(\"✅ Validate TS Withdrawal Creation Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.create_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let withdrawal = response.data.create_ts_withdrawal;",
															"",
															"    // Validate withdrawal details",
															"    pm.expect(withdrawal).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf.at.least(10);",
															"    pm.expect(withdrawal).to.have.property(\"code\").that.is.a(\"string\").and.to.have.lengthOf.at.least(5);",
															"    pm.expect(withdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"success\");",
															"    pm.expect(withdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(withdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.equal(withdrawal.amount);",
															"",
															"    // Validate account details",
															"    pm.expect(withdrawal).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = withdrawal.account;",
															"",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf.at.least(10);",
															"    pm.expect(account).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Withdrawal Creation validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"create_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_2}}\",\n            \"platform\": \"PostmanTest\",\n            \"receiveMethod\": \"flexible_savings\",\n            \"withdrawalAmount\": {{amount}},\n            \"withdrawalReason\": \"QA_test\",\n            \"interestRate\": {{interestRate}},\n            \"totalAmount\": {{totalAmount}},\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation create_ts_withdrawal($input: CreateTSWithdrawalInput) {\\n  create_ts_withdrawal(input: $input) {\\n    pid\\n    code\\n    status\\n    amount\\n    createdAt\\n    totalAmount\\n    account {\\n      pid\\n      code\\n      balance\\n      availableBalance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "TS Withdraw",
							"item": [
								{
									"name": "TS Accounts",
									"item": [
										{
											"name": "get_ts_accounts_overview [list]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"// Store TS account list, error handling and better logging ",
															"try {",
															"    // Parse response and validate structure",
															"    const jsonData = pm.response.json();",
															"    ",
															"    if (!jsonData || !jsonData.data || !jsonData.data.ts_accounts || !jsonData.data.ts_accounts.docs) {",
															"        throw new Error(\"Invalid response structure - missing required fields\");",
															"    }",
															"",
															"    const accounts = jsonData.data.ts_accounts.docs;",
															"    ",
															"    // Validate we have at least 3 accounts as expected",
															"    if (accounts.length < 3) {",
															"        throw new Error(`Expected at least 3 accounts, found ${accounts.length}`);",
															"    }",
															"",
															"    // Process and log each PID with more detailed information",
															"    accounts.forEach((account, index) => {",
															"        if (!account.pid) {",
															"            console.error(`Account at index ${index} is missing PID`);",
															"            return;",
															"        }",
															"",
															"        const varName = `pid_${index}`;",
															"        const pidValue = account.pid;",
															"        ",
															"        pm.collectionVariables.set(varName, pidValue);",
															"        console.log(`Stored ${varName}: ${pidValue} (Account ${index})`);",
															"        ",
															"        // Add to test results for visibility in Test Results tab",
															"        pm.test(`PID ${index} stored successfully`, function() {",
															"            pm.expect(pidValue).to.be.a('string').and.to.not.be.empty;",
															"        });",
															"    });",
															"",
															"    // Additional validation for the specific PIDs you need",
															"    const requiredPids = [0, 1, 2];",
															"    requiredPids.forEach(index => {",
															"        if (!accounts[index] || !accounts[index].pid) {",
															"            throw new Error(`Account at index ${index} is missing or has no PID`);",
															"        }",
															"    });",
															"",
															"    console.log(\"All PIDs processed successfully\");",
															"} catch (error) {",
															"    console.error(\"Error processing response:\", error.message);",
															"    // Fail the test explicitly if something goes wrong",
															"    pm.test(\"Script execution failed\", function() {",
															"        pm.expect.fail(error.message);",
															"    });",
															"}",
															"",
															"",
															"// Log the total number of TS accounts",
															"pm.test(\"Log total number of TS accounts\", function () {",
															"    console.log(\"Total number of TS accounts: \" + jsonData.data.ts_accounts.total);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Accounts List Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_accounts' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_accounts\").that.is.an(\"object\");",
															"",
															"    let tsAccounts = response.data.ts_accounts;",
															"",
															"    // Validate pagination properties",
															"    pm.expect(tsAccounts).to.have.property(\"total\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"limit\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"page\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"pages\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate 'docs' array",
															"    pm.expect(tsAccounts).to.have.property(\"docs\").that.is.an(\"array\").with.length.above(0);",
															"",
															"    tsAccounts.docs.forEach((account, index) => {",
															"        pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"        pm.expect(account).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(account).to.have.property(\"approvedDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"maturityDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"startDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"managementFeeRate\").that.is.a(\"number\");",
															"",
															"        // Validate product details",
															"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"        let product = account.product;",
															"",
															"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"        pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"        let interestRate = product.matureInterestRate;",
															"        pm.expect(interestRate).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    });",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Accounts List validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_accounts_overview\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 20,\n            \"status\": \"active\"\n        }\n    },\n    \"query\": \"query get_ts_accounts_overview($input: GetTSAccountsInput) {\\n  ts_accounts(input: $input) {\\n    total\\n    limit\\n    page\\n    pages\\n    docs {\\n      pid\\n      balance\\n      approvedDate\\n      maturityDate\\n      managementFeeRate\\n      startDate\\n      product {\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS get_ts_transactions (limit 100)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Transactions Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate the ts_transactions object",
															"    pm.expect(response.data).to.have.property(\"ts_transactions\").that.is.an(\"object\");",
															"    let tsTransactions = response.data.ts_transactions;",
															"",
															"",
															"    // Validate each \"docs\" item (TS Transaction)",
															"    tsTransactions.docs.forEach(transaction => {",
															"        pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.not.empty;",
															"",
															"        // Validate \"account\" object inside \"docs\"",
															"        pm.expect(transaction).to.have.property(\"account\").that.is.an(\"object\");",
															"        let account = transaction.account;",
															"",
															"        pm.expect(account).to.have.property(\"memo\").that.is.a(\"string\").and.not.empty;",
															"        ",
															"        // Validate \"product\" object inside \"account\"",
															"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"        let product = account.product;",
															"",
															"        pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"",
															"        ",
															"        product.interestRates.forEach(interestRate => {",
															"            pm.expect(interestRate).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"        });",
															"    });",
															"",
															"",
															"    console.log(\"✅ TS Transactions Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_transactions\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 100\n        }\n    },\n    \"query\": \"query get_ts_transactions($input: TermSavingTransactionsInput) {\\n  ts_transactions(input: $input) {\\n    total\\n    docs {\\n      pid\\n      createdAt\\n      description\\n      status\\n      amount\\n      totalAmount\\n      type\\n      totalAmount\\n      interestRate\\n      rewardAmount\\n      account {\\n        memo\\n        product {\\n          name\\n          pid\\n          interestRates {\\n            pid\\n            duration\\n            interestRate\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      settlementRef {\\n        refId\\n        refCode\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "TS ts_transaction (pending_order)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate Pending Orders Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.pending_order' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"pending_order\").that.is.an(\"object\");",
															"",
															"    let pendingOrder = response.data.pending_order;",
															"",
															"    // Validate total count",
															"    pm.expect(pendingOrder).to.have.property(\"total\").that.is.a(\"number\");",
															"    pm.expect(pendingOrder).to.have.property(\"docs\").that.is.an(\"array\");",
															"    pm.expect(pendingOrder.docs.length).to.equal(pendingOrder.total);",
															"",
															"    pendingOrder.docs.forEach((order, index) => {",
															"        console.log(`🔍 Validating order ${index + 1}...`);",
															"",
															"        // Validate order details",
															"        pm.expect(order).to.have.property(\"id\").that.is.a(\"string\").and.to.have.lengthOf.at.least(10);",
															"        pm.expect(order).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(order).to.have.property(\"confirmed_payment\").that.is.null;",
															"        pm.expect(order).to.have.property(\"reward_amount\").that.is.a(\"number\");",
															"        pm.expect(order).to.have.property(\"description\").that.is.a(\"string\").and.to.equal(\"savings\");",
															"        pm.expect(order).to.have.property(\"buy_request\").that.is.null;",
															"",
															"        // Validate investment_package",
															"        pm.expect(order).to.have.property(\"investment_package\").that.is.an(\"object\");",
															"        let package = order.investment_package;",
															"",
															"        pm.expect(package).to.have.property(\"id\").that.is.a(\"string\");",
															"        pm.expect(package).to.have.property(\"type\").that.is.a(\"string\").and.to.equal(\"savings\");",
															"        pm.expect(package).to.have.property(\"num_of_shares\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"        // Validate offer",
															"        pm.expect(package).to.have.property(\"offer\").that.is.an(\"object\");",
															"        let offer = package.offer;",
															"",
															"        pm.expect(offer).to.have.property(\"id\").that.is.a(\"string\");",
															"",
															"        // Validate property",
															"        pm.expect(offer).to.have.property(\"property\").that.is.an(\"object\");",
															"        let property = offer.property;",
															"",
															"        pm.expect(property).to.have.property(\"id\").that.is.a(\"string\");",
															"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\").and.to.equal(\"Savings 4.3%\");",
															"        pm.expect(property).to.have.property(\"featured_image\").that.is.a(\"string\").and.to.match(/^https:\\/\\/.*\\.(jpeg|jpg|png)$/);",
															"",
															"        // Validate developer",
															"        pm.expect(property).to.have.property(\"developer\").that.is.an(\"object\");",
															"        let developer = property.developer;",
															"",
															"        pm.expect(developer).to.have.property(\"name\").that.is.a(\"string\");",
															"",
															"    });",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Pending Orders validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"pending_order\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 100,\n            \"filter\": {\n                \"transaction_status\": \"WAITING_PAYMENT\"\n            }\n        }\n    },\n    \"query\": \"query pending_order($input: PendingOrdersInput) {\\n  pending_order(input: $input) {\\n    total\\n    docs {\\n      ... on BuyOrderResult {\\n        id\\n        total_amount\\n        confirmed_payment\\n        reward_amount\\n        created_at\\n        asset {\\n          id\\n          code\\n          issuer {\\n            id\\n            image\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      ... on TransactionResult {\\n        id\\n        amount\\n        confirmed_payment\\n        reward_amount\\n        created_at\\n        description\\n        buy_request {\\n          id\\n          price\\n          num_of_shares\\n          sell_request {\\n            investment_package {\\n              offer {\\n                property {\\n                  featured_image\\n                  name\\n                  __typename\\n                }\\n                __typename\\n              }\\n              __typename\\n            }\\n            __typename\\n          }\\n          __typename\\n        }\\n        investment_package {\\n          id\\n          type\\n          num_of_shares\\n          offer {\\n            id\\n            property {\\n              id\\n              featured_image\\n              name\\n              developer {\\n                name\\n                image\\n                __typename\\n              }\\n              __typename\\n            }\\n            __typename\\n          }\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS Withdraw 40K - errors",
									"item": [
										{
											"name": "get_ts_account_pending_withdraw_status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your hasPendingWithdraw is false\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_account.hasPendingWithdraw).to.eql(false);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account_pending_withdraw_status\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_0}}\"\n        }\n    },\n    \"query\": \"query get_ts_account_pending_withdraw_status($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    hasPendingWithdraw\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "preview_ts_withdrawal (40K)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 40000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"var key = jsonData.errors[0].key;",
															"console.log('key : ' +  key)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches validation_error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"validation_error\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_0}}\",\n            \"withdrawalAmount\": {{withdrawalAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS Withdraw > 50K - approved",
									"item": [
										{
											"name": "get_ts_account_pending_withdraw_status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your hasPendingWithdraw is false\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_account.hasPendingWithdraw).to.eql(false);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.ts_account;",
															"",
															"    // Validate hasPendingWithdraw",
															"    pm.expect(tsAccount).to.have.property(\"hasPendingWithdraw\").that.is.a(\"boolean\");",
															"",
															"    // Validate __typename",
															"    pm.expect(tsAccount).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSAccountResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account validated successfully.\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account_pending_withdraw_status\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_0}}\"\n        }\n    },\n    \"query\": \"query get_ts_account_pending_withdraw_status($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    hasPendingWithdraw\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "preview_ts_withdrawal (50K)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 50000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var totalAmount = jsonData.data.preview_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.preview_ts_withdrawal.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"var interestRate = jsonData.data.preview_ts_withdrawal.interestRate;",
															"pm.collectionVariables.set('interestRate', interestRate);",
															"console.log('interestRate', interestRate)",
															"",
															"",
															"pm.test(\"✅ Validate TS Preview Withdrawal Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.preview_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"preview_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let previewWithdrawal = response.data.preview_ts_withdrawal;",
															"",
															"    // Validate numerical fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.equal(previewWithdrawal.totalAmount);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.equal(0.001);",
															"",
															"    // Validate string fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"notes\").that.is.a(\"string\").and.to.include(\"Withdraw from\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSPreviewWithdrawalResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Preview Withdrawal validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_0}}\",\n            \"withdrawalAmount\": {{withdrawalAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "create_ts_withdrawal (50K)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is new\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_withdrawal.status).to.eql(\"new\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var code = jsonData.data.create_ts_withdrawal.code;",
															"pm.collectionVariables.set('referenceId', 'TS_' + code);",
															"console.log('referenceId : ' + 'TS_' + code)",
															"",
															"var create_ts_withdrawal_pid = jsonData.data.create_ts_withdrawal.pid;",
															"pm.collectionVariables.set('create_ts_withdrawal_pid', create_ts_withdrawal_pid);",
															"console.log('create_ts_withdrawal_pid', create_ts_withdrawal_pid)",
															"",
															"var totalAmount = jsonData.data.create_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var balance = jsonData.data.create_ts_withdrawal.account.balance;",
															"console.log('balance', balance)",
															"",
															"var availableBalance = jsonData.data.create_ts_withdrawal.account.availableBalance;",
															"console.log('availableBalance' ,  availableBalance)",
															"",
															"",
															"pm.test(\"✅ Validate TS Withdrawal Creation Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.create_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let withdrawal = response.data.create_ts_withdrawal;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(withdrawal).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(withdrawal).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(withdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(withdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.equal(withdrawal.amount);",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(withdrawal).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = withdrawal.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Withdrawal Creation validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"create_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_0}}\",\n            \"platform\": \"PostmanTest\",\n            \"receiveMethod\": \"bank_transfer\",\n            \"withdrawalAmount\": {{withdrawalAmount}},\n            \"withdrawalReason\": \"QA_test\",\n            \"interestRate\": {{interestRate}},\n            \"totalAmount\": {{totalAmount}},\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation create_ts_withdrawal($input: CreateTSWithdrawalInput) {\\n  create_ts_withdrawal(input: $input) {\\n    pid\\n    code\\n    status\\n    amount\\n    createdAt\\n    totalAmount\\n    account {\\n      pid\\n      code\\n      balance\\n      availableBalance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "ts_transaction (50K)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var accountId = jsonData.data.ts_transaction.accountId;",
															"pm.collectionVariables.set('accountId', accountId);",
															"console.log('accountId', accountId)",
															"",
															"var totalAmount = jsonData.data.ts_transaction.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_transaction' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.ts_transaction;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.equal(\"income\");",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\").and.to.equal(\"withdrawal\");",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(transaction).to.have.property(\"receiveMethod\").that.is.a(\"string\").and.to.equal(\"bank_transfer\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.equal(\"auto\");",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(transaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = transaction.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(account).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"active\");",
															"",
															"    // Validate 'product' properties",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{create_ts_withdrawal_pid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    accountId\\n    uid\\n    type\\n    description\\n    status\\n    totalAmount\\n    amount\\n    originalAmount\\n    rewardAmount\\n    paymentMethod\\n    receiveMethod\\n    transferMethod\\n    withdrawalReason\\n    interestAmount\\n    interestRate\\n    taxAmount\\n    feeAmount\\n    approvedDate\\n    source\\n    platform\\n    notes\\n    createdBy\\n    createdAt\\n    updatedBy\\n    updatedAt\\n    account {\\n      pid\\n      code\\n      memo\\n      status\\n      balance\\n      product {\\n        pid\\n        code\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    settlementRef {\\n      refId\\n      refCode\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS Withdraw 100M - approved",
									"item": [
										{
											"name": "get_ts_account_pending_withdraw_status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your hasPendingWithdraw is false\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_account.hasPendingWithdraw).to.eql(false);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.ts_account;",
															"",
															"    // Validate hasPendingWithdraw",
															"    pm.expect(tsAccount).to.have.property(\"hasPendingWithdraw\").that.is.a(\"boolean\");",
															"",
															"    // Validate __typename",
															"    pm.expect(tsAccount).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSAccountResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account validated successfully.\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account_pending_withdraw_status\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_1}}\"\n        }\n    },\n    \"query\": \"query get_ts_account_pending_withdraw_status($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    hasPendingWithdraw\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "preview_ts_withdrawal (100M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 100000000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var totalAmount = jsonData.data.preview_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.preview_ts_withdrawal.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"var interestRate = jsonData.data.preview_ts_withdrawal.interestRate;",
															"pm.collectionVariables.set('interestRate', interestRate);",
															"console.log('interestRate', interestRate)",
															"",
															"",
															"pm.test(\"✅ Validate TS Preview Withdrawal Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.preview_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"preview_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let previewWithdrawal = response.data.preview_ts_withdrawal;",
															"",
															"    // Validate numerical fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.equal(previewWithdrawal.totalAmount);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.equal(0.001);",
															"",
															"    // Validate string fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"notes\").that.is.a(\"string\").and.to.include(\"Withdraw from\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSPreviewWithdrawalResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Preview Withdrawal validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_1}}\",\n            \"withdrawalAmount\": {{withdrawalAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "create_ts_withdrawal (100M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is new\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_withdrawal.status).to.eql(\"new\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var code = jsonData.data.create_ts_withdrawal.code;",
															"pm.collectionVariables.set('referenceId', 'TS_' + code);",
															"console.log('referenceId : ' + 'TS_' + code)",
															"",
															"var create_ts_withdrawal_pid = jsonData.data.create_ts_withdrawal.pid;",
															"pm.collectionVariables.set('create_ts_withdrawal_pid', create_ts_withdrawal_pid);",
															"console.log('create_ts_withdrawal_pid', create_ts_withdrawal_pid)",
															"",
															"var totalAmount = jsonData.data.create_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var balance = jsonData.data.create_ts_withdrawal.account.balance;",
															"console.log('balance', balance)",
															"",
															"var availableBalance = jsonData.data.create_ts_withdrawal.account.availableBalance;",
															"console.log('availableBalance' ,  availableBalance)",
															"",
															"",
															"pm.test(\"✅ Validate TS Withdrawal Creation Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.create_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let withdrawal = response.data.create_ts_withdrawal;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(withdrawal).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(withdrawal).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(withdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(withdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.equal(withdrawal.amount);",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(withdrawal).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = withdrawal.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Withdrawal Creation validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"create_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_1}}\",\n            \"platform\": \"ios\",\n            \"receiveMethod\": \"bank_transfer\",\n            \"withdrawalAmount\": {{withdrawalAmount}},\n            \"withdrawalReason\": \"QA_test\",\n            \"interestRate\": {{interestRate}},\n            \"totalAmount\": {{totalAmount}},\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation create_ts_withdrawal($input: CreateTSWithdrawalInput) {\\n  create_ts_withdrawal(input: $input) {\\n    pid\\n    code\\n    status\\n    amount\\n    createdAt\\n    totalAmount\\n    account {\\n      pid\\n      code\\n      balance\\n      availableBalance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "ts_transaction (100M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var accountId = jsonData.data.ts_transaction.accountId;",
															"pm.collectionVariables.set('accountId', accountId);",
															"console.log('accountId', accountId)",
															"",
															"var totalAmount = jsonData.data.ts_transaction.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_transaction' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.ts_transaction;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.equal(\"income\");",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\").and.to.equal(\"withdrawal\");",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(transaction).to.have.property(\"receiveMethod\").that.is.a(\"string\").and.to.equal(\"bank_transfer\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.equal(\"auto\");",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(transaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = transaction.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(account).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"active\");",
															"",
															"    // Validate 'product' properties",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{create_ts_withdrawal_pid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    accountId\\n    uid\\n    type\\n    description\\n    status\\n    totalAmount\\n    amount\\n    originalAmount\\n    rewardAmount\\n    paymentMethod\\n    receiveMethod\\n    transferMethod\\n    withdrawalReason\\n    interestAmount\\n    interestRate\\n    taxAmount\\n    feeAmount\\n    approvedDate\\n    source\\n    platform\\n    notes\\n    createdBy\\n    createdAt\\n    updatedBy\\n    updatedAt\\n    account {\\n      pid\\n      code\\n      memo\\n      status\\n      balance\\n      product {\\n        pid\\n        code\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    settlementRef {\\n      refId\\n      refCode\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TS Withdraw > 110M - pending (Manual Review)",
									"item": [
										{
											"name": "get_ts_account_pending_withdraw_status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your hasPendingWithdraw is false\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_account.hasPendingWithdraw).to.eql(false);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account_pending_withdraw_status\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_2}}\"\n        }\n    },\n    \"query\": \"query get_ts_account_pending_withdraw_status($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    hasPendingWithdraw\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "preview_ts_withdrawal (110M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawalAmount', 110000000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var totalAmount = jsonData.data.preview_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.preview_ts_withdrawal.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"var interestRate = jsonData.data.preview_ts_withdrawal.interestRate;",
															"pm.collectionVariables.set('interestRate', interestRate);",
															"console.log('interestRate', interestRate)",
															"",
															"",
															"pm.test(\"✅ Validate TS Preview Withdrawal Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.preview_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"preview_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let previewWithdrawal = response.data.preview_ts_withdrawal;",
															"",
															"    // Validate numerical fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(previewWithdrawal).to.have.property(\"amount\").that.is.a(\"number\").and.to.equal(previewWithdrawal.totalAmount);",
															"    pm.expect(previewWithdrawal).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.equal(0.001);",
															"",
															"    // Validate string fields",
															"    pm.expect(previewWithdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"notes\").that.is.a(\"string\").and.to.include(\"Withdraw from\");",
															"    pm.expect(previewWithdrawal).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSPreviewWithdrawalResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Preview Withdrawal validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_2}}\",\n            \"withdrawalAmount\": {{withdrawalAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "create_ts_withdrawal (110M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is new\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.create_ts_withdrawal.status).to.eql(\"new\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var code = jsonData.data.create_ts_withdrawal.code;",
															"pm.collectionVariables.set('referenceId', 'TS_' + code);",
															"console.log('referenceId : ' + 'TS_' + code)",
															"",
															"var create_ts_withdrawal_pid = jsonData.data.create_ts_withdrawal.pid;",
															"pm.collectionVariables.set('create_ts_withdrawal_pid', create_ts_withdrawal_pid);",
															"console.log('create_ts_withdrawal_pid', create_ts_withdrawal_pid)",
															"",
															"var totalAmount = jsonData.data.create_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var balance = jsonData.data.create_ts_withdrawal.account.balance;",
															"console.log('balance', balance)",
															"",
															"var availableBalance = jsonData.data.create_ts_withdrawal.account.availableBalance;",
															"console.log('availableBalance' ,  availableBalance)",
															"",
															"",
															"pm.test(\"✅ Validate TS Withdrawal Creation Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.create_ts_withdrawal' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"create_ts_withdrawal\").that.is.an(\"object\");",
															"",
															"    let withdrawal = response.data.create_ts_withdrawal;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(withdrawal).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(withdrawal).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(withdrawal).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(withdrawal).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.equal(withdrawal.amount);",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(withdrawal).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = withdrawal.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Withdrawal Creation validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"create_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_2}}\",\n            \"platform\": \"ios\",\n            \"receiveMethod\": \"bank_transfer\",\n            \"withdrawalAmount\": {{withdrawalAmount}},\n            \"withdrawalReason\": \"QA_test\",\n            \"interestRate\": {{interestRate}},\n            \"totalAmount\": {{totalAmount}},\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation create_ts_withdrawal($input: CreateTSWithdrawalInput) {\\n  create_ts_withdrawal(input: $input) {\\n    pid\\n    code\\n    status\\n    amount\\n    createdAt\\n    totalAmount\\n    account {\\n      pid\\n      code\\n      balance\\n      availableBalance\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "ts_transaction (110M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var accountId = jsonData.data.ts_transaction.accountId;",
															"pm.collectionVariables.set('accountId', accountId);",
															"console.log('accountId', accountId)",
															"",
															"var totalAmount = jsonData.data.ts_transaction.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.ts_transaction.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"pm.test(\"✅ Validate TS Transaction Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_transaction' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.ts_transaction;",
															"",
															"    // Validate transaction properties",
															"    pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\").and.to.match(/^[A-Z0-9]{12}$/);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.equal(\"income\");",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\").and.to.equal(\"withdrawal\");",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"new\");",
															"    pm.expect(transaction).to.have.property(\"receiveMethod\").that.is.a(\"string\").and.to.equal(\"bank_transfer\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.equal(\"auto\");",
															"",
															"    // Validate 'account' properties",
															"    pm.expect(transaction).to.have.property(\"account\").that.is.an(\"object\");",
															"    let account = transaction.account;",
															"    pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(account).to.have.property(\"status\").that.is.a(\"string\").and.to.equal(\"active\");",
															"",
															"    // Validate 'product' properties",
															"    pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = account.product;",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Transaction validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"ts_transaction\",\n    \"variables\": {\n        \"pid\": \"{{create_ts_withdrawal_pid}}\"\n    },\n    \"query\": \"query ts_transaction($pid: String) {\\n  ts_transaction(input: {pid: $pid}) {\\n    pid\\n    code\\n    accountId\\n    uid\\n    type\\n    description\\n    status\\n    totalAmount\\n    amount\\n    originalAmount\\n    rewardAmount\\n    paymentMethod\\n    receiveMethod\\n    transferMethod\\n    withdrawalReason\\n    interestAmount\\n    interestRate\\n    taxAmount\\n    feeAmount\\n    approvedDate\\n    source\\n    platform\\n    notes\\n    createdBy\\n    createdAt\\n    updatedBy\\n    updatedAt\\n    account {\\n      pid\\n      code\\n      memo\\n      status\\n      balance\\n      product {\\n        pid\\n        code\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    settlementRef {\\n      refId\\n      refCode\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "TSv1 convert NFS (1M)",
									"item": [
										{
											"name": "get_ts_accounts_overview [list]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"// Store TS account list, error handling and better logging ",
															"try {",
															"    // Parse response and validate structure",
															"    const jsonData = pm.response.json();",
															"    ",
															"    if (!jsonData || !jsonData.data || !jsonData.data.ts_accounts || !jsonData.data.ts_accounts.docs) {",
															"        throw new Error(\"Invalid response structure - missing required fields\");",
															"    }",
															"",
															"    const accounts = jsonData.data.ts_accounts.docs;",
															"    ",
															"    // Validate we have at least 3 accounts as expected",
															"    if (accounts.length < 3) {",
															"        throw new Error(`Expected at least 3 accounts, found ${accounts.length}`);",
															"    }",
															"",
															"    // Process and log each PID with more detailed information",
															"    accounts.forEach((account, index) => {",
															"        if (!account.pid) {",
															"            console.error(`Account at index ${index} is missing PID`);",
															"            return;",
															"        }",
															"",
															"        const varName = `pid_${index}`;",
															"        const pidValue = account.pid;",
															"        ",
															"        pm.collectionVariables.set(varName, pidValue);",
															"        console.log(`Stored ${varName}: ${pidValue} (Account ${index})`);",
															"        ",
															"        // Add to test results for visibility in Test Results tab",
															"        pm.test(`PID ${index} stored successfully`, function() {",
															"            pm.expect(pidValue).to.be.a('string').and.to.not.be.empty;",
															"        });",
															"    });",
															"",
															"    // Additional validation for the specific PIDs you need",
															"    const requiredPids = [0, 1, 2];",
															"    requiredPids.forEach(index => {",
															"        if (!accounts[index] || !accounts[index].pid) {",
															"            throw new Error(`Account at index ${index} is missing or has no PID`);",
															"        }",
															"    });",
															"",
															"    console.log(\"All PIDs processed successfully\");",
															"} catch (error) {",
															"    console.error(\"Error processing response:\", error.message);",
															"    // Fail the test explicitly if something goes wrong",
															"    pm.test(\"Script execution failed\", function() {",
															"        pm.expect.fail(error.message);",
															"    });",
															"}",
															"",
															"",
															"// Log the total number of TS accounts",
															"pm.test(\"Log total number of TS accounts\", function () {",
															"    console.log(\"Total number of TS accounts: \" + jsonData.data.ts_accounts.total);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Accounts List Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_accounts' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_accounts\").that.is.an(\"object\");",
															"",
															"    let tsAccounts = response.data.ts_accounts;",
															"",
															"    // Validate pagination properties",
															"    pm.expect(tsAccounts).to.have.property(\"total\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"limit\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"page\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccounts).to.have.property(\"pages\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate 'docs' array",
															"    pm.expect(tsAccounts).to.have.property(\"docs\").that.is.an(\"array\").with.length.above(0);",
															"",
															"    tsAccounts.docs.forEach((account, index) => {",
															"        pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"        pm.expect(account).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(account).to.have.property(\"approvedDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"maturityDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"startDate\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"managementFeeRate\").that.is.a(\"number\");",
															"",
															"        // Validate product details",
															"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"        let product = account.product;",
															"",
															"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"        pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"",
															"        let interestRate = product.matureInterestRate;",
															"        pm.expect(interestRate).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(interestRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    });",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Accounts List validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_accounts_overview\",\n    \"variables\": {\n        \"input\": {\n            \"page\": 1,\n            \"limit\": 20,\n            \"status\": \"active\"\n        }\n    },\n    \"query\": \"query get_ts_accounts_overview($input: GetTSAccountsInput) {\\n  ts_accounts(input: $input) {\\n    total\\n    limit\\n    page\\n    pages\\n    docs {\\n      pid\\n      balance\\n      approvedDate\\n      maturityDate\\n      managementFeeRate\\n      startDate\\n      product {\\n        name\\n        matureInterestRate {\\n          duration\\n          interestRate\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get_ts_account [3]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var pid = jsonData.data.ts_account.pid;",
															"console.log('pid : ' + pid);",
															"",
															"var productId = jsonData.data.ts_account.productId;",
															"console.log('productId : ' + productId);",
															"",
															"var balance = jsonData.data.ts_account.balance;",
															"console.log('balance : ' + balance);",
															"",
															"pm.collectionVariables.set('availableBalance', pm.response.json().data.ts_account.availableBalance);",
															"var availableBalance = jsonData.data.ts_account.availableBalance;",
															"console.log('availableBalance : ' + availableBalance);",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Detail Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.ts_account;",
															"",
															"    // Validate core account details",
															"    pm.expect(tsAccount).to.have.property(\"pid\").that.is.a(\"string\").and.to.have.lengthOf(36);",
															"    pm.expect(tsAccount).to.have.property(\"productId\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"depositAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"balance\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"availableBalance\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(tsAccount).to.have.property(\"isFreeze\").that.is.a(\"boolean\");",
															"    pm.expect(tsAccount).to.have.property(\"platform\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"startDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"approvedDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"maturityDate\").that.is.a(\"string\");",
															"    pm.expect(tsAccount).to.have.property(\"withdrawnAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"",
															"    // Validate product details",
															"    pm.expect(tsAccount).to.have.property(\"product\").that.is.an(\"object\");",
															"    let product = tsAccount.product;",
															"",
															"    pm.expect(product).to.have.property(\"pid\").that.is.a(\"string\");",
															"    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\").and.to.have.length.above(0);",
															"    pm.expect(product).to.have.property(\"minAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(product).to.have.property(\"maxAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(product).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"    ",
															"    // Validate mature interest rate",
															"    pm.expect(product).to.have.property(\"matureInterestRate\").that.is.an(\"object\");",
															"    let matureRate = product.matureInterestRate;",
															"    pm.expect(matureRate).to.have.property(\"duration\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(matureRate).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    // Validate premature interest rates",
															"    pm.expect(product).to.have.property(\"prematureInterestRates\").that.is.an(\"array\");",
															"    product.prematureInterestRates.forEach(rate => {",
															"        pm.expect(rate).to.have.property(\"duration\").that.is.a(\"number\");",
															"        pm.expect(rate).to.have.property(\"interestRate\").that.is.a(\"number\");",
															"    });",
															"",
															"    // Validate interest rates",
															"    pm.expect(product).to.have.property(\"interestRates\").that.is.an(\"array\");",
															"    product.interestRates.forEach(rate => {",
															"        pm.expect(rate).to.have.property(\"duration\").that.is.a(\"number\");",
															"        pm.expect(rate).to.have.property(\"interestRate\").that.is.a(\"number\");",
															"    });",
															"",
															"    // Validate preview settlement",
															"    pm.expect(tsAccount).to.have.property(\"previewSettlement\").that.is.an(\"object\");",
															"    let settlement = tsAccount.previewSettlement;",
															"    pm.expect(settlement).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(settlement).to.have.property(\"netInterestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account Detail validated successfully.\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_3}}\"\n        }\n    },\n    \"query\": \"query get_ts_account($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    pid\\n    productId\\n    code\\n    depositAmount\\n    balance\\n    availableBalance\\n    source\\n    isFreeze\\n    platform\\n    startDate\\n    approvedDate\\n    maturityDate\\n    managementFeeRate\\n    currentInterestRatePid\\n    settlementProductPid\\n    settlementType\\n    withdrawnAmount\\n    product {\\n      pid\\n      name\\n      minAmount\\n      maxAmount\\n      managementFeeRate\\n      duration\\n      matureInterestRate {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      prematureInterestRates {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      interestRates {\\n        pid\\n        duration\\n        interestRate\\n        description\\n        durationKey\\n        __typename\\n      }\\n      __typename\\n    }\\n    previewSettlement {\\n      interestAmount\\n      taxAmount\\n      feeAmount\\n      netInterestAmount\\n      __typename\\n    }\\n    settlementProduct {\\n      pid\\n      name\\n      matureInterestRate {\\n        interestRate\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get_ts_account_pending_withdraw_status (TS 1M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your hasPendingWithdraw is false\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.ts_account.hasPendingWithdraw).to.eql(false);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate TS Account Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure 'data.ts_account' exists",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response.data).to.have.property(\"ts_account\").that.is.an(\"object\");",
															"",
															"    let tsAccount = response.data.ts_account;",
															"",
															"    // Validate hasPendingWithdraw",
															"    pm.expect(tsAccount).to.have.property(\"hasPendingWithdraw\").that.is.a(\"boolean\");",
															"",
															"    // Validate __typename",
															"    pm.expect(tsAccount).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"TSAccountResult\");",
															"",
															"    // Validate timing",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ TS Account validated successfully.\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"get_ts_account_pending_withdraw_status\",\n    \"variables\": {\n        \"input\": {\n            \"pid\": \"{{pid_3}}\"\n        }\n    },\n    \"query\": \"query get_ts_account_pending_withdraw_status($input: GetTSAccountInput) {\\n  ts_account(input: $input) {\\n    hasPendingWithdraw\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "preview_ts_withdrawal (TS 1M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('convertAmount', 1000000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var totalAmount = jsonData.data.preview_ts_withdrawal.totalAmount;",
															"pm.collectionVariables.set('totalAmount', totalAmount);",
															"console.log('totalAmount', totalAmount)",
															"",
															"var amount = jsonData.data.preview_ts_withdrawal.amount;",
															"pm.collectionVariables.set('amount', amount);",
															"console.log('amount', amount)",
															"",
															"var interestRate = jsonData.data.preview_ts_withdrawal.interestRate;",
															"pm.collectionVariables.set('interestRate', interestRate);",
															"console.log('interestRate', interestRate)",
															"",
															"",
															"pm.test(\"✅ Validate Preview TS Withdrawal Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"preview_ts_withdrawal\" object",
															"    pm.expect(response.data).to.have.property(\"preview_ts_withdrawal\").that.is.an(\"object\");",
															"    let withdrawalPreview = response.data.preview_ts_withdrawal;",
															"",
															"    // Validate withdrawal properties",
															"    pm.expect(withdrawalPreview).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"feeAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"new\");",
															"    pm.expect(withdrawalPreview).to.have.property(\"notes\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(withdrawalPreview).to.have.property(\"interestAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(withdrawalPreview).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"TSPreviewWithdrawalResult\");",
															"",
															"    // Validate \"extensions\"",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Preview TS Withdrawal Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"preview_ts_withdrawal\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{pid_3}}\",\n            \"withdrawalAmount\": {{convertAmount}}\n        }\n    },\n    \"query\": \"query preview_ts_withdrawal($input: PreviewTSWithdrawalInput) {\\n  preview_ts_withdrawal(input: $input) {\\n    totalAmount\\n    taxAmount\\n    feeAmount\\n    status\\n    notes\\n    interestAmount\\n    amount\\n    interestRate\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "convert_tsv1_to_nfs (TS 1M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('convertAmount', 1000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate Convert TSv1 to NFS Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.convert_tsv1_to_nfs\" object",
															"    let convertData = response.data.convert_tsv1_to_nfs;",
															"    pm.expect(convertData).to.have.property(\"transaction\").that.is.an(\"object\");",
															"    pm.expect(convertData).to.have.property(\"internalPayment\").that.is.an(\"object\");",
															"    pm.expect(convertData).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"SIConvertTSv1ToNFSResult\");",
															"",
															"    // Validate \"transaction\" object",
															"    let transaction = convertData.transaction;",
															"    pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(transaction).to.have.property(\"uid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.equals(\"INCOME\");",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"SUCCESS\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.equals(\"CONVERT\");",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\").and.equals(\"DEPOSIT\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"transferAmount\").that.is.null;",
															"    pm.expect(transaction).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(transaction).to.have.property(\"note\").that.is.null;",
															"    pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(transaction).to.have.property(\"effectedAt\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(transaction).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"SITransactionResult\");",
															"",
															"    // Validate \"internalPayment\" object",
															"    let internalPayment = convertData.internalPayment;",
															"    pm.expect(internalPayment).to.have.property(\"referenceType\").that.is.a(\"string\").and.equals(\"TS_V1\");",
															"    pm.expect(internalPayment).to.have.property(\"referenceCode\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(internalPayment).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"SIInternalPaymentResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Convert TSv1 to NFS Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"convert_tsv1_to_nfs\",\n    \"variables\": {\n        \"input\": {\n            \"pinCode\": \"{{pinCode}}\",\n            \"accountPid\": \"{{pid_3}}\", //TS Product PID\n            \"interestRate\": {{interestRate}},\n            \"platform\": \"ios\",\n            \"totalAmount\": {{totalAmount}},\n            \"withdrawalAmount\": {{amount}},\n            \"withdrawalReason\": \"Lý do khác…\"\n        }\n    },\n    \"query\": \"mutation convert_tsv1_to_nfs($input: ConvertTSv1ToNFSInput) {\\n  convert_tsv1_to_nfs(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      type\\n      status\\n      transferMethod\\n      description\\n      totalAmount\\n      transferAmount\\n      taxAmount\\n      note\\n      createdAt\\n      effectedAt\\n      __typename\\n    }\\n    internalPayment {\\n      referenceType\\n      referenceCode\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Savings CoverV2",
			"item": [
				{
					"name": "NFS",
					"item": [
						{
							"name": "NFS metadata",
							"item": [
								{
									"name": "si_schemes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// var jsonData = pm.response.json();",
													"// var pfsSchemesPid = jsonData.data.si_schemes[0].pid; // Fixed index to access the correct scheme",
													"// pm.collectionVariables.set('pfsSchemesPid', pfsSchemesPid);",
													"// console.log('pfsSchemesPid', pfsSchemesPid);",
													"",
													"// var nfsSchemesPid = jsonData.data.si_schemes[1].pid; // Fixed index to access the correct scheme",
													"// pm.collectionVariables.set('nfsSchemesPid', nfsSchemesPid);",
													"// console.log('nfsSchemesPid', nfsSchemesPid);",
													"",
													"// const jsonData = pm.response.json();",
													"// const schemes = jsonData.data.si_schemes;",
													"",
													"// // Initialize variables",
													"// let pfsScheme = null;",
													"// let nfsScheme = null;",
													"",
													"// // Loop to dynamically find the first PFS and NFS schemes",
													"// for (let scheme of schemes) {",
													"//     if (!pfsScheme && scheme.productType === \"PFS\") {",
													"//         pfsScheme = scheme;",
													"//     }",
													"//     if (!nfsScheme && scheme.productType === \"NFS\") {",
													"//         nfsScheme = scheme;",
													"//     }",
													"//     if (pfsScheme && nfsScheme) break; // Exit early if both found",
													"// }",
													"",
													"// // Set variables if found",
													"// if (pfsScheme) {",
													"//     pm.collectionVariables.set('pfsSchemesPid', pfsScheme.pid);",
													"//     console.log('pfsSchemesPid:', pfsScheme.pid);",
													"// } else {",
													"//     console.warn(\"No PFS scheme found in response.\");",
													"// }",
													"",
													"// if (nfsScheme) {",
													"//     pm.collectionVariables.set('nfsSchemesPid', nfsScheme.pid);",
													"//     console.log('nfsSchemesPid:', nfsScheme.pid);",
													"// } else {",
													"//     console.warn(\"No NFS scheme found in response.\");",
													"// }",
													"",
													"",
													"const jsonData = pm.response.json();",
													"const schemes = jsonData.data.si_schemes;",
													"",
													"// Helper function to validate a scheme and set vars",
													"function validateAndSetScheme(expectedPrefix, productTypeLabel, outputVarName) {",
													"    const expectedPid = pm.collectionVariables.get(`schemePid_${expectedPrefix}`);",
													"    const expectedName = pm.collectionVariables.get(`schemeName_${expectedPrefix}`);",
													"    const expectedDisplayRate = parseFloat(pm.collectionVariables.get(`displayInterestRate_${expectedPrefix}`));",
													"    const expectedNetRate = parseFloat(pm.collectionVariables.get(`netInterestRate_${expectedPrefix}`));",
													"",
													"    const foundScheme = schemes.find(s => s.pid === expectedPid);",
													"",
													"    pm.test(`${productTypeLabel} scheme exists in response`, function () {",
													"        pm.expect(foundScheme, `${productTypeLabel} scheme with pid ${expectedPid} should be found`).to.be.an(\"object\");",
													"    });",
													"",
													"    if (foundScheme) {",
													"        // Validation",
													"        pm.test(`${productTypeLabel} name matches`, function () {",
													"            pm.expect(foundScheme.name).to.eql(expectedName);",
													"        });",
													"",
													"        pm.test(`${productTypeLabel} displayInterestRate matches`, function () {",
													"            pm.expect(foundScheme.product.displayInterestRate).to.eql(expectedDisplayRate);",
													"        });",
													"",
													"        pm.test(`${productTypeLabel} netInterestRate matches`, function () {",
													"            pm.expect(foundScheme.product.netInterestRate).to.eql(expectedNetRate);",
													"        });",
													"",
													"        // Set output variable (e.g., pfsSchemesPid, nfsSchemesPid)",
													"        pm.collectionVariables.set(outputVarName, foundScheme.pid);",
													"        console.log(`${outputVarName}:`, foundScheme.pid);",
													"    }",
													"}",
													"",
													"// Validate and set PFS & NFS schemes",
													"validateAndSetScheme(\"PFS\", \"PFS\", \"pfsSchemesPid\");",
													"validateAndSetScheme(\"NFS\", \"NFS\", \"nfsSchemesPid\");",
													"",
													"",
													"",
													"//Validate SI Schemes",
													"pm.test(\"✅ Validate SI Schemes Response & Match Pre-request Variables\", function () {",
													"    let response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"",
													"    let schemes = response.data.si_schemes;",
													"    pm.expect(schemes).to.be.an(\"array\").that.is.not.empty;",
													"",
													"    // Function to find a scheme by PID",
													"    function findSchemeByPid(pid) {",
													"        return schemes.find(scheme => scheme.pid === pid);",
													"    }",
													"",
													"    // Fetch Pre-request Variables",
													"    let expectedSchemes = [",
													"        { ",
													"            pid: pm.collectionVariables.get('schemePid_NFS'), ",
													"            name: pm.collectionVariables.get('schemeName_NFS'),",
													"            displayInterestRate: pm.collectionVariables.get('displayInterestRate_NFS'),",
													"            netInterestRate: pm.collectionVariables.get('netInterestRate_NFS')",
													"        },",
													"        { ",
													"            pid: pm.collectionVariables.get('schemePid_PFS'), ",
													"            name: pm.collectionVariables.get('schemeName_PFS'),",
													"            displayInterestRate: pm.collectionVariables.get('displayInterestRate_PFS'),",
													"            netInterestRate: pm.collectionVariables.get('netInterestRate_PFS')",
													"        }",
													"    ];",
													"",
													"    // Validate each expected scheme",
													"    expectedSchemes.forEach(expected => {",
													"        let scheme = findSchemeByPid(expected.pid);",
													"        if (scheme) { // Added a check for scheme existence",
													"            pm.expect(scheme.name, `Scheme Name for ${expected.pid}`).to.equal(expected.name);",
													"            pm.expect(scheme.product.displayInterestRate, `Display Interest Rate for ${expected.pid}`).to.equal(expected.displayInterestRate);",
													"            pm.expect(scheme.product.netInterestRate, `Net Interest Rate for ${expected.pid}`).to.equal(expected.netInterestRate);",
													"        }",
													"    });",
													"",
													"    // Validate \"extensions\" object",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
													"",
													"    console.log(\"✅ SI Schemes Response is valid and matches expected pre-request variables.\");",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Schemes API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate response structure",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"si_schemes\").that.is.an(\"array\");",
													"",
													"    let schemes = response.data.si_schemes;",
													"",
													"    // Ensure at least one scheme exists",
													"    pm.expect(schemes.length, \"SI Schemes list should not be empty\").to.be.greaterThan(0);",
													"",
													"    schemes.forEach(scheme => {",
													"        pm.expect(scheme).to.have.property(\"pid\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(scheme).to.have.property(\"name\").that.is.a(\"string\").and.to.not.be.empty;",
													"        pm.expect(scheme).to.have.property(\"interestRate\").that.is.a(\"number\").and.to.be.within(0, 1);",
													"        pm.expect(scheme).to.have.property(\"depositEndDate\").that.satisfies(val => val === null || typeof val === \"string\", \"Should be null or string\");",
													"        pm.expect(scheme).to.have.property(\"depositStartDate\").that.satisfies(val => val === null || typeof val === \"string\", \"Should be null or string\");",
													"        pm.expect(scheme).to.have.property(\"productType\").that.is.a(\"string\").and.to.be.oneOf([\"PFS\", \"NFS\"]);",
													"        pm.expect(scheme).to.have.property(\"product\").that.is.an(\"object\");",
													"",
													"        let product = scheme.product;",
													"        pm.expect(product).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.within(0, 1);",
													"        pm.expect(product).to.have.property(\"netInterestRate\").that.is.a(\"number\").and.to.be.within(0, 1);",
													"        pm.expect(product).to.have.property(\"maxAccountBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(product).to.have.property(\"minDepositAmount\").that.is.a(\"number\").and.to.be.at.least(50000);",
													"    });",
													"",
													"    console.log(\"✅ SI Schemes API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('schemePid_NFS', \"ec441e4d-13b6-4d10-991c-7267e30b6097\");",
													"pm.collectionVariables.set('schemeName_NFS', \"Tài khoản sinh lời\");",
													"pm.collectionVariables.set('displayInterestRate_NFS', 0.04);",
													"pm.collectionVariables.set('netInterestRate_NFS', 0.038);",
													"",
													"",
													"pm.collectionVariables.set('schemePid_PFS', \"a71f2033-84c3-415e-a8d6-80501e0c61f1\");",
													"pm.collectionVariables.set('schemeName_PFS', \"TKSL - TEST PFS\");",
													"pm.collectionVariables.set('displayInterestRate_PFS', 0.049);",
													"pm.collectionVariables.set('netInterestRate_PFS', 0.04655);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_schemes\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\",\n            \"status\": \"ACTIVE\"\n        }\n    },\n    \"query\": \"query si_schemes($input: SIGetSchemesInput) {\\n  si_schemes(input: $input) {\\n    pid\\n    name\\n    interestRate\\n    depositEndDate\\n    depositStartDate\\n    productType\\n    product {\\n      displayInterestRate\\n      netInterestRate\\n      maxAccountBalance\\n      minDepositAmount\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_portfolio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string si_portfolio\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"si_portfolio\");",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Portfolio API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate response structure",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"si_portfolio\").that.is.an(\"object\");",
													"",
													"    let portfolio = response.data.si_portfolio;",
													"",
													"    // Validate required fields",
													"    pm.expect(portfolio).to.have.property(\"totalBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
													"    pm.expect(portfolio).to.have.property(\"totalTempInterest\").that.is.a(\"number\").and.to.be.at.least(0);",
													"    pm.expect(portfolio).to.have.property(\"totalInterest\").that.is.a(\"number\").and.to.be.at.least(0);",
													"    pm.expect(portfolio).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIPortfolioResult\");",
													"",
													"    console.log(\"✅ SI Portfolio API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_portfolio\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\"\n        }\n    },\n    \"query\": \"query si_portfolio($input: SIGetPortfolioInput) {\\n  si_portfolio(input: $input) {\\n    totalBalance\\n    totalTempInterest\\n    totalInterest\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_accounts (not exist)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Extract and store PID\", function () {",
													"    let response = pm.response.json(); // Parse JSON response",
													"    ",
													"    if (response.data && response.data.si_accounts && response.data.si_accounts.length > 0) {",
													"        let pid = response.data.si_accounts[0].pid; // Extract PID",
													"        ",
													"        pm.collectionVariables.set(\"siAccountpid\", pid); // Store in Collection Variables",
													"        ",
													"        console.log(\"siAccountpid:\", pid); // Log for debugging",
													"    } else {",
													"        console.log(\"No valid PID found in response.\");",
													"    }",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Accounts API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate top-level structure",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"si_accounts\").that.is.an(\"array\");",
													"",
													"    let accounts = response.data.si_accounts;",
													"",
													"    accounts.forEach(account => {",
													"        // Validate required fields",
													"        pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\");",
													"        pm.expect(account).to.have.property(\"status\").that.is.a(\"string\");",
													"        pm.expect(account).to.have.property(\"totalBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(account).to.have.property(\"totalDeposit\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(account).to.have.property(\"totalWithdrawn\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(account).to.have.property(\"totalInterest\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(account).to.have.property(\"availableBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(account).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIAccountResult\");",
													"",
													"        // Validate 'scheme' object",
													"        pm.expect(account).to.have.property(\"scheme\").that.is.an(\"object\");",
													"        pm.expect(account.scheme).to.have.property(\"productType\").that.is.a(\"string\");",
													"        pm.expect(account.scheme).to.have.property(\"name\").that.is.a(\"string\");",
													"        pm.expect(account.scheme).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SISchemeResult\");",
													"",
													"        // Validate 'product' object",
													"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
													"        pm.expect(account.product).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.within(0, 1);",
													"        pm.expect(account.product).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIProductResult\");",
													"    });",
													"",
													"    console.log(\"✅ SI Accounts API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_accounts\",\n    \"variables\": {\n        \"input\": {\n            //\"productTypes\": [\"NFS\",\"PFS\",\"NTS\",\"PTS\"],\n            \"savingType\": \"FS\",\n            \"statuses\": \"ACTIVE\"\n        }\n    },\n    \"query\": \"query si_accounts($input: SIGetAccountsInput) {\\n  si_accounts(input: $input) {\\n    pid\\n    status\\n    totalBalance\\n    totalDeposit\\n    totalWithdrawn\\n    totalInterest\\n    availableBalance\\n    scheme {\\n      productType\\n      name\\n      settleDate\\n      __typename\\n    }\\n    product {\\n      displayInterestRate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_deposit_metadata (NFS) 1st",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Deposit Metadata API Response\", function () {",
													"    let response = pm.response.json(); // Parse JSON response",
													"",
													"    if (response.data && response.data.si_deposit_metadata) {",
													"        let metadata = response.data.si_deposit_metadata;",
													"",
													"        pm.expect(metadata.remainingDepositAmount).to.be.a(\"number\"); // Ensure remainingDepositAmount is a number",
													"        pm.expect(metadata.maxDepositAmount).to.equal(null); // Ensure maxDepositAmount is NULL",
													"        pm.expect(metadata.minDepositAmount).to.be.a(\"number\"); // Ensure minDepositAmount is a number",
													"",
													"        // Set variables in collection",
													"        pm.collectionVariables.set(\"remaining_deposit_amount\", metadata.remainingDepositAmount);",
													"        pm.collectionVariables.set(\"max_deposit_amount\", metadata.maxDepositAmount);",
													"        pm.collectionVariables.set(\"min_deposit_amount\", metadata.minDepositAmount);",
													"",
													"        console.log(\"Remaining Deposit Amount:\", metadata.remainingDepositAmount);",
													"        console.log(\"Max Deposit Amount:\", metadata.maxDepositAmount);",
													"        console.log(\"Min Deposit Amount:\", metadata.minDepositAmount);",
													"    } else {",
													"        pm.test(\"Response does not contain valid deposit metadata\", function () {",
													"            pm.expect(false).to.be.true; // Force test failure",
													"        });",
													"    }",
													"    console.log(\"✅ SI Deposit Metadata API response is valid!\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_deposit_metadata\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\"\n        }\n    },\n    \"query\": \"query si_deposit_metadata($input: SIGetDepositMetadataInput) {\\n  si_deposit_metadata(input: $input) {\\n    remainingDepositAmount\\n    maxDepositAmount\\n    minDepositAmount\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_interests_report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"",
													"// Generate current date in UTC format",
													"let fromDate = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss.SSS[Z]\");",
													"",
													"// Generate toDate (30 days later) in UTC format",
													"let toDate = moment().utc().add(30, 'days').format(\"YYYY-MM-DDTHH:mm:ss.SSS[Z]\");",
													"",
													"// Set variables in Postman collection",
													"pm.collectionVariables.set(\"fromDate\", fromDate);",
													"pm.collectionVariables.set(\"toDate\", toDate);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string si_interests_report\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"si_interests_report\");",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Interests Report API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate top-level structure",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"si_interests_report\").that.is.an(\"array\");",
													"",
													"    let interests = response.data.si_interests_report;",
													"",
													"    // Check each interest report entry",
													"    interests.forEach((entry, index) => {",
													"        pm.expect(entry).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(entry).to.have.property(\"totalSettledInterest\").that.is.a(\"number\").and.to.be.at.least(0);",
													"        pm.expect(entry).to.have.property(\"createdAt\").that.is.a(\"string\").and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
													"        pm.expect(entry).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIInterestResult\");",
													"",
													"        console.log(`✅ Entry ${index + 1} is valid!`);",
													"    });",
													"",
													"    console.log(\"✅ SI Interests Report API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_interests_report\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\",\n            \"fromDate\": \"{{fromDate}}\",\n            \"toDate\": \"{{toDate}}\"\n        }\n    },\n    \"query\": \"query si_interests_report($input: SIGetInterestsInput) {\\n  si_interests_report(input: $input) {\\n    amount\\n    totalSettledInterest\\n    createdAt\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_preview_contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string user signed contract\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"user signed contract\");",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Preview Contract USER_SIGNED_CONTRACT API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate top-level structure",
													"    pm.expect(response).to.have.property(\"errors\").that.is.an(\"array\");",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"",
													"    // Validate \"errors\" structure",
													"    let errors = response.errors;",
													"    pm.expect(errors.length).to.be.greaterThan(0);",
													"",
													"    let error = errors[0];",
													"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(error).to.have.property(\"key\").that.is.a(\"string\");",
													"    pm.expect(error).to.have.property(\"details\").that.is.an(\"object\");",
													"",
													"    // Validate \"details\" structure",
													"    pm.expect(error.details).to.have.property(\"code\").that.is.a(\"string\");",
													"    pm.expect(error.details).to.have.property(\"message\").that.is.a(\"string\");",
													"",
													"    // Validate \"data\" structure",
													"    pm.expect(response.data).to.have.property(\"si_preview_contract\").that.is.null;",
													"",
													"    // Validate \"extensions\" structure",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\");",
													"",
													"    console.log(\"✅ SI Preview Contract API USER_SIGNED_CONTRACT error response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"variables\": {},\n    \"query\": \"mutation {\\n  si_preview_contract {\\n    url\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_maintenance_config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches is false\", function () {",
													"    pm.expect(pm.response.text()).to.include(false);",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI Maintenance Config API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate top-level structure",
													"    pm.expect(response).to.have.property(\"data\");",
													"    pm.expect(response.data).to.have.property(\"si_maintenance_config\").that.is.an(\"object\");",
													"",
													"    let config = response.data.si_maintenance_config;",
													"",
													"    // Validate required fields",
													"    pm.expect(config).to.have.property(\"key\").that.is.a(\"string\");",
													"    pm.expect(config).to.have.property(\"value\").that.is.a(\"boolean\");",
													"    pm.expect(config).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIMaintenanceConfigResult\");",
													"",
													"    console.log(\"✅ SI Maintenance Config API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationName\": \"si_maintenance_config\",\n    \"variables\": {\n        \"input\": {\n            \"key\": \"MAINTENANCE_NFS_DEPOSIT_FROM_BANK\"\n        }\n    },\n    \"query\": \"query si_maintenance_config($input: SIGetMaintenanceConfigInput!) {\\n  si_maintenance_config(input: $input) {\\n    key\\n    value\\n    __typename\\n  }\\n}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								},
								{
									"name": "si_fs_hibernation_status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string false\", function () {",
													"    pm.expect(pm.response.text()).to.include(false);",
													"});",
													"",
													"",
													"pm.test(\"✅ Validate SI FS Hibernation Status API Response\", function () {",
													"    let response = pm.response.json();",
													"",
													"    // Validate top-level structure",
													"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
													"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
													"",
													"    // Validate \"data\" structure",
													"    pm.expect(response.data).to.have.property(\"si_fs_hibernation_status\").that.is.an(\"object\");",
													"    pm.expect(response.data.si_fs_hibernation_status).to.have.property(\"isHibernated\").that.is.a(\"boolean\");",
													"",
													"    // Validate \"extensions\" structure",
													"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\");",
													"",
													"    console.log(\"✅ SI FS Hibernation Status API response is valid!\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-infina-app-version",
												"value": "{{x-infina-app-version}}",
												"type": "text"
											},
											{
												"key": "x-infina-api-key",
												"value": "{{x-infina-api-key}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"query\": \"query{si_fs_hibernation_status{isHibernated}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://staging.realstake.co/api/graphiql",
											"protocol": "https",
											"host": [
												"staging",
												"realstake",
												"co"
											],
											"path": [
												"api",
												"graphiql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "NFS Deposit",
							"item": [
								{
									"name": "NFS Deposit (min_deposit_amount)",
									"item": [
										{
											"name": "si_deposit (min_deposit_amount)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('depositAmount', 50000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your depositAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_deposit.payment.amount).to.eql(pm.collectionVariables.get('min_deposit_amount'));",
															"});",
															"",
															"pm.test(\"Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_deposit && response.data.si_deposit.payment) {",
															"        let payment = response.data.si_deposit.payment;",
															"",
															"        pm.expect(payment.status).to.be.a(\"string\"); // Ensure status is a string",
															"        pm.expect(payment.amount).to.be.a(\"number\"); // Ensure amount is a number",
															"        pm.expect(payment.bankMemo).to.be.a(\"string\"); // Ensure bankMemo is a string",
															"        ",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"payment_status\", payment.status);",
															"        pm.collectionVariables.set(\"payment_amount\", payment.amount);",
															"        pm.collectionVariables.set(\"bank_memo\", payment.bankMemo);",
															"",
															"        console.log(\"Payment Status:\", payment.status);",
															"        console.log(\"Payment Amount:\", payment.amount);",
															"        console.log(\"Bank Memo:\", payment.bankMemo);",
															"    } else {",
															"        pm.test(\"Response does not contain valid payment data\", function() {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Deposit API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_deposit\" object",
															"    pm.expect(response.data).to.have.property(\"si_deposit\").that.is.an(\"object\");",
															"",
															"    // Validate \"payment\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"payment\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"status\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment.status).to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"__typename\").that.equals(\"SIPaymentResult\");",
															"",
															"    // Validate \"transaction\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"transaction\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"__typename\").that.equals(\"SITransactionResult\");",
															"",
															"    // Validate \"__typename\" for \"si_deposit\"",
															"    pm.expect(response.data.si_deposit).to.have.property(\"__typename\").that.equals(\"SIDepositResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Deposit API response is valid!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\",\n            \"amount\": {{min_deposit_amount}} \n        }\n    },\n    \"query\": \"mutation si_deposit($input: SICreateDepositByBankInput) {\\n  si_deposit(input: $input) {\\n    payment {\\n      status\\n      amount\\n      bankMemo\\n      effectedAt\\n      __typename\\n    }\\n    transaction {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 91000;",
															"const Amount = pm.collectionVariables.get('payment_amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bank_memo')",
															"//const Remark = 'Wrong memo'",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var moment = require('moment');",
															"pm.collectionVariables.set('currentDate', moment().format(\"YYYY-MM-DDTHH:mm:ss\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var transactionPid = jsonData.data.si_transactions[0].pid;",
															"pm.collectionVariables.set('transactionPid', transactionPid);",
															"console.log('transactionPid', transactionPid);",
															"",
															"",
															"pm.test(\"✅ Validate SI Transactions List API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transactions\" array",
															"    pm.expect(response.data).to.have.property(\"si_transactions\").that.is.an(\"array\").and.to.have.length.above(0);",
															"",
															"    response.data.si_transactions.forEach(transaction => {",
															"        // Validate required fields in each transaction",
															"        pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"OUTCOME\"]);",
															"        pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"        pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"        //pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\", \"INTEREST\"]);",
															"        pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithInternalPaymentResult\");",
															"    });",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transactions API List response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transactions\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\",\n            \"fromDate\": \"2024-11-30T17:00:00.000Z\",\n            \"toDate\": \"{{currentDate}}\"\n        }\n    },\n    \"query\": \"query si_transactions($input: SIGetTransactionsInput) {\\n  si_transactions(input: $input) {\\n    pid\\n    type\\n    status\\n    description\\n    transferMethod\\n    createdAt\\n    totalAmount\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is SUCCESS\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_transaction.status).to.eql('SUCCESS');",
															"});",
															"",
															"pm.test(\"✅ Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\", \"SUCCESS\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"INCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"✅ Validate SI Transaction API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transaction\" object",
															"    pm.expect(response.data).to.have.property(\"si_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"EXPENSE\"]);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\"]);",
															"    pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"interestStartedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"internalPayment\").that.is.null;",
															"    pm.expect(transaction).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(transaction).to.have.property(\"productType\").that.is.a(\"string\").and.to.be.oneOf([\"NFS\", \"PFS\"]);",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithMetadataResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transaction API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{transactionPid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Deposit (500M)",
									"item": [
										{
											"name": "si_deposit (500M)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositAmount', 500000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your depositAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_deposit.payment.amount).to.eql(pm.collectionVariables.get('depositAmount'));",
															"});",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_deposit && response.data.si_deposit.payment) {",
															"        let payment = response.data.si_deposit.payment;",
															"",
															"        pm.expect(payment.status).to.be.a(\"string\"); // Ensure status is a string",
															"        pm.expect(payment.amount).to.be.a(\"number\"); // Ensure amount is a number",
															"        pm.expect(payment.bankMemo).to.be.a(\"string\"); // Ensure bankMemo is a string",
															"        ",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"payment_status\", payment.status);",
															"        pm.collectionVariables.set(\"payment_amount\", payment.amount);",
															"        pm.collectionVariables.set(\"bank_memo\", payment.bankMemo);",
															"",
															"        console.log(\"Payment Status:\", payment.status);",
															"        console.log(\"Payment Amount:\", payment.amount);",
															"        console.log(\"Bank Memo:\", payment.bankMemo);",
															"    } else {",
															"        pm.test(\"Response does not contain valid payment data\", function() {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Deposit API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_deposit\" object",
															"    pm.expect(response.data).to.have.property(\"si_deposit\").that.is.an(\"object\");",
															"",
															"    // Validate \"payment\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"payment\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"status\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment.status).to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"__typename\").that.equals(\"SIPaymentResult\");",
															"",
															"    // Validate \"transaction\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"transaction\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"__typename\").that.equals(\"SITransactionResult\");",
															"",
															"    // Validate \"__typename\" for \"si_deposit\"",
															"    pm.expect(response.data.si_deposit).to.have.property(\"__typename\").that.equals(\"SIDepositResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Deposit API response is valid!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\",\n            \"amount\": {{depositAmount}} \n        }\n    },\n    \"query\": \"mutation si_deposit($input: SICreateDepositByBankInput) {\\n  si_deposit(input: $input) {\\n    payment {\\n      status\\n      amount\\n      bankMemo\\n      effectedAt\\n      __typename\\n    }\\n    transaction {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 91000;",
															"const Amount = pm.collectionVariables.get('payment_amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bank_memo')",
															"//const Remark = 'Wrong memo'",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var moment = require('moment');",
															"pm.collectionVariables.set('currentDate', moment().format(\"YYYY-MM-DDTHH:mm:ss\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var transactionPid = jsonData.data.si_transactions[0].pid;",
															"pm.collectionVariables.set('transactionPid', transactionPid);",
															"console.log('transactionPid', transactionPid);",
															"",
															"",
															"pm.test(\"✅ Validate SI Transactions List API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transactions\" array",
															"    pm.expect(response.data).to.have.property(\"si_transactions\").that.is.an(\"array\").and.to.have.length.above(0);",
															"",
															"    response.data.si_transactions.forEach(transaction => {",
															"        // Validate required fields in each transaction",
															"        pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"OUTCOME\"]);",
															"        pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"        pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"        //pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\", \"INTEREST\"]);",
															"        pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithInternalPaymentResult\");",
															"    });",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transactions API List response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transactions\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\",\n            \"fromDate\": \"2024-11-30T17:00:00.000Z\",\n            \"toDate\": \"{{currentDate}}\"\n        }\n    },\n    \"query\": \"query si_transactions($input: SIGetTransactionsInput) {\\n  si_transactions(input: $input) {\\n    pid\\n    type\\n    status\\n    description\\n    transferMethod\\n    createdAt\\n    totalAmount\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is SUCCESS\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_transaction.status).to.eql('SUCCESS');",
															"});",
															"",
															"pm.test(\"Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\", \"SUCCESS\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"INCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"✅ Validate SI Transaction API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transaction\" object",
															"    pm.expect(response.data).to.have.property(\"si_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"EXPENSE\"]);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\"]);",
															"    pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"interestStartedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"internalPayment\").that.is.null;",
															"    pm.expect(transaction).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(transaction).to.have.property(\"productType\").that.is.a(\"string\").and.to.be.oneOf([\"NFS\", \"PFS\"]);",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithMetadataResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transaction API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{transactionPid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Deposit (remaining_deposit_amount)",
									"item": [
										{
											"name": "si_deposit_metadata (NFS)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Deposit Metadata API Response\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_deposit_metadata) {",
															"        let metadata = response.data.si_deposit_metadata;",
															"",
															"        pm.expect(metadata.remainingDepositAmount).to.be.a(\"number\"); // Ensure remainingDepositAmount is a number",
															"        pm.expect(metadata.maxDepositAmount).to.equal(null); // Ensure maxDepositAmount is NULL",
															"        pm.expect(metadata.minDepositAmount).to.be.a(\"number\"); // Ensure minDepositAmount is a number",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"remaining_deposit_amount\", metadata.remainingDepositAmount);",
															"        pm.collectionVariables.set(\"max_deposit_amount\", metadata.maxDepositAmount);",
															"        pm.collectionVariables.set(\"min_deposit_amount\", metadata.minDepositAmount);",
															"",
															"        console.log(\"Remaining Deposit Amount:\", metadata.remainingDepositAmount);",
															"        console.log(\"Max Deposit Amount:\", metadata.maxDepositAmount);",
															"        console.log(\"Min Deposit Amount:\", metadata.minDepositAmount);",
															"    } else {",
															"        pm.test(\"Response does not contain valid deposit metadata\", function () {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"    console.log(\"✅ SI Deposit Metadata API response is valid!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit_metadata\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\"\n        }\n    },\n    \"query\": \"query si_deposit_metadata($input: SIGetDepositMetadataInput) {\\n  si_deposit_metadata(input: $input) {\\n    remainingDepositAmount\\n    maxDepositAmount\\n    minDepositAmount\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_deposit (remaining_deposit_amount)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('depositAmount', 50000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your depositAmount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_deposit.payment.amount).to.eql(pm.collectionVariables.get('remaining_deposit_amount'));",
															"});",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_deposit && response.data.si_deposit.payment) {",
															"        let payment = response.data.si_deposit.payment;",
															"",
															"        pm.expect(payment.status).to.be.a(\"string\"); // Ensure status is a string",
															"        pm.expect(payment.amount).to.be.a(\"number\"); // Ensure amount is a number",
															"        pm.expect(payment.bankMemo).to.be.a(\"string\"); // Ensure bankMemo is a string",
															"        ",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"payment_status\", payment.status);",
															"        pm.collectionVariables.set(\"payment_amount\", payment.amount);",
															"        pm.collectionVariables.set(\"bank_memo\", payment.bankMemo);",
															"",
															"        console.log(\"Payment Status:\", payment.status);",
															"        console.log(\"Payment Amount:\", payment.amount);",
															"        console.log(\"Bank Memo:\", payment.bankMemo);",
															"    } else {",
															"        pm.test(\"Response does not contain valid payment data\", function() {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Deposit API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_deposit\" object",
															"    pm.expect(response.data).to.have.property(\"si_deposit\").that.is.an(\"object\");",
															"",
															"    // Validate \"payment\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"payment\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"status\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment.status).to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"amount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.payment).to.have.property(\"__typename\").that.equals(\"SIPaymentResult\");",
															"",
															"    // Validate \"transaction\" object",
															"    pm.expect(response.data.si_deposit).to.have.property(\"transaction\").that.is.an(\"object\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(response.data.si_deposit.transaction).to.have.property(\"__typename\").that.equals(\"SITransactionResult\");",
															"",
															"    // Validate \"__typename\" for \"si_deposit\"",
															"    pm.expect(response.data.si_deposit).to.have.property(\"__typename\").that.equals(\"SIDepositResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Deposit API response is valid!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\",\n            \"amount\": {{remaining_deposit_amount}} \n        }\n    },\n    \"query\": \"mutation si_deposit($input: SICreateDepositByBankInput) {\\n  si_deposit(input: $input) {\\n    payment {\\n      status\\n      amount\\n      bankMemo\\n      effectedAt\\n      __typename\\n    }\\n    transaction {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "VA Deposit Trigger",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate UUID (similar to uuid.v4())",
															"function generateUUID() {",
															"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
															"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
															"        return v.toString(16);",
															"    });",
															"}",
															"",
															"",
															"// Get current time (similar to dayjs().format())",
															"function getCurrentTime() {",
															"    var date = new Date();",
															"    return date.getFullYear() + '-' +",
															"        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +",
															"        ('0' + date.getDate()).slice(-2) + ' ' +",
															"        ('0' + date.getHours()).slice(-2) + ':' +",
															"        ('0' + date.getMinutes()).slice(-2) + ':' +",
															"        ('0' + date.getSeconds()).slice(-2);",
															"}",
															"",
															"// Get VA Payload from Deposit Payment",
															"//const Amount = 91000;",
															"const Amount = pm.collectionVariables.get('payment_amount')",
															"const Fee = 4400;",
															"const VaAcc = pm.collectionVariables.get('VaAcc')",
															"const VaName = pm.collectionVariables.get('VaName')",
															"const MapId = pm.collectionVariables.get('MapId')",
															"const Remark = pm.collectionVariables.get('bank_memo')",
															"//const Remark = 'Wrong memo'",
															"",
															"",
															"// Generate the payload",
															"const payload = {",
															"    RequestId: generateUUID(),",
															"    ReferenceId: generateUUID(),",
															"    RequestTime: getCurrentTime(),",
															"    BankTranTime: getCurrentTime(),",
															"    Amount: Amount, ",
															"    Fee: Fee,",
															"    VaAcc: VaAcc,",
															"    MapId: MapId,",
															"    VaName: VaName,",
															"    MerchantCode: 'VAP001',",
															"    BankCode: 'WOORIBANK',",
															"    BankName: 'Ngan hang TNHH MTV Woori Viet Nam',",
															"    Remark: Remark",
															"};",
															"",
															"// Concatenate fields for signature",
															"const textToSign = [",
															"    payload.RequestId,",
															"    payload.ReferenceId,",
															"    payload.RequestTime,",
															"    payload.Amount,",
															"    payload.Fee,",
															"    payload.VaAcc,",
															"    payload.MapId",
															"].join('|');",
															"",
															"// Send request to external API to sign the payload",
															"pm.sendRequest({",
															"    url: 'http://localhost:3000/sign',",
															"    method: 'POST',",
															"    header: {",
															"        'Content-Type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'raw',",
															"        raw: JSON.stringify({ textToSign })",
															"    }",
															"}, function (err, res) {",
															"    if (err) {",
															"        console.log(\"Error generating signature: \", err);",
															"    } else {",
															"        // Assume the service returns a JSON with the signature",
															"        const signature = res.json().signature;",
															"        ",
															"        // Add the signature to the payload",
															"        payload.Signature = signature;",
															"",
															"        // Store the full payload in the environment variable",
															"        pm.environment.set(\"requestPayload\", JSON.stringify(payload));",
															"        console.log(\"payload\", payload)",
															"",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your ResponseCode is 200\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseCode).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Your ResponseMessage is Success\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.ResponseMessage).to.eql(\"Success\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestPayload}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://cash-in-api.realstake.co/api/webhook/va/epay/deposit",
													"protocol": "https",
													"host": [
														"cash-in-api",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"webhook",
														"va",
														"epay",
														"deposit"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var moment = require('moment');",
															"pm.collectionVariables.set('currentDate', moment().format(\"YYYY-MM-DDTHH:mm:ss\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var transactionPid = jsonData.data.si_transactions[0].pid;",
															"pm.collectionVariables.set('transactionPid', transactionPid);",
															"console.log('transactionPid', transactionPid);",
															"",
															"",
															"pm.test(\"✅ Validate SI Transactions List API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transactions\" array",
															"    pm.expect(response.data).to.have.property(\"si_transactions\").that.is.an(\"array\").and.to.have.length.above(0);",
															"",
															"    response.data.si_transactions.forEach(transaction => {",
															"        // Validate required fields in each transaction",
															"        pm.expect(transaction).to.have.property(\"pid\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"OUTCOME\"]);",
															"        pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"        pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"        //pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\", \"INTEREST\"]);",
															"        pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"        pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"        pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithInternalPaymentResult\");",
															"    });",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transactions API List response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transactions\",\n    \"variables\": {\n        \"input\": {\n            \"savingType\": \"FS\",\n            \"fromDate\": \"2024-11-30T17:00:00.000Z\",\n            \"toDate\": \"{{currentDate}}\"\n        }\n    },\n    \"query\": \"query si_transactions($input: SIGetTransactionsInput) {\\n  si_transactions(input: $input) {\\n    pid\\n    type\\n    status\\n    description\\n    transferMethod\\n    createdAt\\n    totalAmount\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your status is SUCCESS\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_transaction.status).to.eql('SUCCESS');",
															"});",
															"",
															"pm.test(\"Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\", \"SUCCESS\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"INCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"✅ Validate SI Transaction API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.si_transaction\" object",
															"    pm.expect(response.data).to.have.property(\"si_transaction\").that.is.an(\"object\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\").that.is.a(\"string\").and.to.be.oneOf([\"PENDING\", \"SUCCESS\", \"FAILED\"]);",
															"    pm.expect(transaction).to.have.property(\"type\").that.is.a(\"string\").and.to.be.oneOf([\"INCOME\", \"EXPENSE\"]);",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"description\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"transferMethod\").that.is.a(\"string\").and.to.be.oneOf([\"BANK_TRANSFER\", \"INTERNAL_TRANSFER\"]);",
															"    pm.expect(transaction).to.have.property(\"createdAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"interestStartedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"effectedAt\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(transaction).to.have.property(\"internalPayment\").that.is.null;",
															"    pm.expect(transaction).to.have.property(\"taxAmount\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(transaction).to.have.property(\"productType\").that.is.a(\"string\").and.to.be.oneOf([\"NFS\", \"PFS\"]);",
															"    pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"__typename\").that.equals(\"SITransactionWithMetadataResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Transaction API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 10000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{transactionPid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Deposit (40k < Min error)",
									"item": [
										{
											"name": "si_deposit (40k < Min)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositAmount', 40000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Validate SI Deposit Error Response <Deposit amount must be greater or equal...>\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"errors\").that.is.an(\"array\").and.to.have.length.above(0);",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"errors\" array",
															"    let error = response.errors[0];  // Get the first error object",
															"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Deposit min amount not met\");",
															"    pm.expect(error).to.have.property(\"key\").that.is.a(\"string\").and.equals(\"II:DEPOSIT_FAILED\");",
															"    pm.expect(error).to.have.property(\"details\").that.is.an(\"object\");",
															"",
															"    // Validate \"details\" object inside \"errors\"",
															"    let details = error.details;",
															"    pm.expect(details).to.have.property(\"code\").that.is.a(\"string\").and.equals(\"DEPOSIT_MIN_AMOUNT_NOT_MET\");",
															"    pm.expect(details).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Deposit min amount not met\");",
															"",
															"    // Validate \"data\" object (should contain null for si_deposit)",
															"    pm.expect(response.data).to.have.property(\"si_deposit\").that.is.null;",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Deposit Error Response is valid <Deposit amount must be greater or equal...>!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\",\n            \"amount\": {{depositAmount}}\n        }\n    },\n    \"query\": \"mutation si_deposit($input: SICreateDepositByBankInput) {\\n  si_deposit(input: $input) {\\n    payment {\\n      status\\n      amount\\n      bankMemo\\n      effectedAt\\n      __typename\\n    }\\n    transaction {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Deposti (3B > Max error)",
									"item": [
										{
											"name": "si_deposit (3B > Max)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('depositAmount', 30000000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"",
															"pm.test(\"✅ Validate SI Deposit Exceeded Remaining Amount Error <Deposit amount must be less or equal...>\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"errors\").that.is.an(\"array\").and.to.have.length.above(0);",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"errors\" array",
															"    let error = response.errors[0];  // Get the first error object",
															"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Exceeded remaining deposit amount\");",
															"    pm.expect(error).to.have.property(\"key\").that.is.a(\"string\").and.equals(\"II:DEPOSIT_FAILED\");",
															"    pm.expect(error).to.have.property(\"details\").that.is.an(\"object\");",
															"",
															"    // Validate \"details\" object inside \"errors\"",
															"    let details = error.details;",
															"    pm.expect(details).to.have.property(\"code\").that.is.a(\"string\").and.equals(\"REMAINING_DEPOSIT_AMOUNT_EXCEEDED\");",
															"    pm.expect(details).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Exceeded remaining deposit amount\");",
															"",
															"    // Validate \"data\" object (should contain null for si_deposit)",
															"    pm.expect(response.data).to.have.property(\"si_deposit\").that.is.null;",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Deposit Error Response (Exceeded Remaining Amount) is valid <Deposit amount must be less or equal...>!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_deposit\",\n    \"variables\": {\n        \"input\": {\n            \"schemePid\": \"{{schemePid_NFS}}\",\n            \"amount\": {{depositAmount}}\n        }\n    },\n    \"query\": \"mutation si_deposit($input: SICreateDepositByBankInput) {\\n  si_deposit(input: $input) {\\n    payment {\\n      status\\n      amount\\n      bankMemo\\n      effectedAt\\n      __typename\\n    }\\n    transaction {\\n      code\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NFS Withdraw",
							"item": [
								{
									"name": "NFS metadata",
									"item": [
										{
											"name": "si_accounts (exist)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Extract and store PID\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"    ",
															"    if (response.data && response.data.si_accounts && response.data.si_accounts.length > 0) {",
															"        let pid = response.data.si_accounts[0].pid; // Extract PID",
															"        ",
															"        pm.collectionVariables.set(\"siAccountpid\", pid); // Store in Collection Variables",
															"        ",
															"        console.log(\"siAccountpid:\", pid); // Log for debugging",
															"    } else {",
															"        console.log(\"No valid PID found in response.\");",
															"    }",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Accounts API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_accounts\").that.is.an(\"array\");",
															"",
															"    let accounts = response.data.si_accounts;",
															"",
															"    accounts.forEach(account => {",
															"        // Validate required fields",
															"        pm.expect(account).to.have.property(\"pid\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"status\").that.is.a(\"string\");",
															"        pm.expect(account).to.have.property(\"totalBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(account).to.have.property(\"totalDeposit\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(account).to.have.property(\"totalWithdrawn\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(account).to.have.property(\"totalInterest\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(account).to.have.property(\"availableBalance\").that.is.a(\"number\").and.to.be.at.least(0);",
															"        pm.expect(account).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIAccountResult\");",
															"",
															"        // Validate 'scheme' object",
															"        pm.expect(account).to.have.property(\"scheme\").that.is.an(\"object\");",
															"        pm.expect(account.scheme).to.have.property(\"productType\").that.is.a(\"string\");",
															"        pm.expect(account.scheme).to.have.property(\"name\").that.is.a(\"string\");",
															"        pm.expect(account.scheme).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SISchemeResult\");",
															"",
															"        // Validate 'product' object",
															"        pm.expect(account).to.have.property(\"product\").that.is.an(\"object\");",
															"        pm.expect(account.product).to.have.property(\"displayInterestRate\").that.is.a(\"number\").and.to.be.within(0, 1);",
															"        pm.expect(account.product).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIProductResult\");",
															"    });",
															"",
															"    console.log(\"✅ SI Accounts API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_accounts\",\n    \"variables\": {\n        \"input\": {\n            //\"productTypes\": [\"NFS\",\"PFS\",\"NTS\",\"PTS\"],\n            \"savingType\": \"FS\",\n            \"statuses\": \"ACTIVE\"\n        }\n    },\n    \"query\": \"query si_accounts($input: SIGetAccountsInput) {\\n  si_accounts(input: $input) {\\n    pid\\n    status\\n    totalBalance\\n    totalDeposit\\n    totalWithdrawn\\n    totalInterest\\n    availableBalance\\n    scheme {\\n      productType\\n      name\\n      settleDate\\n      __typename\\n    }\\n    product {\\n      displayInterestRate\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_withdraw_metadata (NFS) 1st",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_withdraw_metadata) {",
															"        let metadata = response.data.si_withdraw_metadata;",
															"",
															"        pm.expect(metadata.balanceLimit).to.be.a(\"number\"); // Ensure balanceLimit is a number",
															"        pm.expect(metadata.dailyLimit).to.be.a(\"number\"); // Ensure dailyLimit is a number",
															"        pm.expect(metadata.minWithdrawAmount).to.be.a(\"number\"); // Ensure minWithdrawAmount is a number",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"balance_limit\", metadata.balanceLimit);",
															"        pm.collectionVariables.set(\"daily_limit\", metadata.dailyLimit);",
															"        pm.collectionVariables.set(\"min_withdraw_amount\", metadata.minWithdrawAmount);",
															"",
															"        console.log(\"Balance Limit:\", metadata.balanceLimit);",
															"        console.log(\"Daily Limit:\", metadata.dailyLimit);",
															"        console.log(\"Min Withdraw Amount:\", metadata.minWithdrawAmount);",
															"    } else {",
															"        pm.test(\"Response does not contain valid withdraw metadata\", function () {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"",
															"pm.test(\"✅ Validate SI Withdraw Metadata API Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_withdraw_metadata\").that.is.an(\"object\");",
															"",
															"    let metadata = response.data.si_withdraw_metadata;",
															"",
															"    // Validate required fields",
															"    pm.expect(metadata).to.have.property(\"balanceLimit\").that.is.a(\"number\").and.to.be.at.least(0);",
															"    pm.expect(metadata).to.have.property(\"dailyLimit\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(metadata).to.have.property(\"minWithdrawAmount\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(metadata).to.have.property(\"__typename\").that.is.a(\"string\").and.to.equal(\"SIWithdrawMetadataResult\");",
															"",
															"    // Additional validation: minWithdrawAmount should not exceed dailyLimit",
															"    pm.expect(metadata.minWithdrawAmount).to.be.at.most(metadata.dailyLimit);",
															"",
															"    console.log(\"✅ SI Withdraw Metadata API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw_metadata\",\n    \"variables\": {\n        \"input\": {\n            \"accountPid\": \"{{siAccountpid}}\"\n        }\n    },\n    \"query\": \"query si_withdraw_metadata($input: SIGetWithdrawMetadataInput) {\\n  si_withdraw_metadata(input: $input) {\\n    balanceLimit\\n    dailyLimit\\n    minWithdrawAmount\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Withdraw (40k < min error)",
									"item": [
										{
											"name": "si_withdraw (40k < Min)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate SI Withdraw Min Amount Not Met Error\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"errors\").that.is.an(\"array\").and.to.have.length.above(0);",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"errors\" array",
															"    let error = response.errors[0];  // Get the first error object",
															"    pm.expect(error).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Withdraw min amount not met\");",
															"    pm.expect(error).to.have.property(\"key\").that.is.a(\"string\").and.equals(\"II:WITHDRAW_BANK_FAILED\");",
															"    pm.expect(error).to.have.property(\"details\").that.is.an(\"object\");",
															"",
															"    // Validate \"details\" object inside \"errors\"",
															"    let details = error.details;",
															"    pm.expect(details).to.have.property(\"code\").that.is.a(\"string\").and.equals(\"WITHDRAW_MIN_AMOUNT_NOT_MET\");",
															"    pm.expect(details).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Withdraw min amount not met\");",
															"",
															"    // Validate \"data\" object (should contain null for si_withdraw)",
															"    pm.expect(response.data).to.have.property(\"si_withdraw\").that.is.null;",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ SI Withdraw Error Response (Min Amount Not Met) is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawAmount', 40000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{withdrawAmount}},\n            \"accountPid\": \"{{siAccountpid}}\",\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation si_withdraw($input: SICreateWithdrawByBankInput!) {\\n  si_withdraw(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      totalAmount\\n      createdAt\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Withdraw (Min SUCCESS)",
									"item": [
										{
											"name": "si_withdraw (min_withdraw_amount)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Your min_withdraw_amount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_withdraw.transaction.totalAmount).to.eql(pm.collectionVariables.get('min_withdraw_amount'));",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var withdraw_pid = jsonData.data.si_withdraw.transaction.pid;",
															"pm.collectionVariables.set('withdraw_pid', withdraw_pid);",
															"console.log('withdraw_pid : ' + withdraw_pid);",
															"",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_withdraw && response.data.si_withdraw.transaction) {",
															"        let transaction = response.data.si_withdraw.transaction;",
															"",
															"        // Validate required fields and set variables in collection",
															"        pm.expect(transaction).to.have.property('pid').and.to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property('uid').and.to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property('code').and.to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property('totalAmount').and.to.be.a(\"number\").and.above(0);",
															"        pm.expect(transaction).to.have.property('createdAt').and.to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction).to.have.property('status').and.to.be.a(\"string\").and.not.empty;",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set({",
															"            \"withdraw_pid\": transaction.pid,",
															"            \"withdraw_uid\": transaction.uid,",
															"            \"withdraw_code\": transaction.code,",
															"            \"withdraw_total_amount\": transaction.totalAmount,",
															"            \"withdraw_created_at\": transaction.createdAt,",
															"            \"withdraw_status\": transaction.status",
															"        });",
															"",
															"        // Logging for debugging",
															"        console.log(\"Withdraw PID:\", transaction.pid);",
															"        console.log(\"Withdraw UID:\", transaction.uid);",
															"        console.log(\"Withdraw Code:\", transaction.code);",
															"        console.log(\"Total Amount:\", transaction.totalAmount);",
															"        console.log(\"Created At:\", transaction.createdAt);",
															"        console.log(\"Status:\", transaction.status);",
															"    } else {",
															"        pm.test(\"Response does not contain valid withdraw transaction data\", function () {",
															"            pm.expect.fail(\"Response does not contain valid withdraw transaction data\");",
															"        });",
															"    }",
															"});",
															"",
															"pm.test(\"✅ Validate SI Withdraw API response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate response structure and data types",
															"    pm.expect(response).to.have.nested.property('data.si_withdraw.transaction').and.to.include.keys(",
															"        'pid', 'uid', 'code', 'totalAmount', 'createdAt', 'status', '__typename'",
															"    );",
															"    pm.expect(response).to.have.nested.property('data.si_withdraw').and.to.include.keys('__typename');",
															"    pm.expect(response).to.have.nested.property('extensions.timing').and.to.be.a('number');",
															"",
															"    console.log(\"✅ SI Withdraw API response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{min_withdraw_amount}},\n            \"accountPid\": \"{{siAccountpid}}\",\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation si_withdraw($input: SICreateWithdrawByBankInput!) {\\n  si_withdraw(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      totalAmount\\n      createdAt\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction (Min PENDING)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your min_withdraw_amount is correct\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_transaction.totalAmount).to.eql(pm.collectionVariables.get('min_withdraw_amount'));",
															"});   ",
															"    ",
															" ",
															"",
															"pm.test(\"✅ Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    //pm.expect(transaction).to.have.property(\"status\", \"PENDING\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"OUTCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    //pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{withdraw_pid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Withdraw (100M SUCCESS)",
									"item": [
										{
											"name": "si_withdraw (100M)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Your withdrawAmount is correct\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_withdraw.transaction.totalAmount).to.eql(pm.collectionVariables.get('withdrawAmount'));",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var withdraw_pid = jsonData.data.si_withdraw.transaction.pid;",
															"pm.collectionVariables.set('withdraw_pid', withdraw_pid);",
															"console.log('withdraw_pid : ' + withdraw_pid);",
															"",
															"",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_withdraw && response.data.si_withdraw.transaction) {",
															"        let transaction = response.data.si_withdraw.transaction;",
															"",
															"        // Validate required fields",
															"        pm.expect(transaction.pid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.uid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.code).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.totalAmount).to.be.a(\"number\").and.above(0);",
															"        pm.expect(transaction.createdAt).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.status).to.be.a(\"string\").and.not.empty;",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"withdraw_pid\", transaction.pid);",
															"        pm.collectionVariables.set(\"withdraw_uid\", transaction.uid);",
															"        pm.collectionVariables.set(\"withdraw_code\", transaction.code);",
															"        pm.collectionVariables.set(\"withdraw_total_amount\", transaction.totalAmount);",
															"        pm.collectionVariables.set(\"withdraw_created_at\", transaction.createdAt);",
															"        pm.collectionVariables.set(\"withdraw_status\", transaction.status);",
															"",
															"        // Logging for debugging",
															"        console.log(\"Withdraw PID:\", transaction.pid);",
															"        console.log(\"Withdraw UID:\", transaction.uid);",
															"        console.log(\"Withdraw Code:\", transaction.code);",
															"        console.log(\"Total Amount:\", transaction.totalAmount);",
															"        console.log(\"Created At:\", transaction.createdAt);",
															"        console.log(\"Status:\", transaction.status);",
															"    } else {",
															"        pm.test(\"Response does not contain valid withdraw transaction data\", function () {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawAmount', 100000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{withdrawAmount}},\n            \"accountPid\": \"{{siAccountpid}}\",\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation si_withdraw($input: SICreateWithdrawByBankInput!) {\\n  si_withdraw(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      totalAmount\\n      createdAt\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction (100M PENDING)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    //pm.expect(transaction).to.have.property(\"status\", \"PENDING\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"OUTCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    //pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{withdraw_pid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Withdraw (110M PENDING - Manual)",
									"item": [
										{
											"name": "si_withdraw (110M - Manual Review)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Your withdrawAmount is correct\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_withdraw.transaction.totalAmount).to.eql(pm.collectionVariables.get('withdrawAmount'));",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var withdraw_pid = jsonData.data.si_withdraw.transaction.pid;",
															"pm.collectionVariables.set('withdraw_pid', withdraw_pid);",
															"console.log('withdraw_pid : ' + withdraw_pid);",
															"",
															"",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_withdraw && response.data.si_withdraw.transaction) {",
															"        let transaction = response.data.si_withdraw.transaction;",
															"",
															"        // Validate required fields",
															"        pm.expect(transaction.pid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.uid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.code).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.totalAmount).to.be.a(\"number\").and.above(0);",
															"        pm.expect(transaction.createdAt).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.status).to.be.a(\"string\").and.not.empty;",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"withdraw_pid\", transaction.pid);",
															"        pm.collectionVariables.set(\"withdraw_uid\", transaction.uid);",
															"        pm.collectionVariables.set(\"withdraw_code\", transaction.code);",
															"        pm.collectionVariables.set(\"withdraw_total_amount\", transaction.totalAmount);",
															"        pm.collectionVariables.set(\"withdraw_created_at\", transaction.createdAt);",
															"        pm.collectionVariables.set(\"withdraw_status\", transaction.status);",
															"",
															"        // Logging for debugging",
															"        console.log(\"Withdraw PID:\", transaction.pid);",
															"        console.log(\"Withdraw UID:\", transaction.uid);",
															"        console.log(\"Withdraw Code:\", transaction.code);",
															"        console.log(\"Total Amount:\", transaction.totalAmount);",
															"        console.log(\"Created At:\", transaction.createdAt);",
															"        console.log(\"Status:\", transaction.status);",
															"    } else {",
															"        pm.test(\"Response does not contain valid withdraw transaction data\", function () {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawAmount', 110000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{withdrawAmount}},\n            \"accountPid\": \"{{siAccountpid}}\",\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation si_withdraw($input: SICreateWithdrawByBankInput!) {\\n  si_withdraw(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      totalAmount\\n      createdAt\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction (110M PENDING)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    //pm.expect(transaction).to.have.property(\"status\", \"PENDING\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"OUTCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    //pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{withdraw_pid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS Withdraw (500M PENDING - Manual)",
									"item": [
										{
											"name": "si_withdraw (500M - Manual Review)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Your withdrawAmount is correct\", function () {",
															"    let jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.si_withdraw.transaction.totalAmount).to.eql(pm.collectionVariables.get('withdrawAmount'));",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var withdraw_pid = jsonData.data.si_withdraw.transaction.pid;",
															"pm.collectionVariables.set('withdraw_pid', withdraw_pid);",
															"console.log('withdraw_pid : ' + withdraw_pid);",
															"",
															"",
															"",
															"pm.test(\"✅ Check JSON values and set collection variables\", function () {",
															"    let response = pm.response.json(); // Parse JSON response",
															"",
															"    if (response.data && response.data.si_withdraw && response.data.si_withdraw.transaction) {",
															"        let transaction = response.data.si_withdraw.transaction;",
															"",
															"        // Validate required fields",
															"        pm.expect(transaction.pid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.uid).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.code).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.totalAmount).to.be.a(\"number\").and.above(0);",
															"        pm.expect(transaction.createdAt).to.be.a(\"string\").and.not.empty;",
															"        pm.expect(transaction.status).to.be.a(\"string\").and.not.empty;",
															"",
															"        // Set variables in collection",
															"        pm.collectionVariables.set(\"withdraw_pid\", transaction.pid);",
															"        pm.collectionVariables.set(\"withdraw_uid\", transaction.uid);",
															"        pm.collectionVariables.set(\"withdraw_code\", transaction.code);",
															"        pm.collectionVariables.set(\"withdraw_total_amount\", transaction.totalAmount);",
															"        pm.collectionVariables.set(\"withdraw_created_at\", transaction.createdAt);",
															"        pm.collectionVariables.set(\"withdraw_status\", transaction.status);",
															"",
															"        // Logging for debugging",
															"        console.log(\"Withdraw PID:\", transaction.pid);",
															"        console.log(\"Withdraw UID:\", transaction.uid);",
															"        console.log(\"Withdraw Code:\", transaction.code);",
															"        console.log(\"Total Amount:\", transaction.totalAmount);",
															"        console.log(\"Created At:\", transaction.createdAt);",
															"        console.log(\"Status:\", transaction.status);",
															"    } else {",
															"        pm.test(\"Response does not contain valid withdraw transaction data\", function () {",
															"            pm.expect(false).to.be.true; // Force test failure",
															"        });",
															"    }",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('withdrawAmount', 500000000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_withdraw\",\n    \"variables\": {\n        \"input\": {\n            \"amount\": {{withdrawAmount}},\n            \"accountPid\": \"{{siAccountpid}}\",\n            \"pinCode\": \"{{pinCode}}\"\n        }\n    },\n    \"query\": \"mutation si_withdraw($input: SICreateWithdrawByBankInput!) {\\n  si_withdraw(input: $input) {\\n    transaction {\\n      pid\\n      uid\\n      code\\n      totalAmount\\n      createdAt\\n      status\\n      __typename\\n    }\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										},
										{
											"name": "si_transaction (500M PENDING)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Check transaction data and set variables\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Ensure the expected data structure exists",
															"    pm.expect(response).to.have.property(\"data\");",
															"    pm.expect(response.data).to.have.property(\"si_transaction\");",
															"",
															"    let transaction = response.data.si_transaction;",
															"",
															"    // Validate required fields",
															"    pm.expect(transaction).to.have.property(\"status\", \"PENDING\");",
															"    pm.expect(transaction).to.have.property(\"type\", \"OUTCOME\");",
															"    pm.expect(transaction).to.have.property(\"code\").that.is.a(\"string\");",
															"    pm.expect(transaction).to.have.property(\"totalAmount\").that.is.a(\"number\");",
															"    //pm.expect(transaction).to.have.property(\"bankMemo\").that.is.a(\"string\");",
															"",
															"    // Set values as collection variables",
															"    pm.collectionVariables.set(\"transaction_status\", transaction.status);",
															"    pm.collectionVariables.set(\"transaction_type\", transaction.type);",
															"    pm.collectionVariables.set(\"transaction_code\", transaction.code);",
															"    pm.collectionVariables.set(\"transaction_totalAmount\", transaction.totalAmount);",
															"    pm.collectionVariables.set(\"transaction_bankMemo\", transaction.bankMemo);",
															"",
															"    console.log(\"✅ Transaction variables set successfully!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"si_transaction\",\n    \"variables\": {\n        \"input\": {\n            \"transactionPid\": \"{{withdraw_pid}}\"\n        }\n    },\n    \"query\": \"query si_transaction($input: SIGetTransactionInput) {\\n  si_transaction(input: $input) {\\n    status\\n    type\\n    code\\n    totalAmount\\n    description\\n    transferMethod\\n    createdAt\\n    interestStartedAt\\n    effectedAt\\n    displayInterestRate\\n    internalPayment {\\n      referenceType\\n      __typename\\n    }\\n    taxAmount\\n    productType\\n    bankMemo\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NFS Convert",
							"item": [
								{
									"name": "FSv1 Settle NFS",
									"item": [
										{
											"name": "fs_settlement_to_nfs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"✅ Validate FS Settlement to NFS Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.fs_settlement_to_nfs\" object",
															"    let settlement = response.data.fs_settlement_to_nfs;",
															"    pm.expect(settlement).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
															"    pm.expect(settlement).to.have.property(\"message\").that.is.a(\"string\").and.equals(\"Request FS settlement to NFS success\");",
															"    pm.expect(settlement).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"FSSettlementToNFSResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ FS Settlement to NFS Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"operationName\": \"fs_settle_to_nfs\",\n    \"variables\": {},\n    \"query\": \"mutation fs_settle_to_nfs {\\n  fs_settlement_to_nfs {\\n    status\\n    message\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NFS convert TSv1 (500K)",
									"item": [
										{
											"name": "convert_nfs_to_tsv1 (500K)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"✅ Validate Convert NFS to TSv1 Response\", function () {",
															"    let response = pm.response.json();",
															"",
															"    // Validate top-level structure",
															"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
															"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
															"",
															"    // Validate \"data.convert_nfs_to_tsv1\" object",
															"    let convertData = response.data.convert_nfs_to_tsv1;",
															"    pm.expect(convertData).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(convertData).to.have.property(\"pid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(convertData).to.have.property(\"code\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(convertData).to.have.property(\"accountId\").that.is.a(\"number\").and.to.be.above(0);",
															"    pm.expect(convertData).to.have.property(\"accountPid\").that.is.null;  // Ensure it's null",
															"    pm.expect(convertData).to.have.property(\"uid\").that.is.a(\"string\").and.not.empty;",
															"    pm.expect(convertData).to.have.property(\"type\").that.is.a(\"string\").and.equals(\"outcome\");",
															"    pm.expect(convertData).to.have.property(\"description\").that.is.a(\"string\").and.equals(\"deposit\");",
															"    pm.expect(convertData).to.have.property(\"status\").that.is.a(\"string\").and.equals(\"success\");",
															"    pm.expect(convertData).to.have.property(\"__typename\").that.is.a(\"string\").and.equals(\"TSTransactionResult\");",
															"",
															"    // Validate \"extensions\" object",
															"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
															"",
															"    console.log(\"✅ Convert NFS to TSv1 Response is valid!\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('convertAmount', 500000);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-infina-app-version",
														"value": "{{x-infina-app-version}}",
														"type": "text"
													},
													{
														"key": "x-infina-api-key",
														"value": "{{x-infina-api-key}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"variables\": {\n        \"input\": {\n            \"productPid\": \"{{productPid_9M}}\",\n            \"totalAmount\": {{convertAmount}},\n            \"rewardAmount\": 0,\n            \"platform\": \"PostmanTest\",\n            \"settlementType\": \"term_savings\",\n            \"settlementProductPid\": \"{{productPid_9M}}\"\n        }\n    },\n    \"query\": \"mutation ($input: ConvertNFSToTSv1Input!) {\\n  convert_nfs_to_tsv1(input: $input) {\\n    id\\n    pid\\n    code\\n    accountId\\n    accountPid\\n    uid\\n    type\\n    description\\n    status\\n    __typename\\n  }\\n}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://staging.realstake.co/api/graphiql",
													"protocol": "https",
													"host": [
														"staging",
														"realstake",
														"co"
													],
													"path": [
														"api",
														"graphiql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "SignOut",
			"item": [
				{
					"name": "SignOut",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// 1. Validate status 200OK and the response structure",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"✅ Validate Signout Response\", function () {",
									"    let response = pm.response.json();",
									"",
									"    // Validate top-level structure",
									"    pm.expect(response).to.have.property(\"data\").that.is.an(\"object\");",
									"    pm.expect(response).to.have.property(\"extensions\").that.is.an(\"object\");",
									"",
									"    // Validate \"signout\" property in the \"data\" object",
									"    pm.expect(response.data).to.have.property(\"signout\").that.is.a(\"string\").and.equals(\"success\");",
									"",
									"    // Validate \"extensions\"",
									"    pm.expect(response.extensions).to.have.property(\"timing\").that.is.a(\"number\").and.to.be.above(0);",
									"",
									"    console.log(\"✅ Signout Response is valid!\");",
									"});",
									"",
									"",
									"// 2. Clear collection variables",
									"pm.test(\"Clear all collection variables after signout\", function() {",
									"    // Get current variables",
									"    const vars = pm.collectionVariables.toObject();",
									"    const varCount = Object.keys(vars).length;",
									"    ",
									"    if (varCount > 0) {",
									"        // Log which variables are being cleared",
									"        console.log(`Clearing ${varCount} collection variables:`, Object.keys(vars));",
									"        ",
									"        // Clear all variables",
									"        pm.collectionVariables.clear();",
									"        ",
									"        // Verify they're gone",
									"        pm.expect(Object.keys(pm.collectionVariables.toObject()).length).to.equal(0);",
									"    } else {",
									"        console.log(\"No collection variables to clear\");",
									"        pm.expect(true).to.be.true; // dummy assertion so test doesn't fail",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-infina-app-version",
								"value": "{{x-infina-app-version}}",
								"type": "text"
							},
							{
								"key": "x-infina-api-key",
								"value": "{{x-infina-api-key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variables\": {\n        \"onesignal_id\": \"d94a83aa-4a3c-4c1a-9171-ac36900e0523\"\n    },\n    \"query\": \"mutation ($onesignal_id: String) {\\n  signout(input: {onesignal_id: $onesignal_id})\\n}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.realstake.co/api/graphiql",
							"protocol": "https",
							"host": [
								"staging",
								"realstake",
								"co"
							],
							"path": [
								"api",
								"graphiql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set('baseUrl', \"https://staging.realstake.co/api\");",
					"pm.collectionVariables.set('x-infina-api-key', \"zTW9S4LF5qGQfCAJzOiKGAR0Y2dTuAKs\");",
					"pm.collectionVariables.set('x-infina-app-version', \"9.26.13\");",
					"pm.collectionVariables.set('requestSecret', \"476f85ba2d4bc9a3caea55813e14dac9\");",
					"",
					"",
					"",
					"// Set the maximum number of retries",
					"pm.collectionVariables.set(\"maxRetries\", 3);",
					"",
					"// Set the delay between retries (in milliseconds)",
					"pm.collectionVariables.set(\"retryDelay\", 2000); // 2 seconds"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// // Get the maximum number of retries and delay from collection variables",
					"// const maxRetries = parseInt(pm.collectionVariables.get(\"maxRetries\"));",
					"// const retryDelay = parseInt(pm.collectionVariables.get(\"retryDelay\"));",
					"",
					"// // Function to retry the request",
					"// const retryRequest = (retryCount) => {",
					"//     if (retryCount >= maxRetries) {",
					"//         console.log(\"❌ Max retries reached. Stopping retries.\");",
					"//         return;",
					"//     }",
					"",
					"//     // Check if the response is not HTTP 200 OK",
					"//     if (pm.response.code !== 200) {",
					"//         console.log(`❌ Attempt ${retryCount + 1}: Received ${pm.response.code}. Retrying in ${retryDelay / 1000} seconds...`);",
					"",
					"//         // Retry the request after a delay",
					"//         setTimeout(() => {",
					"//             pm.execution.setNextRequest(pm.info.requestName); // Retry the same request",
					"//         }, retryDelay);",
					"//     } else {",
					"//         console.log(\"✅ Request succeeded with HTTP 200 OK.\");",
					"//         pm.execution.setNextRequest(null); // Stop further retries",
					"//     }",
					"// };",
					"",
					"// Start the retry logic",
					"// retryRequest(0);"
				]
			}
		}
	]
}